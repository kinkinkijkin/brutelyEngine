#[
    OpenGL loader generated by glad 0.1.34 on Thu Dec 24 05:34:39 2020.

    Language/Generator: Nim
    Specification: gl
    APIs: gl=2.1
    Profile: compatibility
    Extensions:
        GL_ARB_cull_distance,
        GL_ARB_draw_buffers,
        GL_ARB_draw_buffers_blend,
        GL_ARB_draw_elements_base_vertex,
        GL_ARB_fragment_program,
        GL_ARB_fragment_program_shadow,
        GL_ARB_fragment_shader,
        GL_ARB_multisample,
        GL_ARB_multitexture,
        GL_ARB_shader_texture_lod,
        GL_ARB_shadow,
        GL_ARB_texture_swizzle,
        GL_ARB_uniform_buffer_object,
        GL_ARB_vertex_attrib_binding,
        GL_ARB_vertex_blend,
        GL_ARB_vertex_program,
        GL_ARB_vertex_shader,
        GL_EXT_shadow_funcs
    Loader: True
    Local files: False
    Omit khrplatform: False
    Reproducible: False

    Commandline:
        --profile="compatibility" --api="gl=2.1" --generator="nim" --spec="gl" --extensions="GL_ARB_cull_distance,GL_ARB_draw_buffers,GL_ARB_draw_buffers_blend,GL_ARB_draw_elements_base_vertex,GL_ARB_fragment_program,GL_ARB_fragment_program_shadow,GL_ARB_fragment_shader,GL_ARB_multisample,GL_ARB_multitexture,GL_ARB_shader_texture_lod,GL_ARB_shadow,GL_ARB_texture_swizzle,GL_ARB_uniform_buffer_object,GL_ARB_vertex_attrib_binding,GL_ARB_vertex_blend,GL_ARB_vertex_program,GL_ARB_vertex_shader,GL_EXT_shadow_funcs"
    Online:
        https://glad.dav1d.de/#profile=compatibility&language=nim&specification=gl&loader=on&api=gl%3D2.1&extensions=GL_ARB_cull_distance&extensions=GL_ARB_draw_buffers&extensions=GL_ARB_draw_buffers_blend&extensions=GL_ARB_draw_elements_base_vertex&extensions=GL_ARB_fragment_program&extensions=GL_ARB_fragment_program_shadow&extensions=GL_ARB_fragment_shader&extensions=GL_ARB_multisample&extensions=GL_ARB_multitexture&extensions=GL_ARB_shader_texture_lod&extensions=GL_ARB_shadow&extensions=GL_ARB_texture_swizzle&extensions=GL_ARB_uniform_buffer_object&extensions=GL_ARB_vertex_attrib_binding&extensions=GL_ARB_vertex_blend&extensions=GL_ARB_vertex_program&extensions=GL_ARB_vertex_shader&extensions=GL_EXT_shadow_funcs
]#

import strutils

var glVersionMajor, glVersionMinor: int

# Types
type
  ClContext* = distinct pointer
  ClEvent* = distinct pointer
  GLVULKANPROCNV* = pointer
  GLbitfield* = uint32
  GLboolean* = bool
  GLbyte* = int8
  GLchar* = char
  GLcharARB* = byte
  GLclampd* = float64
  GLclampf* = float32
  GLclampx* = int32
  GLdouble* = float64
  GLeglClientBufferEXT* = pointer
  GLeglImageOES* = distinct pointer
  GLenum* = uint32
  GLfixed* = int32
  GLfloat* = float32
  GLhalf* = uint16
  GLhalfARB* = uint16
  GLhalfNV* = uint16
  GLhandleARB* = uint32
  GLint* = int32
  GLint64* = int64
  GLint64EXT* = int64
  GLintptr* = int
  GLintptrARB* = int
  GLshort* = int16
  GLsizei* = int32
  GLsizeiptr* = int
  GLsizeiptrARB* = int
  GLsync* = distinct pointer
  GLubyte* = uint8
  GLuint* = uint32
  GLuint64* = uint64
  GLuint64EXT* = uint64
  GLushort* = uint16
  GLvdpauSurfaceNV* = int32
  GLvoid* = pointer

  GLdebugProc* = proc (
    source: GLenum,
    typ: GLenum,
    id: GLuint,
    severity: GLenum,
    length: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}

  GLdebugProcArb* = proc (
    source: GLenum,
    typ: GLenum,
    id: GLuint,
    severity: GLenum,
    len: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}

  GLdebugProcAmd* = proc (
    id: GLuint,
    category: GLenum,
    severity: GLenum,
    len: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}

  GLdebugProcKhr* = proc (
    source, typ: GLenum,
    id: GLuint,
    severity: GLenum,
    length: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}


# Enums
const
  GL_FALSE* = 0
  GL_INVALID_INDEX*: uint32 = uint32(0xFFFFFFFF)
  GL_NONE* = 0
  GL_NONE_OES* = 0
  GL_NO_ERROR* = 0
  GL_ONE* = 1
  GL_TIMEOUT_IGNORED*: uint64 = 0xFFFFFFFFFFFFFFFF'u64
  GL_TIMEOUT_IGNORED_APPLE*: uint64 = 0xFFFFFFFFFFFFFFFF'u64
  GL_TRUE* = 1
  GL_VERSION_ES_CL_1_0* = 1
  GL_VERSION_ES_CL_1_1* = 1
  GL_VERSION_ES_CM_1_1* = 1
  GL_ZERO* = 0

  GL_DEPTH_BUFFER_BIT*: GLenum = GLenum(0x00000100)
  GL_STENCIL_BUFFER_BIT*: GLenum = GLenum(0x00000400)
  GL_COLOR_BUFFER_BIT*: GLenum = GLenum(0x00004000)
  GL_POINTS*: GLenum = GLenum(0x0000)
  GL_LINES*: GLenum = GLenum(0x0001)
  GL_LINE_LOOP*: GLenum = GLenum(0x0002)
  GL_LINE_STRIP*: GLenum = GLenum(0x0003)
  GL_TRIANGLES*: GLenum = GLenum(0x0004)
  GL_TRIANGLE_STRIP*: GLenum = GLenum(0x0005)
  GL_TRIANGLE_FAN*: GLenum = GLenum(0x0006)
  GL_QUADS*: GLenum = GLenum(0x0007)
  GL_NEVER*: GLenum = GLenum(0x0200)
  GL_LESS*: GLenum = GLenum(0x0201)
  GL_EQUAL*: GLenum = GLenum(0x0202)
  GL_LEQUAL*: GLenum = GLenum(0x0203)
  GL_GREATER*: GLenum = GLenum(0x0204)
  GL_NOTEQUAL*: GLenum = GLenum(0x0205)
  GL_GEQUAL*: GLenum = GLenum(0x0206)
  GL_ALWAYS*: GLenum = GLenum(0x0207)
  GL_SRC_COLOR*: GLenum = GLenum(0x0300)
  GL_ONE_MINUS_SRC_COLOR*: GLenum = GLenum(0x0301)
  GL_SRC_ALPHA*: GLenum = GLenum(0x0302)
  GL_ONE_MINUS_SRC_ALPHA*: GLenum = GLenum(0x0303)
  GL_DST_ALPHA*: GLenum = GLenum(0x0304)
  GL_ONE_MINUS_DST_ALPHA*: GLenum = GLenum(0x0305)
  GL_DST_COLOR*: GLenum = GLenum(0x0306)
  GL_ONE_MINUS_DST_COLOR*: GLenum = GLenum(0x0307)
  GL_SRC_ALPHA_SATURATE*: GLenum = GLenum(0x0308)
  GL_FRONT_LEFT*: GLenum = GLenum(0x0400)
  GL_FRONT_RIGHT*: GLenum = GLenum(0x0401)
  GL_BACK_LEFT*: GLenum = GLenum(0x0402)
  GL_BACK_RIGHT*: GLenum = GLenum(0x0403)
  GL_FRONT*: GLenum = GLenum(0x0404)
  GL_BACK*: GLenum = GLenum(0x0405)
  GL_LEFT*: GLenum = GLenum(0x0406)
  GL_RIGHT*: GLenum = GLenum(0x0407)
  GL_FRONT_AND_BACK*: GLenum = GLenum(0x0408)
  GL_INVALID_ENUM*: GLenum = GLenum(0x0500)
  GL_INVALID_VALUE*: GLenum = GLenum(0x0501)
  GL_INVALID_OPERATION*: GLenum = GLenum(0x0502)
  GL_OUT_OF_MEMORY*: GLenum = GLenum(0x0505)
  GL_CW*: GLenum = GLenum(0x0900)
  GL_CCW*: GLenum = GLenum(0x0901)
  GL_POINT_SIZE*: GLenum = GLenum(0x0B11)
  GL_POINT_SIZE_RANGE*: GLenum = GLenum(0x0B12)
  GL_POINT_SIZE_GRANULARITY*: GLenum = GLenum(0x0B13)
  GL_LINE_SMOOTH*: GLenum = GLenum(0x0B20)
  GL_LINE_WIDTH*: GLenum = GLenum(0x0B21)
  GL_LINE_WIDTH_RANGE*: GLenum = GLenum(0x0B22)
  GL_LINE_WIDTH_GRANULARITY*: GLenum = GLenum(0x0B23)
  GL_POLYGON_MODE*: GLenum = GLenum(0x0B40)
  GL_POLYGON_SMOOTH*: GLenum = GLenum(0x0B41)
  GL_CULL_FACE*: GLenum = GLenum(0x0B44)
  GL_CULL_FACE_MODE*: GLenum = GLenum(0x0B45)
  GL_FRONT_FACE*: GLenum = GLenum(0x0B46)
  GL_DEPTH_RANGE*: GLenum = GLenum(0x0B70)
  GL_DEPTH_TEST*: GLenum = GLenum(0x0B71)
  GL_DEPTH_WRITEMASK*: GLenum = GLenum(0x0B72)
  GL_DEPTH_CLEAR_VALUE*: GLenum = GLenum(0x0B73)
  GL_DEPTH_FUNC*: GLenum = GLenum(0x0B74)
  GL_STENCIL_TEST*: GLenum = GLenum(0x0B90)
  GL_STENCIL_CLEAR_VALUE*: GLenum = GLenum(0x0B91)
  GL_STENCIL_FUNC*: GLenum = GLenum(0x0B92)
  GL_STENCIL_VALUE_MASK*: GLenum = GLenum(0x0B93)
  GL_STENCIL_FAIL*: GLenum = GLenum(0x0B94)
  GL_STENCIL_PASS_DEPTH_FAIL*: GLenum = GLenum(0x0B95)
  GL_STENCIL_PASS_DEPTH_PASS*: GLenum = GLenum(0x0B96)
  GL_STENCIL_REF*: GLenum = GLenum(0x0B97)
  GL_STENCIL_WRITEMASK*: GLenum = GLenum(0x0B98)
  GL_VIEWPORT*: GLenum = GLenum(0x0BA2)
  GL_DITHER*: GLenum = GLenum(0x0BD0)
  GL_BLEND_DST*: GLenum = GLenum(0x0BE0)
  GL_BLEND_SRC*: GLenum = GLenum(0x0BE1)
  GL_BLEND*: GLenum = GLenum(0x0BE2)
  GL_LOGIC_OP_MODE*: GLenum = GLenum(0x0BF0)
  GL_DRAW_BUFFER*: GLenum = GLenum(0x0C01)
  GL_READ_BUFFER*: GLenum = GLenum(0x0C02)
  GL_SCISSOR_BOX*: GLenum = GLenum(0x0C10)
  GL_SCISSOR_TEST*: GLenum = GLenum(0x0C11)
  GL_COLOR_CLEAR_VALUE*: GLenum = GLenum(0x0C22)
  GL_COLOR_WRITEMASK*: GLenum = GLenum(0x0C23)
  GL_DOUBLEBUFFER*: GLenum = GLenum(0x0C32)
  GL_STEREO*: GLenum = GLenum(0x0C33)
  GL_LINE_SMOOTH_HINT*: GLenum = GLenum(0x0C52)
  GL_POLYGON_SMOOTH_HINT*: GLenum = GLenum(0x0C53)
  GL_UNPACK_SWAP_BYTES*: GLenum = GLenum(0x0CF0)
  GL_UNPACK_LSB_FIRST*: GLenum = GLenum(0x0CF1)
  GL_UNPACK_ROW_LENGTH*: GLenum = GLenum(0x0CF2)
  GL_UNPACK_SKIP_ROWS*: GLenum = GLenum(0x0CF3)
  GL_UNPACK_SKIP_PIXELS*: GLenum = GLenum(0x0CF4)
  GL_UNPACK_ALIGNMENT*: GLenum = GLenum(0x0CF5)
  GL_PACK_SWAP_BYTES*: GLenum = GLenum(0x0D00)
  GL_PACK_LSB_FIRST*: GLenum = GLenum(0x0D01)
  GL_PACK_ROW_LENGTH*: GLenum = GLenum(0x0D02)
  GL_PACK_SKIP_ROWS*: GLenum = GLenum(0x0D03)
  GL_PACK_SKIP_PIXELS*: GLenum = GLenum(0x0D04)
  GL_PACK_ALIGNMENT*: GLenum = GLenum(0x0D05)
  GL_MAX_TEXTURE_SIZE*: GLenum = GLenum(0x0D33)
  GL_MAX_VIEWPORT_DIMS*: GLenum = GLenum(0x0D3A)
  GL_SUBPIXEL_BITS*: GLenum = GLenum(0x0D50)
  GL_TEXTURE_1D*: GLenum = GLenum(0x0DE0)
  GL_TEXTURE_2D*: GLenum = GLenum(0x0DE1)
  GL_TEXTURE_WIDTH*: GLenum = GLenum(0x1000)
  GL_TEXTURE_HEIGHT*: GLenum = GLenum(0x1001)
  GL_TEXTURE_BORDER_COLOR*: GLenum = GLenum(0x1004)
  GL_DONT_CARE*: GLenum = GLenum(0x1100)
  GL_FASTEST*: GLenum = GLenum(0x1101)
  GL_NICEST*: GLenum = GLenum(0x1102)
  cGL_BYTE*: GLenum = GLenum(0x1400)
  GL_UNSIGNED_BYTE*: GLenum = GLenum(0x1401)
  cGL_SHORT*: GLenum = GLenum(0x1402)
  GL_UNSIGNED_SHORT*: GLenum = GLenum(0x1403)
  cGL_INT*: GLenum = GLenum(0x1404)
  GL_UNSIGNED_INT*: GLenum = GLenum(0x1405)
  cGL_FLOAT*: GLenum = GLenum(0x1406)
  GL_STACK_OVERFLOW*: GLenum = GLenum(0x0503)
  GL_STACK_UNDERFLOW*: GLenum = GLenum(0x0504)
  GL_CLEAR*: GLenum = GLenum(0x1500)
  GL_AND*: GLenum = GLenum(0x1501)
  GL_AND_REVERSE*: GLenum = GLenum(0x1502)
  GL_COPY*: GLenum = GLenum(0x1503)
  GL_AND_INVERTED*: GLenum = GLenum(0x1504)
  GL_NOOP*: GLenum = GLenum(0x1505)
  GL_XOR*: GLenum = GLenum(0x1506)
  GL_OR*: GLenum = GLenum(0x1507)
  GL_NOR*: GLenum = GLenum(0x1508)
  GL_EQUIV*: GLenum = GLenum(0x1509)
  GL_INVERT*: GLenum = GLenum(0x150A)
  GL_OR_REVERSE*: GLenum = GLenum(0x150B)
  GL_COPY_INVERTED*: GLenum = GLenum(0x150C)
  GL_OR_INVERTED*: GLenum = GLenum(0x150D)
  GL_NAND*: GLenum = GLenum(0x150E)
  GL_SET*: GLenum = GLenum(0x150F)
  GL_TEXTURE*: GLenum = GLenum(0x1702)
  GL_COLOR*: GLenum = GLenum(0x1800)
  GL_DEPTH*: GLenum = GLenum(0x1801)
  GL_STENCIL*: GLenum = GLenum(0x1802)
  GL_STENCIL_INDEX*: GLenum = GLenum(0x1901)
  GL_DEPTH_COMPONENT*: GLenum = GLenum(0x1902)
  GL_RED*: GLenum = GLenum(0x1903)
  GL_GREEN*: GLenum = GLenum(0x1904)
  GL_BLUE*: GLenum = GLenum(0x1905)
  GL_ALPHA*: GLenum = GLenum(0x1906)
  GL_RGB*: GLenum = GLenum(0x1907)
  GL_RGBA*: GLenum = GLenum(0x1908)
  GL_POINT*: GLenum = GLenum(0x1B00)
  GL_LINE*: GLenum = GLenum(0x1B01)
  GL_FILL*: GLenum = GLenum(0x1B02)
  GL_KEEP*: GLenum = GLenum(0x1E00)
  GL_REPLACE*: GLenum = GLenum(0x1E01)
  GL_INCR*: GLenum = GLenum(0x1E02)
  GL_DECR*: GLenum = GLenum(0x1E03)
  GL_VENDOR*: GLenum = GLenum(0x1F00)
  GL_RENDERER*: GLenum = GLenum(0x1F01)
  GL_VERSION*: GLenum = GLenum(0x1F02)
  GL_EXTENSIONS*: GLenum = GLenum(0x1F03)
  GL_NEAREST*: GLenum = GLenum(0x2600)
  GL_LINEAR*: GLenum = GLenum(0x2601)
  GL_NEAREST_MIPMAP_NEAREST*: GLenum = GLenum(0x2700)
  GL_LINEAR_MIPMAP_NEAREST*: GLenum = GLenum(0x2701)
  GL_NEAREST_MIPMAP_LINEAR*: GLenum = GLenum(0x2702)
  GL_LINEAR_MIPMAP_LINEAR*: GLenum = GLenum(0x2703)
  GL_TEXTURE_MAG_FILTER*: GLenum = GLenum(0x2800)
  GL_TEXTURE_MIN_FILTER*: GLenum = GLenum(0x2801)
  GL_TEXTURE_WRAP_S*: GLenum = GLenum(0x2802)
  GL_TEXTURE_WRAP_T*: GLenum = GLenum(0x2803)
  GL_REPEAT*: GLenum = GLenum(0x2901)
  GL_CURRENT_BIT*: GLenum = GLenum(0x00000001)
  GL_POINT_BIT*: GLenum = GLenum(0x00000002)
  GL_LINE_BIT*: GLenum = GLenum(0x00000004)
  GL_POLYGON_BIT*: GLenum = GLenum(0x00000008)
  GL_POLYGON_STIPPLE_BIT*: GLenum = GLenum(0x00000010)
  GL_PIXEL_MODE_BIT*: GLenum = GLenum(0x00000020)
  GL_LIGHTING_BIT*: GLenum = GLenum(0x00000040)
  GL_FOG_BIT*: GLenum = GLenum(0x00000080)
  GL_ACCUM_BUFFER_BIT*: GLenum = GLenum(0x00000200)
  GL_VIEWPORT_BIT*: GLenum = GLenum(0x00000800)
  GL_TRANSFORM_BIT*: GLenum = GLenum(0x00001000)
  GL_ENABLE_BIT*: GLenum = GLenum(0x00002000)
  GL_HINT_BIT*: GLenum = GLenum(0x00008000)
  GL_EVAL_BIT*: GLenum = GLenum(0x00010000)
  GL_LIST_BIT*: GLenum = GLenum(0x00020000)
  GL_TEXTURE_BIT*: GLenum = GLenum(0x00040000)
  GL_SCISSOR_BIT*: GLenum = GLenum(0x00080000)
  GL_ALL_ATTRIB_BITS*: GLenum = GLenum(0xFFFFFFFF)
  GL_QUAD_STRIP*: GLenum = GLenum(0x0008)
  GL_POLYGON*: GLenum = GLenum(0x0009)
  GL_ACCUM*: GLenum = GLenum(0x0100)
  GL_LOAD*: GLenum = GLenum(0x0101)
  GL_RETURN*: GLenum = GLenum(0x0102)
  GL_MULT*: GLenum = GLenum(0x0103)
  GL_ADD*: GLenum = GLenum(0x0104)
  GL_AUX0*: GLenum = GLenum(0x0409)
  GL_AUX1*: GLenum = GLenum(0x040A)
  GL_AUX2*: GLenum = GLenum(0x040B)
  GL_AUX3*: GLenum = GLenum(0x040C)
  GL_2D*: GLenum = GLenum(0x0600)
  GL_3D*: GLenum = GLenum(0x0601)
  GL_3D_COLOR*: GLenum = GLenum(0x0602)
  GL_3D_COLOR_TEXTURE*: GLenum = GLenum(0x0603)
  GL_4D_COLOR_TEXTURE*: GLenum = GLenum(0x0604)
  GL_PASS_THROUGH_TOKEN*: GLenum = GLenum(0x0700)
  GL_POINT_TOKEN*: GLenum = GLenum(0x0701)
  GL_LINE_TOKEN*: GLenum = GLenum(0x0702)
  GL_POLYGON_TOKEN*: GLenum = GLenum(0x0703)
  GL_BITMAP_TOKEN*: GLenum = GLenum(0x0704)
  GL_DRAW_PIXEL_TOKEN*: GLenum = GLenum(0x0705)
  GL_COPY_PIXEL_TOKEN*: GLenum = GLenum(0x0706)
  GL_LINE_RESET_TOKEN*: GLenum = GLenum(0x0707)
  GL_EXP*: GLenum = GLenum(0x0800)
  GL_EXP2*: GLenum = GLenum(0x0801)
  GL_COEFF*: GLenum = GLenum(0x0A00)
  GL_ORDER*: GLenum = GLenum(0x0A01)
  GL_DOMAIN*: GLenum = GLenum(0x0A02)
  GL_PIXEL_MAP_I_TO_I*: GLenum = GLenum(0x0C70)
  GL_PIXEL_MAP_S_TO_S*: GLenum = GLenum(0x0C71)
  GL_PIXEL_MAP_I_TO_R*: GLenum = GLenum(0x0C72)
  GL_PIXEL_MAP_I_TO_G*: GLenum = GLenum(0x0C73)
  GL_PIXEL_MAP_I_TO_B*: GLenum = GLenum(0x0C74)
  GL_PIXEL_MAP_I_TO_A*: GLenum = GLenum(0x0C75)
  GL_PIXEL_MAP_R_TO_R*: GLenum = GLenum(0x0C76)
  GL_PIXEL_MAP_G_TO_G*: GLenum = GLenum(0x0C77)
  GL_PIXEL_MAP_B_TO_B*: GLenum = GLenum(0x0C78)
  GL_PIXEL_MAP_A_TO_A*: GLenum = GLenum(0x0C79)
  GL_CURRENT_COLOR*: GLenum = GLenum(0x0B00)
  GL_CURRENT_INDEX*: GLenum = GLenum(0x0B01)
  GL_CURRENT_NORMAL*: GLenum = GLenum(0x0B02)
  GL_CURRENT_TEXTURE_COORDS*: GLenum = GLenum(0x0B03)
  GL_CURRENT_RASTER_COLOR*: GLenum = GLenum(0x0B04)
  GL_CURRENT_RASTER_INDEX*: GLenum = GLenum(0x0B05)
  GL_CURRENT_RASTER_TEXTURE_COORDS*: GLenum = GLenum(0x0B06)
  GL_CURRENT_RASTER_POSITION*: GLenum = GLenum(0x0B07)
  GL_CURRENT_RASTER_POSITION_VALID*: GLenum = GLenum(0x0B08)
  GL_CURRENT_RASTER_DISTANCE*: GLenum = GLenum(0x0B09)
  GL_POINT_SMOOTH*: GLenum = GLenum(0x0B10)
  GL_LINE_STIPPLE*: GLenum = GLenum(0x0B24)
  GL_LINE_STIPPLE_PATTERN*: GLenum = GLenum(0x0B25)
  GL_LINE_STIPPLE_REPEAT*: GLenum = GLenum(0x0B26)
  GL_LIST_MODE*: GLenum = GLenum(0x0B30)
  GL_MAX_LIST_NESTING*: GLenum = GLenum(0x0B31)
  GL_LIST_BASE*: GLenum = GLenum(0x0B32)
  GL_LIST_INDEX*: GLenum = GLenum(0x0B33)
  GL_POLYGON_STIPPLE*: GLenum = GLenum(0x0B42)
  GL_EDGE_FLAG*: GLenum = GLenum(0x0B43)
  GL_LIGHTING*: GLenum = GLenum(0x0B50)
  GL_LIGHT_MODEL_LOCAL_VIEWER*: GLenum = GLenum(0x0B51)
  GL_LIGHT_MODEL_TWO_SIDE*: GLenum = GLenum(0x0B52)
  GL_LIGHT_MODEL_AMBIENT*: GLenum = GLenum(0x0B53)
  GL_SHADE_MODEL*: GLenum = GLenum(0x0B54)
  GL_COLOR_MATERIAL_FACE*: GLenum = GLenum(0x0B55)
  GL_COLOR_MATERIAL_PARAMETER*: GLenum = GLenum(0x0B56)
  GL_COLOR_MATERIAL*: GLenum = GLenum(0x0B57)
  GL_FOG*: GLenum = GLenum(0x0B60)
  GL_FOG_INDEX*: GLenum = GLenum(0x0B61)
  GL_FOG_DENSITY*: GLenum = GLenum(0x0B62)
  GL_FOG_START*: GLenum = GLenum(0x0B63)
  GL_FOG_END*: GLenum = GLenum(0x0B64)
  GL_FOG_MODE*: GLenum = GLenum(0x0B65)
  GL_FOG_COLOR*: GLenum = GLenum(0x0B66)
  GL_ACCUM_CLEAR_VALUE*: GLenum = GLenum(0x0B80)
  GL_MATRIX_MODE*: GLenum = GLenum(0x0BA0)
  GL_NORMALIZE*: GLenum = GLenum(0x0BA1)
  GL_MODELVIEW_STACK_DEPTH*: GLenum = GLenum(0x0BA3)
  GL_PROJECTION_STACK_DEPTH*: GLenum = GLenum(0x0BA4)
  GL_TEXTURE_STACK_DEPTH*: GLenum = GLenum(0x0BA5)
  GL_MODELVIEW_MATRIX*: GLenum = GLenum(0x0BA6)
  GL_PROJECTION_MATRIX*: GLenum = GLenum(0x0BA7)
  GL_TEXTURE_MATRIX*: GLenum = GLenum(0x0BA8)
  GL_ATTRIB_STACK_DEPTH*: GLenum = GLenum(0x0BB0)
  GL_ALPHA_TEST*: GLenum = GLenum(0x0BC0)
  GL_ALPHA_TEST_FUNC*: GLenum = GLenum(0x0BC1)
  GL_ALPHA_TEST_REF*: GLenum = GLenum(0x0BC2)
  GL_LOGIC_OP*: GLenum = GLenum(0x0BF1)
  GL_AUX_BUFFERS*: GLenum = GLenum(0x0C00)
  GL_INDEX_CLEAR_VALUE*: GLenum = GLenum(0x0C20)
  GL_INDEX_WRITEMASK*: GLenum = GLenum(0x0C21)
  GL_INDEX_MODE*: GLenum = GLenum(0x0C30)
  GL_RGBA_MODE*: GLenum = GLenum(0x0C31)
  GL_RENDER_MODE*: GLenum = GLenum(0x0C40)
  GL_PERSPECTIVE_CORRECTION_HINT*: GLenum = GLenum(0x0C50)
  GL_POINT_SMOOTH_HINT*: GLenum = GLenum(0x0C51)
  GL_FOG_HINT*: GLenum = GLenum(0x0C54)
  GL_TEXTURE_GEN_S*: GLenum = GLenum(0x0C60)
  GL_TEXTURE_GEN_T*: GLenum = GLenum(0x0C61)
  GL_TEXTURE_GEN_R*: GLenum = GLenum(0x0C62)
  GL_TEXTURE_GEN_Q*: GLenum = GLenum(0x0C63)
  GL_PIXEL_MAP_I_TO_I_SIZE*: GLenum = GLenum(0x0CB0)
  GL_PIXEL_MAP_S_TO_S_SIZE*: GLenum = GLenum(0x0CB1)
  GL_PIXEL_MAP_I_TO_R_SIZE*: GLenum = GLenum(0x0CB2)
  GL_PIXEL_MAP_I_TO_G_SIZE*: GLenum = GLenum(0x0CB3)
  GL_PIXEL_MAP_I_TO_B_SIZE*: GLenum = GLenum(0x0CB4)
  GL_PIXEL_MAP_I_TO_A_SIZE*: GLenum = GLenum(0x0CB5)
  GL_PIXEL_MAP_R_TO_R_SIZE*: GLenum = GLenum(0x0CB6)
  GL_PIXEL_MAP_G_TO_G_SIZE*: GLenum = GLenum(0x0CB7)
  GL_PIXEL_MAP_B_TO_B_SIZE*: GLenum = GLenum(0x0CB8)
  GL_PIXEL_MAP_A_TO_A_SIZE*: GLenum = GLenum(0x0CB9)
  GL_MAP_COLOR*: GLenum = GLenum(0x0D10)
  GL_MAP_STENCIL*: GLenum = GLenum(0x0D11)
  GL_INDEX_SHIFT*: GLenum = GLenum(0x0D12)
  GL_INDEX_OFFSET*: GLenum = GLenum(0x0D13)
  GL_RED_SCALE*: GLenum = GLenum(0x0D14)
  GL_RED_BIAS*: GLenum = GLenum(0x0D15)
  GL_ZOOM_X*: GLenum = GLenum(0x0D16)
  GL_ZOOM_Y*: GLenum = GLenum(0x0D17)
  GL_GREEN_SCALE*: GLenum = GLenum(0x0D18)
  GL_GREEN_BIAS*: GLenum = GLenum(0x0D19)
  GL_BLUE_SCALE*: GLenum = GLenum(0x0D1A)
  GL_BLUE_BIAS*: GLenum = GLenum(0x0D1B)
  GL_ALPHA_SCALE*: GLenum = GLenum(0x0D1C)
  GL_ALPHA_BIAS*: GLenum = GLenum(0x0D1D)
  GL_DEPTH_SCALE*: GLenum = GLenum(0x0D1E)
  GL_DEPTH_BIAS*: GLenum = GLenum(0x0D1F)
  GL_MAX_EVAL_ORDER*: GLenum = GLenum(0x0D30)
  GL_MAX_LIGHTS*: GLenum = GLenum(0x0D31)
  GL_MAX_CLIP_PLANES*: GLenum = GLenum(0x0D32)
  GL_MAX_PIXEL_MAP_TABLE*: GLenum = GLenum(0x0D34)
  GL_MAX_ATTRIB_STACK_DEPTH*: GLenum = GLenum(0x0D35)
  GL_MAX_MODELVIEW_STACK_DEPTH*: GLenum = GLenum(0x0D36)
  GL_MAX_NAME_STACK_DEPTH*: GLenum = GLenum(0x0D37)
  GL_MAX_PROJECTION_STACK_DEPTH*: GLenum = GLenum(0x0D38)
  GL_MAX_TEXTURE_STACK_DEPTH*: GLenum = GLenum(0x0D39)
  GL_INDEX_BITS*: GLenum = GLenum(0x0D51)
  GL_RED_BITS*: GLenum = GLenum(0x0D52)
  GL_GREEN_BITS*: GLenum = GLenum(0x0D53)
  GL_BLUE_BITS*: GLenum = GLenum(0x0D54)
  GL_ALPHA_BITS*: GLenum = GLenum(0x0D55)
  GL_DEPTH_BITS*: GLenum = GLenum(0x0D56)
  GL_STENCIL_BITS*: GLenum = GLenum(0x0D57)
  GL_ACCUM_RED_BITS*: GLenum = GLenum(0x0D58)
  GL_ACCUM_GREEN_BITS*: GLenum = GLenum(0x0D59)
  GL_ACCUM_BLUE_BITS*: GLenum = GLenum(0x0D5A)
  GL_ACCUM_ALPHA_BITS*: GLenum = GLenum(0x0D5B)
  GL_NAME_STACK_DEPTH*: GLenum = GLenum(0x0D70)
  GL_AUTO_NORMAL*: GLenum = GLenum(0x0D80)
  GL_MAP1_COLOR_4*: GLenum = GLenum(0x0D90)
  GL_MAP1_INDEX*: GLenum = GLenum(0x0D91)
  GL_MAP1_NORMAL*: GLenum = GLenum(0x0D92)
  GL_MAP1_TEXTURE_COORD_1*: GLenum = GLenum(0x0D93)
  GL_MAP1_TEXTURE_COORD_2*: GLenum = GLenum(0x0D94)
  GL_MAP1_TEXTURE_COORD_3*: GLenum = GLenum(0x0D95)
  GL_MAP1_TEXTURE_COORD_4*: GLenum = GLenum(0x0D96)
  GL_MAP1_VERTEX_3*: GLenum = GLenum(0x0D97)
  GL_MAP1_VERTEX_4*: GLenum = GLenum(0x0D98)
  GL_MAP2_COLOR_4*: GLenum = GLenum(0x0DB0)
  GL_MAP2_INDEX*: GLenum = GLenum(0x0DB1)
  GL_MAP2_NORMAL*: GLenum = GLenum(0x0DB2)
  GL_MAP2_TEXTURE_COORD_1*: GLenum = GLenum(0x0DB3)
  GL_MAP2_TEXTURE_COORD_2*: GLenum = GLenum(0x0DB4)
  GL_MAP2_TEXTURE_COORD_3*: GLenum = GLenum(0x0DB5)
  GL_MAP2_TEXTURE_COORD_4*: GLenum = GLenum(0x0DB6)
  GL_MAP2_VERTEX_3*: GLenum = GLenum(0x0DB7)
  GL_MAP2_VERTEX_4*: GLenum = GLenum(0x0DB8)
  GL_MAP1_GRID_DOMAIN*: GLenum = GLenum(0x0DD0)
  GL_MAP1_GRID_SEGMENTS*: GLenum = GLenum(0x0DD1)
  GL_MAP2_GRID_DOMAIN*: GLenum = GLenum(0x0DD2)
  GL_MAP2_GRID_SEGMENTS*: GLenum = GLenum(0x0DD3)
  GL_TEXTURE_COMPONENTS*: GLenum = GLenum(0x1003)
  GL_TEXTURE_BORDER*: GLenum = GLenum(0x1005)
  GL_AMBIENT*: GLenum = GLenum(0x1200)
  GL_DIFFUSE*: GLenum = GLenum(0x1201)
  GL_SPECULAR*: GLenum = GLenum(0x1202)
  GL_POSITION*: GLenum = GLenum(0x1203)
  GL_SPOT_DIRECTION*: GLenum = GLenum(0x1204)
  GL_SPOT_EXPONENT*: GLenum = GLenum(0x1205)
  GL_SPOT_CUTOFF*: GLenum = GLenum(0x1206)
  GL_CONSTANT_ATTENUATION*: GLenum = GLenum(0x1207)
  GL_LINEAR_ATTENUATION*: GLenum = GLenum(0x1208)
  GL_QUADRATIC_ATTENUATION*: GLenum = GLenum(0x1209)
  GL_COMPILE*: GLenum = GLenum(0x1300)
  GL_COMPILE_AND_EXECUTE*: GLenum = GLenum(0x1301)
  GL_2_BYTES*: GLenum = GLenum(0x1407)
  GL_3_BYTES*: GLenum = GLenum(0x1408)
  GL_4_BYTES*: GLenum = GLenum(0x1409)
  GL_EMISSION*: GLenum = GLenum(0x1600)
  GL_SHININESS*: GLenum = GLenum(0x1601)
  GL_AMBIENT_AND_DIFFUSE*: GLenum = GLenum(0x1602)
  GL_COLOR_INDEXES*: GLenum = GLenum(0x1603)
  GL_MODELVIEW*: GLenum = GLenum(0x1700)
  GL_PROJECTION*: GLenum = GLenum(0x1701)
  GL_COLOR_INDEX*: GLenum = GLenum(0x1900)
  GL_LUMINANCE*: GLenum = GLenum(0x1909)
  GL_LUMINANCE_ALPHA*: GLenum = GLenum(0x190A)
  GL_BITMAP*: GLenum = GLenum(0x1A00)
  GL_RENDER*: GLenum = GLenum(0x1C00)
  GL_FEEDBACK*: GLenum = GLenum(0x1C01)
  GL_SELECT*: GLenum = GLenum(0x1C02)
  GL_FLAT*: GLenum = GLenum(0x1D00)
  GL_SMOOTH*: GLenum = GLenum(0x1D01)
  GL_S*: GLenum = GLenum(0x2000)
  GL_T*: GLenum = GLenum(0x2001)
  GL_R*: GLenum = GLenum(0x2002)
  GL_Q*: GLenum = GLenum(0x2003)
  GL_MODULATE*: GLenum = GLenum(0x2100)
  GL_DECAL*: GLenum = GLenum(0x2101)
  GL_TEXTURE_ENV_MODE*: GLenum = GLenum(0x2200)
  GL_TEXTURE_ENV_COLOR*: GLenum = GLenum(0x2201)
  GL_TEXTURE_ENV*: GLenum = GLenum(0x2300)
  GL_EYE_LINEAR*: GLenum = GLenum(0x2400)
  GL_OBJECT_LINEAR*: GLenum = GLenum(0x2401)
  GL_SPHERE_MAP*: GLenum = GLenum(0x2402)
  GL_TEXTURE_GEN_MODE*: GLenum = GLenum(0x2500)
  GL_OBJECT_PLANE*: GLenum = GLenum(0x2501)
  GL_EYE_PLANE*: GLenum = GLenum(0x2502)
  GL_CLAMP*: GLenum = GLenum(0x2900)
  GL_CLIP_PLANE0*: GLenum = GLenum(0x3000)
  GL_CLIP_PLANE1*: GLenum = GLenum(0x3001)
  GL_CLIP_PLANE2*: GLenum = GLenum(0x3002)
  GL_CLIP_PLANE3*: GLenum = GLenum(0x3003)
  GL_CLIP_PLANE4*: GLenum = GLenum(0x3004)
  GL_CLIP_PLANE5*: GLenum = GLenum(0x3005)
  GL_LIGHT0*: GLenum = GLenum(0x4000)
  GL_LIGHT1*: GLenum = GLenum(0x4001)
  GL_LIGHT2*: GLenum = GLenum(0x4002)
  GL_LIGHT3*: GLenum = GLenum(0x4003)
  GL_LIGHT4*: GLenum = GLenum(0x4004)
  GL_LIGHT5*: GLenum = GLenum(0x4005)
  GL_LIGHT6*: GLenum = GLenum(0x4006)
  GL_LIGHT7*: GLenum = GLenum(0x4007)
  GL_COLOR_LOGIC_OP*: GLenum = GLenum(0x0BF2)
  GL_POLYGON_OFFSET_UNITS*: GLenum = GLenum(0x2A00)
  GL_POLYGON_OFFSET_POINT*: GLenum = GLenum(0x2A01)
  GL_POLYGON_OFFSET_LINE*: GLenum = GLenum(0x2A02)
  GL_POLYGON_OFFSET_FILL*: GLenum = GLenum(0x8037)
  GL_POLYGON_OFFSET_FACTOR*: GLenum = GLenum(0x8038)
  GL_TEXTURE_BINDING_1D*: GLenum = GLenum(0x8068)
  GL_TEXTURE_BINDING_2D*: GLenum = GLenum(0x8069)
  GL_TEXTURE_INTERNAL_FORMAT*: GLenum = GLenum(0x1003)
  GL_TEXTURE_RED_SIZE*: GLenum = GLenum(0x805C)
  GL_TEXTURE_GREEN_SIZE*: GLenum = GLenum(0x805D)
  GL_TEXTURE_BLUE_SIZE*: GLenum = GLenum(0x805E)
  GL_TEXTURE_ALPHA_SIZE*: GLenum = GLenum(0x805F)
  cGL_DOUBLE*: GLenum = GLenum(0x140A)
  GL_PROXY_TEXTURE_1D*: GLenum = GLenum(0x8063)
  GL_PROXY_TEXTURE_2D*: GLenum = GLenum(0x8064)
  GL_R3_G3_B2*: GLenum = GLenum(0x2A10)
  GL_RGB4*: GLenum = GLenum(0x804F)
  GL_RGB5*: GLenum = GLenum(0x8050)
  GL_RGB8*: GLenum = GLenum(0x8051)
  GL_RGB10*: GLenum = GLenum(0x8052)
  GL_RGB12*: GLenum = GLenum(0x8053)
  GL_RGB16*: GLenum = GLenum(0x8054)
  GL_RGBA2*: GLenum = GLenum(0x8055)
  GL_RGBA4*: GLenum = GLenum(0x8056)
  GL_RGB5_A1*: GLenum = GLenum(0x8057)
  GL_RGBA8*: GLenum = GLenum(0x8058)
  GL_RGB10_A2*: GLenum = GLenum(0x8059)
  GL_RGBA12*: GLenum = GLenum(0x805A)
  GL_RGBA16*: GLenum = GLenum(0x805B)
  GL_CLIENT_PIXEL_STORE_BIT*: GLenum = GLenum(0x00000001)
  GL_CLIENT_VERTEX_ARRAY_BIT*: GLenum = GLenum(0x00000002)
  GL_CLIENT_ALL_ATTRIB_BITS*: GLenum = GLenum(0xFFFFFFFF)
  GL_VERTEX_ARRAY_POINTER*: GLenum = GLenum(0x808E)
  GL_NORMAL_ARRAY_POINTER*: GLenum = GLenum(0x808F)
  GL_COLOR_ARRAY_POINTER*: GLenum = GLenum(0x8090)
  GL_INDEX_ARRAY_POINTER*: GLenum = GLenum(0x8091)
  GL_TEXTURE_COORD_ARRAY_POINTER*: GLenum = GLenum(0x8092)
  GL_EDGE_FLAG_ARRAY_POINTER*: GLenum = GLenum(0x8093)
  GL_FEEDBACK_BUFFER_POINTER*: GLenum = GLenum(0x0DF0)
  GL_SELECTION_BUFFER_POINTER*: GLenum = GLenum(0x0DF3)
  GL_CLIENT_ATTRIB_STACK_DEPTH*: GLenum = GLenum(0x0BB1)
  GL_INDEX_LOGIC_OP*: GLenum = GLenum(0x0BF1)
  GL_MAX_CLIENT_ATTRIB_STACK_DEPTH*: GLenum = GLenum(0x0D3B)
  GL_FEEDBACK_BUFFER_SIZE*: GLenum = GLenum(0x0DF1)
  GL_FEEDBACK_BUFFER_TYPE*: GLenum = GLenum(0x0DF2)
  GL_SELECTION_BUFFER_SIZE*: GLenum = GLenum(0x0DF4)
  GL_VERTEX_ARRAY*: GLenum = GLenum(0x8074)
  GL_NORMAL_ARRAY*: GLenum = GLenum(0x8075)
  GL_COLOR_ARRAY*: GLenum = GLenum(0x8076)
  GL_INDEX_ARRAY*: GLenum = GLenum(0x8077)
  GL_TEXTURE_COORD_ARRAY*: GLenum = GLenum(0x8078)
  GL_EDGE_FLAG_ARRAY*: GLenum = GLenum(0x8079)
  GL_VERTEX_ARRAY_SIZE*: GLenum = GLenum(0x807A)
  GL_VERTEX_ARRAY_TYPE*: GLenum = GLenum(0x807B)
  GL_VERTEX_ARRAY_STRIDE*: GLenum = GLenum(0x807C)
  GL_NORMAL_ARRAY_TYPE*: GLenum = GLenum(0x807E)
  GL_NORMAL_ARRAY_STRIDE*: GLenum = GLenum(0x807F)
  GL_COLOR_ARRAY_SIZE*: GLenum = GLenum(0x8081)
  GL_COLOR_ARRAY_TYPE*: GLenum = GLenum(0x8082)
  GL_COLOR_ARRAY_STRIDE*: GLenum = GLenum(0x8083)
  GL_INDEX_ARRAY_TYPE*: GLenum = GLenum(0x8085)
  GL_INDEX_ARRAY_STRIDE*: GLenum = GLenum(0x8086)
  GL_TEXTURE_COORD_ARRAY_SIZE*: GLenum = GLenum(0x8088)
  GL_TEXTURE_COORD_ARRAY_TYPE*: GLenum = GLenum(0x8089)
  GL_TEXTURE_COORD_ARRAY_STRIDE*: GLenum = GLenum(0x808A)
  GL_EDGE_FLAG_ARRAY_STRIDE*: GLenum = GLenum(0x808C)
  GL_TEXTURE_LUMINANCE_SIZE*: GLenum = GLenum(0x8060)
  GL_TEXTURE_INTENSITY_SIZE*: GLenum = GLenum(0x8061)
  GL_TEXTURE_PRIORITY*: GLenum = GLenum(0x8066)
  GL_TEXTURE_RESIDENT*: GLenum = GLenum(0x8067)
  GL_ALPHA4*: GLenum = GLenum(0x803B)
  GL_ALPHA8*: GLenum = GLenum(0x803C)
  GL_ALPHA12*: GLenum = GLenum(0x803D)
  GL_ALPHA16*: GLenum = GLenum(0x803E)
  GL_LUMINANCE4*: GLenum = GLenum(0x803F)
  GL_LUMINANCE8*: GLenum = GLenum(0x8040)
  GL_LUMINANCE12*: GLenum = GLenum(0x8041)
  GL_LUMINANCE16*: GLenum = GLenum(0x8042)
  GL_LUMINANCE4_ALPHA4*: GLenum = GLenum(0x8043)
  GL_LUMINANCE6_ALPHA2*: GLenum = GLenum(0x8044)
  GL_LUMINANCE8_ALPHA8*: GLenum = GLenum(0x8045)
  GL_LUMINANCE12_ALPHA4*: GLenum = GLenum(0x8046)
  GL_LUMINANCE12_ALPHA12*: GLenum = GLenum(0x8047)
  GL_LUMINANCE16_ALPHA16*: GLenum = GLenum(0x8048)
  GL_INTENSITY*: GLenum = GLenum(0x8049)
  GL_INTENSITY4*: GLenum = GLenum(0x804A)
  GL_INTENSITY8*: GLenum = GLenum(0x804B)
  GL_INTENSITY12*: GLenum = GLenum(0x804C)
  GL_INTENSITY16*: GLenum = GLenum(0x804D)
  GL_V2F*: GLenum = GLenum(0x2A20)
  GL_V3F*: GLenum = GLenum(0x2A21)
  GL_C4UB_V2F*: GLenum = GLenum(0x2A22)
  GL_C4UB_V3F*: GLenum = GLenum(0x2A23)
  GL_C3F_V3F*: GLenum = GLenum(0x2A24)
  GL_N3F_V3F*: GLenum = GLenum(0x2A25)
  GL_C4F_N3F_V3F*: GLenum = GLenum(0x2A26)
  GL_T2F_V3F*: GLenum = GLenum(0x2A27)
  GL_T4F_V4F*: GLenum = GLenum(0x2A28)
  GL_T2F_C4UB_V3F*: GLenum = GLenum(0x2A29)
  GL_T2F_C3F_V3F*: GLenum = GLenum(0x2A2A)
  GL_T2F_N3F_V3F*: GLenum = GLenum(0x2A2B)
  GL_T2F_C4F_N3F_V3F*: GLenum = GLenum(0x2A2C)
  GL_T4F_C4F_N3F_V4F*: GLenum = GLenum(0x2A2D)
  GL_UNSIGNED_BYTE_3_3_2*: GLenum = GLenum(0x8032)
  GL_UNSIGNED_SHORT_4_4_4_4*: GLenum = GLenum(0x8033)
  GL_UNSIGNED_SHORT_5_5_5_1*: GLenum = GLenum(0x8034)
  GL_UNSIGNED_INT_8_8_8_8*: GLenum = GLenum(0x8035)
  GL_UNSIGNED_INT_10_10_10_2*: GLenum = GLenum(0x8036)
  GL_TEXTURE_BINDING_3D*: GLenum = GLenum(0x806A)
  GL_PACK_SKIP_IMAGES*: GLenum = GLenum(0x806B)
  GL_PACK_IMAGE_HEIGHT*: GLenum = GLenum(0x806C)
  GL_UNPACK_SKIP_IMAGES*: GLenum = GLenum(0x806D)
  GL_UNPACK_IMAGE_HEIGHT*: GLenum = GLenum(0x806E)
  GL_TEXTURE_3D*: GLenum = GLenum(0x806F)
  GL_PROXY_TEXTURE_3D*: GLenum = GLenum(0x8070)
  GL_TEXTURE_DEPTH*: GLenum = GLenum(0x8071)
  GL_TEXTURE_WRAP_R*: GLenum = GLenum(0x8072)
  GL_MAX_3D_TEXTURE_SIZE*: GLenum = GLenum(0x8073)
  GL_UNSIGNED_BYTE_2_3_3_REV*: GLenum = GLenum(0x8362)
  GL_UNSIGNED_SHORT_5_6_5*: GLenum = GLenum(0x8363)
  GL_UNSIGNED_SHORT_5_6_5_REV*: GLenum = GLenum(0x8364)
  GL_UNSIGNED_SHORT_4_4_4_4_REV*: GLenum = GLenum(0x8365)
  GL_UNSIGNED_SHORT_1_5_5_5_REV*: GLenum = GLenum(0x8366)
  GL_UNSIGNED_INT_8_8_8_8_REV*: GLenum = GLenum(0x8367)
  GL_UNSIGNED_INT_2_10_10_10_REV*: GLenum = GLenum(0x8368)
  GL_BGR*: GLenum = GLenum(0x80E0)
  GL_BGRA*: GLenum = GLenum(0x80E1)
  GL_MAX_ELEMENTS_VERTICES*: GLenum = GLenum(0x80E8)
  GL_MAX_ELEMENTS_INDICES*: GLenum = GLenum(0x80E9)
  GL_CLAMP_TO_EDGE*: GLenum = GLenum(0x812F)
  GL_TEXTURE_MIN_LOD*: GLenum = GLenum(0x813A)
  GL_TEXTURE_MAX_LOD*: GLenum = GLenum(0x813B)
  GL_TEXTURE_BASE_LEVEL*: GLenum = GLenum(0x813C)
  GL_TEXTURE_MAX_LEVEL*: GLenum = GLenum(0x813D)
  GL_SMOOTH_POINT_SIZE_RANGE*: GLenum = GLenum(0x0B12)
  GL_SMOOTH_POINT_SIZE_GRANULARITY*: GLenum = GLenum(0x0B13)
  GL_SMOOTH_LINE_WIDTH_RANGE*: GLenum = GLenum(0x0B22)
  GL_SMOOTH_LINE_WIDTH_GRANULARITY*: GLenum = GLenum(0x0B23)
  GL_ALIASED_LINE_WIDTH_RANGE*: GLenum = GLenum(0x846E)
  GL_RESCALE_NORMAL*: GLenum = GLenum(0x803A)
  GL_LIGHT_MODEL_COLOR_CONTROL*: GLenum = GLenum(0x81F8)
  GL_SINGLE_COLOR*: GLenum = GLenum(0x81F9)
  GL_SEPARATE_SPECULAR_COLOR*: GLenum = GLenum(0x81FA)
  GL_ALIASED_POINT_SIZE_RANGE*: GLenum = GLenum(0x846D)
  GL_TEXTURE0*: GLenum = GLenum(0x84C0)
  GL_TEXTURE1*: GLenum = GLenum(0x84C1)
  GL_TEXTURE2*: GLenum = GLenum(0x84C2)
  GL_TEXTURE3*: GLenum = GLenum(0x84C3)
  GL_TEXTURE4*: GLenum = GLenum(0x84C4)
  GL_TEXTURE5*: GLenum = GLenum(0x84C5)
  GL_TEXTURE6*: GLenum = GLenum(0x84C6)
  GL_TEXTURE7*: GLenum = GLenum(0x84C7)
  GL_TEXTURE8*: GLenum = GLenum(0x84C8)
  GL_TEXTURE9*: GLenum = GLenum(0x84C9)
  GL_TEXTURE10*: GLenum = GLenum(0x84CA)
  GL_TEXTURE11*: GLenum = GLenum(0x84CB)
  GL_TEXTURE12*: GLenum = GLenum(0x84CC)
  GL_TEXTURE13*: GLenum = GLenum(0x84CD)
  GL_TEXTURE14*: GLenum = GLenum(0x84CE)
  GL_TEXTURE15*: GLenum = GLenum(0x84CF)
  GL_TEXTURE16*: GLenum = GLenum(0x84D0)
  GL_TEXTURE17*: GLenum = GLenum(0x84D1)
  GL_TEXTURE18*: GLenum = GLenum(0x84D2)
  GL_TEXTURE19*: GLenum = GLenum(0x84D3)
  GL_TEXTURE20*: GLenum = GLenum(0x84D4)
  GL_TEXTURE21*: GLenum = GLenum(0x84D5)
  GL_TEXTURE22*: GLenum = GLenum(0x84D6)
  GL_TEXTURE23*: GLenum = GLenum(0x84D7)
  GL_TEXTURE24*: GLenum = GLenum(0x84D8)
  GL_TEXTURE25*: GLenum = GLenum(0x84D9)
  GL_TEXTURE26*: GLenum = GLenum(0x84DA)
  GL_TEXTURE27*: GLenum = GLenum(0x84DB)
  GL_TEXTURE28*: GLenum = GLenum(0x84DC)
  GL_TEXTURE29*: GLenum = GLenum(0x84DD)
  GL_TEXTURE30*: GLenum = GLenum(0x84DE)
  GL_TEXTURE31*: GLenum = GLenum(0x84DF)
  GL_ACTIVE_TEXTURE*: GLenum = GLenum(0x84E0)
  GL_MULTISAMPLE*: GLenum = GLenum(0x809D)
  GL_SAMPLE_ALPHA_TO_COVERAGE*: GLenum = GLenum(0x809E)
  GL_SAMPLE_ALPHA_TO_ONE*: GLenum = GLenum(0x809F)
  GL_SAMPLE_COVERAGE*: GLenum = GLenum(0x80A0)
  GL_SAMPLE_BUFFERS*: GLenum = GLenum(0x80A8)
  GL_SAMPLES*: GLenum = GLenum(0x80A9)
  GL_SAMPLE_COVERAGE_VALUE*: GLenum = GLenum(0x80AA)
  GL_SAMPLE_COVERAGE_INVERT*: GLenum = GLenum(0x80AB)
  GL_TEXTURE_CUBE_MAP*: GLenum = GLenum(0x8513)
  GL_TEXTURE_BINDING_CUBE_MAP*: GLenum = GLenum(0x8514)
  GL_TEXTURE_CUBE_MAP_POSITIVE_X*: GLenum = GLenum(0x8515)
  GL_TEXTURE_CUBE_MAP_NEGATIVE_X*: GLenum = GLenum(0x8516)
  GL_TEXTURE_CUBE_MAP_POSITIVE_Y*: GLenum = GLenum(0x8517)
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y*: GLenum = GLenum(0x8518)
  GL_TEXTURE_CUBE_MAP_POSITIVE_Z*: GLenum = GLenum(0x8519)
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z*: GLenum = GLenum(0x851A)
  GL_PROXY_TEXTURE_CUBE_MAP*: GLenum = GLenum(0x851B)
  GL_MAX_CUBE_MAP_TEXTURE_SIZE*: GLenum = GLenum(0x851C)
  GL_COMPRESSED_RGB*: GLenum = GLenum(0x84ED)
  GL_COMPRESSED_RGBA*: GLenum = GLenum(0x84EE)
  GL_TEXTURE_COMPRESSION_HINT*: GLenum = GLenum(0x84EF)
  GL_TEXTURE_COMPRESSED_IMAGE_SIZE*: GLenum = GLenum(0x86A0)
  GL_TEXTURE_COMPRESSED*: GLenum = GLenum(0x86A1)
  GL_NUM_COMPRESSED_TEXTURE_FORMATS*: GLenum = GLenum(0x86A2)
  GL_COMPRESSED_TEXTURE_FORMATS*: GLenum = GLenum(0x86A3)
  GL_CLAMP_TO_BORDER*: GLenum = GLenum(0x812D)
  GL_CLIENT_ACTIVE_TEXTURE*: GLenum = GLenum(0x84E1)
  GL_MAX_TEXTURE_UNITS*: GLenum = GLenum(0x84E2)
  GL_TRANSPOSE_MODELVIEW_MATRIX*: GLenum = GLenum(0x84E3)
  GL_TRANSPOSE_PROJECTION_MATRIX*: GLenum = GLenum(0x84E4)
  GL_TRANSPOSE_TEXTURE_MATRIX*: GLenum = GLenum(0x84E5)
  GL_TRANSPOSE_COLOR_MATRIX*: GLenum = GLenum(0x84E6)
  GL_MULTISAMPLE_BIT*: GLenum = GLenum(0x20000000)
  GL_NORMAL_MAP*: GLenum = GLenum(0x8511)
  GL_REFLECTION_MAP*: GLenum = GLenum(0x8512)
  GL_COMPRESSED_ALPHA*: GLenum = GLenum(0x84E9)
  GL_COMPRESSED_LUMINANCE*: GLenum = GLenum(0x84EA)
  GL_COMPRESSED_LUMINANCE_ALPHA*: GLenum = GLenum(0x84EB)
  GL_COMPRESSED_INTENSITY*: GLenum = GLenum(0x84EC)
  GL_COMBINE*: GLenum = GLenum(0x8570)
  GL_COMBINE_RGB*: GLenum = GLenum(0x8571)
  GL_COMBINE_ALPHA*: GLenum = GLenum(0x8572)
  GL_SOURCE0_RGB*: GLenum = GLenum(0x8580)
  GL_SOURCE1_RGB*: GLenum = GLenum(0x8581)
  GL_SOURCE2_RGB*: GLenum = GLenum(0x8582)
  GL_SOURCE0_ALPHA*: GLenum = GLenum(0x8588)
  GL_SOURCE1_ALPHA*: GLenum = GLenum(0x8589)
  GL_SOURCE2_ALPHA*: GLenum = GLenum(0x858A)
  GL_OPERAND0_RGB*: GLenum = GLenum(0x8590)
  GL_OPERAND1_RGB*: GLenum = GLenum(0x8591)
  GL_OPERAND2_RGB*: GLenum = GLenum(0x8592)
  GL_OPERAND0_ALPHA*: GLenum = GLenum(0x8598)
  GL_OPERAND1_ALPHA*: GLenum = GLenum(0x8599)
  GL_OPERAND2_ALPHA*: GLenum = GLenum(0x859A)
  GL_RGB_SCALE*: GLenum = GLenum(0x8573)
  GL_ADD_SIGNED*: GLenum = GLenum(0x8574)
  GL_INTERPOLATE*: GLenum = GLenum(0x8575)
  GL_SUBTRACT*: GLenum = GLenum(0x84E7)
  GL_CONSTANT*: GLenum = GLenum(0x8576)
  GL_PRIMARY_COLOR*: GLenum = GLenum(0x8577)
  GL_PREVIOUS*: GLenum = GLenum(0x8578)
  GL_DOT3_RGB*: GLenum = GLenum(0x86AE)
  GL_DOT3_RGBA*: GLenum = GLenum(0x86AF)
  GL_BLEND_DST_RGB*: GLenum = GLenum(0x80C8)
  GL_BLEND_SRC_RGB*: GLenum = GLenum(0x80C9)
  GL_BLEND_DST_ALPHA*: GLenum = GLenum(0x80CA)
  GL_BLEND_SRC_ALPHA*: GLenum = GLenum(0x80CB)
  GL_POINT_FADE_THRESHOLD_SIZE*: GLenum = GLenum(0x8128)
  GL_DEPTH_COMPONENT16*: GLenum = GLenum(0x81A5)
  GL_DEPTH_COMPONENT24*: GLenum = GLenum(0x81A6)
  GL_DEPTH_COMPONENT32*: GLenum = GLenum(0x81A7)
  GL_MIRRORED_REPEAT*: GLenum = GLenum(0x8370)
  GL_MAX_TEXTURE_LOD_BIAS*: GLenum = GLenum(0x84FD)
  GL_TEXTURE_LOD_BIAS*: GLenum = GLenum(0x8501)
  GL_INCR_WRAP*: GLenum = GLenum(0x8507)
  GL_DECR_WRAP*: GLenum = GLenum(0x8508)
  GL_TEXTURE_DEPTH_SIZE*: GLenum = GLenum(0x884A)
  GL_TEXTURE_COMPARE_MODE*: GLenum = GLenum(0x884C)
  GL_TEXTURE_COMPARE_FUNC*: GLenum = GLenum(0x884D)
  GL_POINT_SIZE_MIN*: GLenum = GLenum(0x8126)
  GL_POINT_SIZE_MAX*: GLenum = GLenum(0x8127)
  GL_POINT_DISTANCE_ATTENUATION*: GLenum = GLenum(0x8129)
  GL_GENERATE_MIPMAP*: GLenum = GLenum(0x8191)
  GL_GENERATE_MIPMAP_HINT*: GLenum = GLenum(0x8192)
  GL_FOG_COORDINATE_SOURCE*: GLenum = GLenum(0x8450)
  GL_FOG_COORDINATE*: GLenum = GLenum(0x8451)
  GL_FRAGMENT_DEPTH*: GLenum = GLenum(0x8452)
  GL_CURRENT_FOG_COORDINATE*: GLenum = GLenum(0x8453)
  GL_FOG_COORDINATE_ARRAY_TYPE*: GLenum = GLenum(0x8454)
  GL_FOG_COORDINATE_ARRAY_STRIDE*: GLenum = GLenum(0x8455)
  GL_FOG_COORDINATE_ARRAY_POINTER*: GLenum = GLenum(0x8456)
  GL_FOG_COORDINATE_ARRAY*: GLenum = GLenum(0x8457)
  GL_COLOR_SUM*: GLenum = GLenum(0x8458)
  GL_CURRENT_SECONDARY_COLOR*: GLenum = GLenum(0x8459)
  GL_SECONDARY_COLOR_ARRAY_SIZE*: GLenum = GLenum(0x845A)
  GL_SECONDARY_COLOR_ARRAY_TYPE*: GLenum = GLenum(0x845B)
  GL_SECONDARY_COLOR_ARRAY_STRIDE*: GLenum = GLenum(0x845C)
  GL_SECONDARY_COLOR_ARRAY_POINTER*: GLenum = GLenum(0x845D)
  GL_SECONDARY_COLOR_ARRAY*: GLenum = GLenum(0x845E)
  GL_TEXTURE_FILTER_CONTROL*: GLenum = GLenum(0x8500)
  GL_DEPTH_TEXTURE_MODE*: GLenum = GLenum(0x884B)
  GL_COMPARE_R_TO_TEXTURE*: GLenum = GLenum(0x884E)
  GL_BLEND_COLOR*: GLenum = GLenum(0x8005)
  GL_BLEND_EQUATION*: GLenum = GLenum(0x8009)
  GL_CONSTANT_COLOR*: GLenum = GLenum(0x8001)
  GL_ONE_MINUS_CONSTANT_COLOR*: GLenum = GLenum(0x8002)
  GL_CONSTANT_ALPHA*: GLenum = GLenum(0x8003)
  GL_ONE_MINUS_CONSTANT_ALPHA*: GLenum = GLenum(0x8004)
  GL_FUNC_ADD*: GLenum = GLenum(0x8006)
  GL_FUNC_REVERSE_SUBTRACT*: GLenum = GLenum(0x800B)
  GL_FUNC_SUBTRACT*: GLenum = GLenum(0x800A)
  GL_MIN*: GLenum = GLenum(0x8007)
  GL_MAX*: GLenum = GLenum(0x8008)
  GL_BUFFER_SIZE*: GLenum = GLenum(0x8764)
  GL_BUFFER_USAGE*: GLenum = GLenum(0x8765)
  GL_QUERY_COUNTER_BITS*: GLenum = GLenum(0x8864)
  GL_CURRENT_QUERY*: GLenum = GLenum(0x8865)
  GL_QUERY_RESULT*: GLenum = GLenum(0x8866)
  GL_QUERY_RESULT_AVAILABLE*: GLenum = GLenum(0x8867)
  GL_ARRAY_BUFFER*: GLenum = GLenum(0x8892)
  GL_ELEMENT_ARRAY_BUFFER*: GLenum = GLenum(0x8893)
  GL_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x8894)
  GL_ELEMENT_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x8895)
  GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x889F)
  GL_READ_ONLY*: GLenum = GLenum(0x88B8)
  GL_WRITE_ONLY*: GLenum = GLenum(0x88B9)
  GL_READ_WRITE*: GLenum = GLenum(0x88BA)
  GL_BUFFER_ACCESS*: GLenum = GLenum(0x88BB)
  GL_BUFFER_MAPPED*: GLenum = GLenum(0x88BC)
  GL_BUFFER_MAP_POINTER*: GLenum = GLenum(0x88BD)
  GL_STREAM_DRAW*: GLenum = GLenum(0x88E0)
  GL_STREAM_READ*: GLenum = GLenum(0x88E1)
  GL_STREAM_COPY*: GLenum = GLenum(0x88E2)
  GL_STATIC_DRAW*: GLenum = GLenum(0x88E4)
  GL_STATIC_READ*: GLenum = GLenum(0x88E5)
  GL_STATIC_COPY*: GLenum = GLenum(0x88E6)
  GL_DYNAMIC_DRAW*: GLenum = GLenum(0x88E8)
  GL_DYNAMIC_READ*: GLenum = GLenum(0x88E9)
  GL_DYNAMIC_COPY*: GLenum = GLenum(0x88EA)
  GL_SAMPLES_PASSED*: GLenum = GLenum(0x8914)
  GL_SRC1_ALPHA*: GLenum = GLenum(0x8589)
  GL_VERTEX_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x8896)
  GL_NORMAL_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x8897)
  GL_COLOR_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x8898)
  GL_INDEX_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x8899)
  GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x889A)
  GL_EDGE_FLAG_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x889B)
  GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x889C)
  GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x889D)
  GL_WEIGHT_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x889E)
  GL_FOG_COORD_SRC*: GLenum = GLenum(0x8450)
  GL_FOG_COORD*: GLenum = GLenum(0x8451)
  GL_CURRENT_FOG_COORD*: GLenum = GLenum(0x8453)
  GL_FOG_COORD_ARRAY_TYPE*: GLenum = GLenum(0x8454)
  GL_FOG_COORD_ARRAY_STRIDE*: GLenum = GLenum(0x8455)
  GL_FOG_COORD_ARRAY_POINTER*: GLenum = GLenum(0x8456)
  GL_FOG_COORD_ARRAY*: GLenum = GLenum(0x8457)
  GL_FOG_COORD_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x889D)
  GL_SRC0_RGB*: GLenum = GLenum(0x8580)
  GL_SRC1_RGB*: GLenum = GLenum(0x8581)
  GL_SRC2_RGB*: GLenum = GLenum(0x8582)
  GL_SRC0_ALPHA*: GLenum = GLenum(0x8588)
  GL_SRC2_ALPHA*: GLenum = GLenum(0x858A)
  GL_BLEND_EQUATION_RGB*: GLenum = GLenum(0x8009)
  GL_VERTEX_ATTRIB_ARRAY_ENABLED*: GLenum = GLenum(0x8622)
  GL_VERTEX_ATTRIB_ARRAY_SIZE*: GLenum = GLenum(0x8623)
  GL_VERTEX_ATTRIB_ARRAY_STRIDE*: GLenum = GLenum(0x8624)
  GL_VERTEX_ATTRIB_ARRAY_TYPE*: GLenum = GLenum(0x8625)
  GL_CURRENT_VERTEX_ATTRIB*: GLenum = GLenum(0x8626)
  GL_VERTEX_PROGRAM_POINT_SIZE*: GLenum = GLenum(0x8642)
  GL_VERTEX_ATTRIB_ARRAY_POINTER*: GLenum = GLenum(0x8645)
  GL_STENCIL_BACK_FUNC*: GLenum = GLenum(0x8800)
  GL_STENCIL_BACK_FAIL*: GLenum = GLenum(0x8801)
  GL_STENCIL_BACK_PASS_DEPTH_FAIL*: GLenum = GLenum(0x8802)
  GL_STENCIL_BACK_PASS_DEPTH_PASS*: GLenum = GLenum(0x8803)
  GL_MAX_DRAW_BUFFERS*: GLenum = GLenum(0x8824)
  GL_DRAW_BUFFER0*: GLenum = GLenum(0x8825)
  GL_DRAW_BUFFER1*: GLenum = GLenum(0x8826)
  GL_DRAW_BUFFER2*: GLenum = GLenum(0x8827)
  GL_DRAW_BUFFER3*: GLenum = GLenum(0x8828)
  GL_DRAW_BUFFER4*: GLenum = GLenum(0x8829)
  GL_DRAW_BUFFER5*: GLenum = GLenum(0x882A)
  GL_DRAW_BUFFER6*: GLenum = GLenum(0x882B)
  GL_DRAW_BUFFER7*: GLenum = GLenum(0x882C)
  GL_DRAW_BUFFER8*: GLenum = GLenum(0x882D)
  GL_DRAW_BUFFER9*: GLenum = GLenum(0x882E)
  GL_DRAW_BUFFER10*: GLenum = GLenum(0x882F)
  GL_DRAW_BUFFER11*: GLenum = GLenum(0x8830)
  GL_DRAW_BUFFER12*: GLenum = GLenum(0x8831)
  GL_DRAW_BUFFER13*: GLenum = GLenum(0x8832)
  GL_DRAW_BUFFER14*: GLenum = GLenum(0x8833)
  GL_DRAW_BUFFER15*: GLenum = GLenum(0x8834)
  GL_BLEND_EQUATION_ALPHA*: GLenum = GLenum(0x883D)
  GL_MAX_VERTEX_ATTRIBS*: GLenum = GLenum(0x8869)
  GL_VERTEX_ATTRIB_ARRAY_NORMALIZED*: GLenum = GLenum(0x886A)
  GL_MAX_TEXTURE_IMAGE_UNITS*: GLenum = GLenum(0x8872)
  GL_FRAGMENT_SHADER*: GLenum = GLenum(0x8B30)
  GL_VERTEX_SHADER*: GLenum = GLenum(0x8B31)
  GL_MAX_FRAGMENT_UNIFORM_COMPONENTS*: GLenum = GLenum(0x8B49)
  GL_MAX_VERTEX_UNIFORM_COMPONENTS*: GLenum = GLenum(0x8B4A)
  GL_MAX_VARYING_FLOATS*: GLenum = GLenum(0x8B4B)
  GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS*: GLenum = GLenum(0x8B4C)
  GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS*: GLenum = GLenum(0x8B4D)
  GL_SHADER_TYPE*: GLenum = GLenum(0x8B4F)
  GL_FLOAT_VEC2*: GLenum = GLenum(0x8B50)
  GL_FLOAT_VEC3*: GLenum = GLenum(0x8B51)
  GL_FLOAT_VEC4*: GLenum = GLenum(0x8B52)
  GL_INT_VEC2*: GLenum = GLenum(0x8B53)
  GL_INT_VEC3*: GLenum = GLenum(0x8B54)
  GL_INT_VEC4*: GLenum = GLenum(0x8B55)
  GL_BOOL*: GLenum = GLenum(0x8B56)
  GL_BOOL_VEC2*: GLenum = GLenum(0x8B57)
  GL_BOOL_VEC3*: GLenum = GLenum(0x8B58)
  GL_BOOL_VEC4*: GLenum = GLenum(0x8B59)
  GL_FLOAT_MAT2*: GLenum = GLenum(0x8B5A)
  GL_FLOAT_MAT3*: GLenum = GLenum(0x8B5B)
  GL_FLOAT_MAT4*: GLenum = GLenum(0x8B5C)
  GL_SAMPLER_1D*: GLenum = GLenum(0x8B5D)
  GL_SAMPLER_2D*: GLenum = GLenum(0x8B5E)
  GL_SAMPLER_3D*: GLenum = GLenum(0x8B5F)
  GL_SAMPLER_CUBE*: GLenum = GLenum(0x8B60)
  GL_SAMPLER_1D_SHADOW*: GLenum = GLenum(0x8B61)
  GL_SAMPLER_2D_SHADOW*: GLenum = GLenum(0x8B62)
  GL_DELETE_STATUS*: GLenum = GLenum(0x8B80)
  GL_COMPILE_STATUS*: GLenum = GLenum(0x8B81)
  GL_LINK_STATUS*: GLenum = GLenum(0x8B82)
  GL_VALIDATE_STATUS*: GLenum = GLenum(0x8B83)
  GL_INFO_LOG_LENGTH*: GLenum = GLenum(0x8B84)
  GL_ATTACHED_SHADERS*: GLenum = GLenum(0x8B85)
  GL_ACTIVE_UNIFORMS*: GLenum = GLenum(0x8B86)
  GL_ACTIVE_UNIFORM_MAX_LENGTH*: GLenum = GLenum(0x8B87)
  GL_SHADER_SOURCE_LENGTH*: GLenum = GLenum(0x8B88)
  GL_ACTIVE_ATTRIBUTES*: GLenum = GLenum(0x8B89)
  GL_ACTIVE_ATTRIBUTE_MAX_LENGTH*: GLenum = GLenum(0x8B8A)
  GL_FRAGMENT_SHADER_DERIVATIVE_HINT*: GLenum = GLenum(0x8B8B)
  GL_SHADING_LANGUAGE_VERSION*: GLenum = GLenum(0x8B8C)
  GL_CURRENT_PROGRAM*: GLenum = GLenum(0x8B8D)
  GL_POINT_SPRITE_COORD_ORIGIN*: GLenum = GLenum(0x8CA0)
  GL_LOWER_LEFT*: GLenum = GLenum(0x8CA1)
  GL_UPPER_LEFT*: GLenum = GLenum(0x8CA2)
  GL_STENCIL_BACK_REF*: GLenum = GLenum(0x8CA3)
  GL_STENCIL_BACK_VALUE_MASK*: GLenum = GLenum(0x8CA4)
  GL_STENCIL_BACK_WRITEMASK*: GLenum = GLenum(0x8CA5)
  GL_VERTEX_PROGRAM_TWO_SIDE*: GLenum = GLenum(0x8643)
  GL_POINT_SPRITE*: GLenum = GLenum(0x8861)
  GL_COORD_REPLACE*: GLenum = GLenum(0x8862)
  GL_MAX_TEXTURE_COORDS*: GLenum = GLenum(0x8871)
  GL_PIXEL_PACK_BUFFER*: GLenum = GLenum(0x88EB)
  GL_PIXEL_UNPACK_BUFFER*: GLenum = GLenum(0x88EC)
  GL_PIXEL_PACK_BUFFER_BINDING*: GLenum = GLenum(0x88ED)
  GL_PIXEL_UNPACK_BUFFER_BINDING*: GLenum = GLenum(0x88EF)
  GL_FLOAT_MAT2x3*: GLenum = GLenum(0x8B65)
  GL_FLOAT_MAT2x4*: GLenum = GLenum(0x8B66)
  GL_FLOAT_MAT3x2*: GLenum = GLenum(0x8B67)
  GL_FLOAT_MAT3x4*: GLenum = GLenum(0x8B68)
  GL_FLOAT_MAT4x2*: GLenum = GLenum(0x8B69)
  GL_FLOAT_MAT4x3*: GLenum = GLenum(0x8B6A)
  GL_SRGB*: GLenum = GLenum(0x8C40)
  GL_SRGB8*: GLenum = GLenum(0x8C41)
  GL_SRGB_ALPHA*: GLenum = GLenum(0x8C42)
  GL_SRGB8_ALPHA8*: GLenum = GLenum(0x8C43)
  GL_COMPRESSED_SRGB*: GLenum = GLenum(0x8C48)
  GL_COMPRESSED_SRGB_ALPHA*: GLenum = GLenum(0x8C49)
  GL_CURRENT_RASTER_SECONDARY_COLOR*: GLenum = GLenum(0x845F)
  GL_SLUMINANCE_ALPHA*: GLenum = GLenum(0x8C44)
  GL_SLUMINANCE8_ALPHA8*: GLenum = GLenum(0x8C45)
  GL_SLUMINANCE*: GLenum = GLenum(0x8C46)
  GL_SLUMINANCE8*: GLenum = GLenum(0x8C47)
  GL_COMPRESSED_SLUMINANCE*: GLenum = GLenum(0x8C4A)
  GL_COMPRESSED_SLUMINANCE_ALPHA*: GLenum = GLenum(0x8C4B)


# Functions
var
  GLAD_GL_VERSION_1_0*: bool
  GLAD_GL_VERSION_1_1*: bool
  GLAD_GL_VERSION_1_2*: bool
  GLAD_GL_VERSION_1_3*: bool
  GLAD_GL_VERSION_1_4*: bool
  GLAD_GL_VERSION_1_5*: bool
  GLAD_GL_VERSION_2_0*: bool
  GLAD_GL_VERSION_2_1*: bool

  glCullFace*: proc (mode: GLenum) {.cdecl, gcsafe.}
  glFrontFace*: proc (mode: GLenum) {.cdecl, gcsafe.}
  glHint*: proc (target: GLenum, mode: GLenum) {.cdecl, gcsafe.}
  glLineWidth*: proc (width: GLfloat) {.cdecl, gcsafe.}
  glPointSize*: proc (size: GLfloat) {.cdecl, gcsafe.}
  glPolygonMode*: proc (face: GLenum, mode: GLenum) {.cdecl, gcsafe.}
  glScissor*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}
  glTexParameterf*: proc (target: GLenum, pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}
  glTexParameterfv*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glTexParameteri*: proc (target: GLenum, pname: GLenum, param: GLint) {.cdecl, gcsafe.}
  glTexParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glTexImage1D*: proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}
  glTexImage2D*: proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}
  glDrawBuffer*: proc (buf: GLenum) {.cdecl, gcsafe.}
  glClear*: proc (mask: GLbitfield) {.cdecl, gcsafe.}
  glClearColor*: proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl, gcsafe.}
  glClearStencil*: proc (s: GLint) {.cdecl, gcsafe.}
  glClearDepth*: proc (depth: GLdouble) {.cdecl, gcsafe.}
  glStencilMask*: proc (mask: GLuint) {.cdecl, gcsafe.}
  glColorMask*: proc (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) {.cdecl, gcsafe.}
  glDepthMask*: proc (flag: GLboolean) {.cdecl, gcsafe.}
  glDisable*: proc (cap: GLenum) {.cdecl, gcsafe.}
  glEnable*: proc (cap: GLenum) {.cdecl, gcsafe.}
  glFinish*: proc () {.cdecl, gcsafe.}
  glFlush*: proc () {.cdecl, gcsafe.}
  glBlendFunc*: proc (sfactor: GLenum, dfactor: GLenum) {.cdecl, gcsafe.}
  glLogicOp*: proc (opcode: GLenum) {.cdecl, gcsafe.}
  glStencilFunc*: proc (`func`: GLenum, `ref`: GLint, mask: GLuint) {.cdecl, gcsafe.}
  glStencilOp*: proc (fail: GLenum, zfail: GLenum, zpass: GLenum) {.cdecl, gcsafe.}
  glDepthFunc*: proc (`func`: GLenum) {.cdecl, gcsafe.}
  glPixelStoref*: proc (pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}
  glPixelStorei*: proc (pname: GLenum, param: GLint) {.cdecl, gcsafe.}
  glReadBuffer*: proc (src: GLenum) {.cdecl, gcsafe.}
  glReadPixels*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}
  glGetBooleanv*: proc (pname: GLenum, data: ptr GLboolean) {.cdecl, gcsafe.}
  glGetDoublev*: proc (pname: GLenum, data: ptr GLdouble) {.cdecl, gcsafe.}
  glGetError*: proc (): GLenum {.cdecl, gcsafe.}
  glGetFloatv*: proc (pname: GLenum, data: ptr GLfloat) {.cdecl, gcsafe.}
  glGetIntegerv*: proc (pname: GLenum, data: ptr GLint) {.cdecl, gcsafe.}
  glGetString*: proc (name: GLenum): ptr GLubyte {.cdecl, gcsafe.}
  glGetTexImage*: proc (target: GLenum, level: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}
  glGetTexParameterfv*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glGetTexParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetTexLevelParameterfv*: proc (target: GLenum, level: GLint, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glGetTexLevelParameteriv*: proc (target: GLenum, level: GLint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glIsEnabled*: proc (cap: GLenum): GLboolean {.cdecl, gcsafe.}
  glDepthRange*: proc (n: GLdouble, f: GLdouble) {.cdecl, gcsafe.}
  glViewport*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}
  glNewList*: proc (list: GLuint, mode: GLenum) {.cdecl, gcsafe.}
  glEndList*: proc () {.cdecl, gcsafe.}
  glCallList*: proc (list: GLuint) {.cdecl, gcsafe.}
  glCallLists*: proc (n: GLsizei, `type`: GLenum, lists: pointer) {.cdecl, gcsafe.}
  glDeleteLists*: proc (list: GLuint, range: GLsizei) {.cdecl, gcsafe.}
  glGenLists*: proc (range: GLsizei): GLuint {.cdecl, gcsafe.}
  glListBase*: proc (base: GLuint) {.cdecl, gcsafe.}
  glBegin*: proc (mode: GLenum) {.cdecl, gcsafe.}
  glBitmap*: proc (width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: ptr GLubyte) {.cdecl, gcsafe.}
  glColor3b*: proc (red: GLbyte, green: GLbyte, blue: GLbyte) {.cdecl, gcsafe.}
  glColor3bv*: proc (v: ptr GLbyte) {.cdecl, gcsafe.}
  glColor3d*: proc (red: GLdouble, green: GLdouble, blue: GLdouble) {.cdecl, gcsafe.}
  glColor3dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glColor3f*: proc (red: GLfloat, green: GLfloat, blue: GLfloat) {.cdecl, gcsafe.}
  glColor3fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glColor3i*: proc (red: GLint, green: GLint, blue: GLint) {.cdecl, gcsafe.}
  glColor3iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glColor3s*: proc (red: GLshort, green: GLshort, blue: GLshort) {.cdecl, gcsafe.}
  glColor3sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glColor3ub*: proc (red: GLubyte, green: GLubyte, blue: GLubyte) {.cdecl, gcsafe.}
  glColor3ubv*: proc (v: ptr GLubyte) {.cdecl, gcsafe.}
  glColor3ui*: proc (red: GLuint, green: GLuint, blue: GLuint) {.cdecl, gcsafe.}
  glColor3uiv*: proc (v: ptr GLuint) {.cdecl, gcsafe.}
  glColor3us*: proc (red: GLushort, green: GLushort, blue: GLushort) {.cdecl, gcsafe.}
  glColor3usv*: proc (v: ptr GLushort) {.cdecl, gcsafe.}
  glColor4b*: proc (red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte) {.cdecl, gcsafe.}
  glColor4bv*: proc (v: ptr GLbyte) {.cdecl, gcsafe.}
  glColor4d*: proc (red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble) {.cdecl, gcsafe.}
  glColor4dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glColor4f*: proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl, gcsafe.}
  glColor4fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glColor4i*: proc (red: GLint, green: GLint, blue: GLint, alpha: GLint) {.cdecl, gcsafe.}
  glColor4iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glColor4s*: proc (red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort) {.cdecl, gcsafe.}
  glColor4sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glColor4ub*: proc (red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte) {.cdecl, gcsafe.}
  glColor4ubv*: proc (v: ptr GLubyte) {.cdecl, gcsafe.}
  glColor4ui*: proc (red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) {.cdecl, gcsafe.}
  glColor4uiv*: proc (v: ptr GLuint) {.cdecl, gcsafe.}
  glColor4us*: proc (red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort) {.cdecl, gcsafe.}
  glColor4usv*: proc (v: ptr GLushort) {.cdecl, gcsafe.}
  glEdgeFlag*: proc (flag: GLboolean) {.cdecl, gcsafe.}
  glEdgeFlagv*: proc (flag: ptr GLboolean) {.cdecl, gcsafe.}
  glEnd*: proc () {.cdecl, gcsafe.}
  glIndexd*: proc (c: GLdouble) {.cdecl, gcsafe.}
  glIndexdv*: proc (c: ptr GLdouble) {.cdecl, gcsafe.}
  glIndexf*: proc (c: GLfloat) {.cdecl, gcsafe.}
  glIndexfv*: proc (c: ptr GLfloat) {.cdecl, gcsafe.}
  glIndexi*: proc (c: GLint) {.cdecl, gcsafe.}
  glIndexiv*: proc (c: ptr GLint) {.cdecl, gcsafe.}
  glIndexs*: proc (c: GLshort) {.cdecl, gcsafe.}
  glIndexsv*: proc (c: ptr GLshort) {.cdecl, gcsafe.}
  glNormal3b*: proc (nx: GLbyte, ny: GLbyte, nz: GLbyte) {.cdecl, gcsafe.}
  glNormal3bv*: proc (v: ptr GLbyte) {.cdecl, gcsafe.}
  glNormal3d*: proc (nx: GLdouble, ny: GLdouble, nz: GLdouble) {.cdecl, gcsafe.}
  glNormal3dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glNormal3f*: proc (nx: GLfloat, ny: GLfloat, nz: GLfloat) {.cdecl, gcsafe.}
  glNormal3fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glNormal3i*: proc (nx: GLint, ny: GLint, nz: GLint) {.cdecl, gcsafe.}
  glNormal3iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glNormal3s*: proc (nx: GLshort, ny: GLshort, nz: GLshort) {.cdecl, gcsafe.}
  glNormal3sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glRasterPos2d*: proc (x: GLdouble, y: GLdouble) {.cdecl, gcsafe.}
  glRasterPos2dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glRasterPos2f*: proc (x: GLfloat, y: GLfloat) {.cdecl, gcsafe.}
  glRasterPos2fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glRasterPos2i*: proc (x: GLint, y: GLint) {.cdecl, gcsafe.}
  glRasterPos2iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glRasterPos2s*: proc (x: GLshort, y: GLshort) {.cdecl, gcsafe.}
  glRasterPos2sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glRasterPos3d*: proc (x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}
  glRasterPos3dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glRasterPos3f*: proc (x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}
  glRasterPos3fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glRasterPos3i*: proc (x: GLint, y: GLint, z: GLint) {.cdecl, gcsafe.}
  glRasterPos3iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glRasterPos3s*: proc (x: GLshort, y: GLshort, z: GLshort) {.cdecl, gcsafe.}
  glRasterPos3sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glRasterPos4d*: proc (x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.cdecl, gcsafe.}
  glRasterPos4dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glRasterPos4f*: proc (x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.cdecl, gcsafe.}
  glRasterPos4fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glRasterPos4i*: proc (x: GLint, y: GLint, z: GLint, w: GLint) {.cdecl, gcsafe.}
  glRasterPos4iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glRasterPos4s*: proc (x: GLshort, y: GLshort, z: GLshort, w: GLshort) {.cdecl, gcsafe.}
  glRasterPos4sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glRectd*: proc (x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble) {.cdecl, gcsafe.}
  glRectdv*: proc (v1: ptr GLdouble, v2: ptr GLdouble) {.cdecl, gcsafe.}
  glRectf*: proc (x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat) {.cdecl, gcsafe.}
  glRectfv*: proc (v1: ptr GLfloat, v2: ptr GLfloat) {.cdecl, gcsafe.}
  glRecti*: proc (x1: GLint, y1: GLint, x2: GLint, y2: GLint) {.cdecl, gcsafe.}
  glRectiv*: proc (v1: ptr GLint, v2: ptr GLint) {.cdecl, gcsafe.}
  glRects*: proc (x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort) {.cdecl, gcsafe.}
  glRectsv*: proc (v1: ptr GLshort, v2: ptr GLshort) {.cdecl, gcsafe.}
  glTexCoord1d*: proc (s: GLdouble) {.cdecl, gcsafe.}
  glTexCoord1dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glTexCoord1f*: proc (s: GLfloat) {.cdecl, gcsafe.}
  glTexCoord1fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glTexCoord1i*: proc (s: GLint) {.cdecl, gcsafe.}
  glTexCoord1iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glTexCoord1s*: proc (s: GLshort) {.cdecl, gcsafe.}
  glTexCoord1sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glTexCoord2d*: proc (s: GLdouble, t: GLdouble) {.cdecl, gcsafe.}
  glTexCoord2dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glTexCoord2f*: proc (s: GLfloat, t: GLfloat) {.cdecl, gcsafe.}
  glTexCoord2fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glTexCoord2i*: proc (s: GLint, t: GLint) {.cdecl, gcsafe.}
  glTexCoord2iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glTexCoord2s*: proc (s: GLshort, t: GLshort) {.cdecl, gcsafe.}
  glTexCoord2sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glTexCoord3d*: proc (s: GLdouble, t: GLdouble, r: GLdouble) {.cdecl, gcsafe.}
  glTexCoord3dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glTexCoord3f*: proc (s: GLfloat, t: GLfloat, r: GLfloat) {.cdecl, gcsafe.}
  glTexCoord3fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glTexCoord3i*: proc (s: GLint, t: GLint, r: GLint) {.cdecl, gcsafe.}
  glTexCoord3iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glTexCoord3s*: proc (s: GLshort, t: GLshort, r: GLshort) {.cdecl, gcsafe.}
  glTexCoord3sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glTexCoord4d*: proc (s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) {.cdecl, gcsafe.}
  glTexCoord4dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glTexCoord4f*: proc (s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) {.cdecl, gcsafe.}
  glTexCoord4fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glTexCoord4i*: proc (s: GLint, t: GLint, r: GLint, q: GLint) {.cdecl, gcsafe.}
  glTexCoord4iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glTexCoord4s*: proc (s: GLshort, t: GLshort, r: GLshort, q: GLshort) {.cdecl, gcsafe.}
  glTexCoord4sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glVertex2d*: proc (x: GLdouble, y: GLdouble) {.cdecl, gcsafe.}
  glVertex2dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glVertex2f*: proc (x: GLfloat, y: GLfloat) {.cdecl, gcsafe.}
  glVertex2fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glVertex2i*: proc (x: GLint, y: GLint) {.cdecl, gcsafe.}
  glVertex2iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glVertex2s*: proc (x: GLshort, y: GLshort) {.cdecl, gcsafe.}
  glVertex2sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glVertex3d*: proc (x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}
  glVertex3dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glVertex3f*: proc (x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}
  glVertex3fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glVertex3i*: proc (x: GLint, y: GLint, z: GLint) {.cdecl, gcsafe.}
  glVertex3iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glVertex3s*: proc (x: GLshort, y: GLshort, z: GLshort) {.cdecl, gcsafe.}
  glVertex3sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glVertex4d*: proc (x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.cdecl, gcsafe.}
  glVertex4dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glVertex4f*: proc (x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.cdecl, gcsafe.}
  glVertex4fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glVertex4i*: proc (x: GLint, y: GLint, z: GLint, w: GLint) {.cdecl, gcsafe.}
  glVertex4iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glVertex4s*: proc (x: GLshort, y: GLshort, z: GLshort, w: GLshort) {.cdecl, gcsafe.}
  glVertex4sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glClipPlane*: proc (plane: GLenum, equation: ptr GLdouble) {.cdecl, gcsafe.}
  glColorMaterial*: proc (face: GLenum, mode: GLenum) {.cdecl, gcsafe.}
  glFogf*: proc (pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}
  glFogfv*: proc (pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glFogi*: proc (pname: GLenum, param: GLint) {.cdecl, gcsafe.}
  glFogiv*: proc (pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glLightf*: proc (light: GLenum, pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}
  glLightfv*: proc (light: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glLighti*: proc (light: GLenum, pname: GLenum, param: GLint) {.cdecl, gcsafe.}
  glLightiv*: proc (light: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glLightModelf*: proc (pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}
  glLightModelfv*: proc (pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glLightModeli*: proc (pname: GLenum, param: GLint) {.cdecl, gcsafe.}
  glLightModeliv*: proc (pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glLineStipple*: proc (factor: GLint, pattern: GLushort) {.cdecl, gcsafe.}
  glMaterialf*: proc (face: GLenum, pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}
  glMaterialfv*: proc (face: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glMateriali*: proc (face: GLenum, pname: GLenum, param: GLint) {.cdecl, gcsafe.}
  glMaterialiv*: proc (face: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glPolygonStipple*: proc (mask: ptr GLubyte) {.cdecl, gcsafe.}
  glShadeModel*: proc (mode: GLenum) {.cdecl, gcsafe.}
  glTexEnvf*: proc (target: GLenum, pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}
  glTexEnvfv*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glTexEnvi*: proc (target: GLenum, pname: GLenum, param: GLint) {.cdecl, gcsafe.}
  glTexEnviv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glTexGend*: proc (coord: GLenum, pname: GLenum, param: GLdouble) {.cdecl, gcsafe.}
  glTexGendv*: proc (coord: GLenum, pname: GLenum, params: ptr GLdouble) {.cdecl, gcsafe.}
  glTexGenf*: proc (coord: GLenum, pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}
  glTexGenfv*: proc (coord: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glTexGeni*: proc (coord: GLenum, pname: GLenum, param: GLint) {.cdecl, gcsafe.}
  glTexGeniv*: proc (coord: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glFeedbackBuffer*: proc (size: GLsizei, `type`: GLenum, buffer: ptr GLfloat) {.cdecl, gcsafe.}
  glSelectBuffer*: proc (size: GLsizei, buffer: ptr GLuint) {.cdecl, gcsafe.}
  glRenderMode*: proc (mode: GLenum): GLint {.cdecl, gcsafe.}
  glInitNames*: proc () {.cdecl, gcsafe.}
  glLoadName*: proc (name: GLuint) {.cdecl, gcsafe.}
  glPassThrough*: proc (token: GLfloat) {.cdecl, gcsafe.}
  glPopName*: proc () {.cdecl, gcsafe.}
  glPushName*: proc (name: GLuint) {.cdecl, gcsafe.}
  glClearAccum*: proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl, gcsafe.}
  glClearIndex*: proc (c: GLfloat) {.cdecl, gcsafe.}
  glIndexMask*: proc (mask: GLuint) {.cdecl, gcsafe.}
  glAccum*: proc (op: GLenum, value: GLfloat) {.cdecl, gcsafe.}
  glPopAttrib*: proc () {.cdecl, gcsafe.}
  glPushAttrib*: proc (mask: GLbitfield) {.cdecl, gcsafe.}
  glMap1d*: proc (target: GLenum, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: ptr GLdouble) {.cdecl, gcsafe.}
  glMap1f*: proc (target: GLenum, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: ptr GLfloat) {.cdecl, gcsafe.}
  glMap2d*: proc (target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: ptr GLdouble) {.cdecl, gcsafe.}
  glMap2f*: proc (target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: ptr GLfloat) {.cdecl, gcsafe.}
  glMapGrid1d*: proc (un: GLint, u1: GLdouble, u2: GLdouble) {.cdecl, gcsafe.}
  glMapGrid1f*: proc (un: GLint, u1: GLfloat, u2: GLfloat) {.cdecl, gcsafe.}
  glMapGrid2d*: proc (un: GLint, u1: GLdouble, u2: GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble) {.cdecl, gcsafe.}
  glMapGrid2f*: proc (un: GLint, u1: GLfloat, u2: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat) {.cdecl, gcsafe.}
  glEvalCoord1d*: proc (u: GLdouble) {.cdecl, gcsafe.}
  glEvalCoord1dv*: proc (u: ptr GLdouble) {.cdecl, gcsafe.}
  glEvalCoord1f*: proc (u: GLfloat) {.cdecl, gcsafe.}
  glEvalCoord1fv*: proc (u: ptr GLfloat) {.cdecl, gcsafe.}
  glEvalCoord2d*: proc (u: GLdouble, v: GLdouble) {.cdecl, gcsafe.}
  glEvalCoord2dv*: proc (u: ptr GLdouble) {.cdecl, gcsafe.}
  glEvalCoord2f*: proc (u: GLfloat, v: GLfloat) {.cdecl, gcsafe.}
  glEvalCoord2fv*: proc (u: ptr GLfloat) {.cdecl, gcsafe.}
  glEvalMesh1*: proc (mode: GLenum, i1: GLint, i2: GLint) {.cdecl, gcsafe.}
  glEvalPoint1*: proc (i: GLint) {.cdecl, gcsafe.}
  glEvalMesh2*: proc (mode: GLenum, i1: GLint, i2: GLint, j1: GLint, j2: GLint) {.cdecl, gcsafe.}
  glEvalPoint2*: proc (i: GLint, j: GLint) {.cdecl, gcsafe.}
  glAlphaFunc*: proc (`func`: GLenum, `ref`: GLfloat) {.cdecl, gcsafe.}
  glPixelZoom*: proc (xfactor: GLfloat, yfactor: GLfloat) {.cdecl, gcsafe.}
  glPixelTransferf*: proc (pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}
  glPixelTransferi*: proc (pname: GLenum, param: GLint) {.cdecl, gcsafe.}
  glPixelMapfv*: proc (map: GLenum, mapsize: GLsizei, values: ptr GLfloat) {.cdecl, gcsafe.}
  glPixelMapuiv*: proc (map: GLenum, mapsize: GLsizei, values: ptr GLuint) {.cdecl, gcsafe.}
  glPixelMapusv*: proc (map: GLenum, mapsize: GLsizei, values: ptr GLushort) {.cdecl, gcsafe.}
  glCopyPixels*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei, `type`: GLenum) {.cdecl, gcsafe.}
  glDrawPixels*: proc (width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}
  glGetClipPlane*: proc (plane: GLenum, equation: ptr GLdouble) {.cdecl, gcsafe.}
  glGetLightfv*: proc (light: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glGetLightiv*: proc (light: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetMapdv*: proc (target: GLenum, query: GLenum, v: ptr GLdouble) {.cdecl, gcsafe.}
  glGetMapfv*: proc (target: GLenum, query: GLenum, v: ptr GLfloat) {.cdecl, gcsafe.}
  glGetMapiv*: proc (target: GLenum, query: GLenum, v: ptr GLint) {.cdecl, gcsafe.}
  glGetMaterialfv*: proc (face: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glGetMaterialiv*: proc (face: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetPixelMapfv*: proc (map: GLenum, values: ptr GLfloat) {.cdecl, gcsafe.}
  glGetPixelMapuiv*: proc (map: GLenum, values: ptr GLuint) {.cdecl, gcsafe.}
  glGetPixelMapusv*: proc (map: GLenum, values: ptr GLushort) {.cdecl, gcsafe.}
  glGetPolygonStipple*: proc (mask: ptr GLubyte) {.cdecl, gcsafe.}
  glGetTexEnvfv*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glGetTexEnviv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetTexGendv*: proc (coord: GLenum, pname: GLenum, params: ptr GLdouble) {.cdecl, gcsafe.}
  glGetTexGenfv*: proc (coord: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glGetTexGeniv*: proc (coord: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glIsList*: proc (list: GLuint): GLboolean {.cdecl, gcsafe.}
  glFrustum*: proc (left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) {.cdecl, gcsafe.}
  glLoadIdentity*: proc () {.cdecl, gcsafe.}
  glLoadMatrixf*: proc (m: ptr GLfloat) {.cdecl, gcsafe.}
  glLoadMatrixd*: proc (m: ptr GLdouble) {.cdecl, gcsafe.}
  glMatrixMode*: proc (mode: GLenum) {.cdecl, gcsafe.}
  glMultMatrixf*: proc (m: ptr GLfloat) {.cdecl, gcsafe.}
  glMultMatrixd*: proc (m: ptr GLdouble) {.cdecl, gcsafe.}
  glOrtho*: proc (left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) {.cdecl, gcsafe.}
  glPopMatrix*: proc () {.cdecl, gcsafe.}
  glPushMatrix*: proc () {.cdecl, gcsafe.}
  glRotated*: proc (angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}
  glRotatef*: proc (angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}
  glScaled*: proc (x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}
  glScalef*: proc (x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}
  glTranslated*: proc (x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}
  glTranslatef*: proc (x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}
  glDrawArrays*: proc (mode: GLenum, first: GLint, count: GLsizei) {.cdecl, gcsafe.}
  glDrawElements*: proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer) {.cdecl, gcsafe.}
  glGetPointerv*: proc (pname: GLenum, params: ptr pointer) {.cdecl, gcsafe.}
  glPolygonOffset*: proc (factor: GLfloat, units: GLfloat) {.cdecl, gcsafe.}
  glCopyTexImage1D*: proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) {.cdecl, gcsafe.}
  glCopyTexImage2D*: proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) {.cdecl, gcsafe.}
  glCopyTexSubImage1D*: proc (target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) {.cdecl, gcsafe.}
  glCopyTexSubImage2D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}
  glTexSubImage1D*: proc (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}
  glTexSubImage2D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}
  glBindTexture*: proc (target: GLenum, texture: GLuint) {.cdecl, gcsafe.}
  glDeleteTextures*: proc (n: GLsizei, textures: ptr GLuint) {.cdecl, gcsafe.}
  glGenTextures*: proc (n: GLsizei, textures: ptr GLuint) {.cdecl, gcsafe.}
  glIsTexture*: proc (texture: GLuint): GLboolean {.cdecl, gcsafe.}
  glArrayElement*: proc (i: GLint) {.cdecl, gcsafe.}
  glColorPointer*: proc (size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}
  glDisableClientState*: proc (array: GLenum) {.cdecl, gcsafe.}
  glEdgeFlagPointer*: proc (stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}
  glEnableClientState*: proc (array: GLenum) {.cdecl, gcsafe.}
  glIndexPointer*: proc (`type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}
  glInterleavedArrays*: proc (format: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}
  glNormalPointer*: proc (`type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}
  glTexCoordPointer*: proc (size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}
  glVertexPointer*: proc (size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}
  glAreTexturesResident*: proc (n: GLsizei, textures: ptr GLuint, residences: ptr GLboolean): GLboolean {.cdecl, gcsafe.}
  glPrioritizeTextures*: proc (n: GLsizei, textures: ptr GLuint, priorities: ptr GLfloat) {.cdecl, gcsafe.}
  glIndexub*: proc (c: GLubyte) {.cdecl, gcsafe.}
  glIndexubv*: proc (c: ptr GLubyte) {.cdecl, gcsafe.}
  glPopClientAttrib*: proc () {.cdecl, gcsafe.}
  glPushClientAttrib*: proc (mask: GLbitfield) {.cdecl, gcsafe.}
  glDrawRangeElements*: proc (mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer) {.cdecl, gcsafe.}
  glTexImage3D*: proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}
  glTexSubImage3D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}
  glCopyTexSubImage3D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}
  glActiveTexture*: proc (texture: GLenum) {.cdecl, gcsafe.}
  glSampleCoverage*: proc (value: GLfloat, invert: GLboolean) {.cdecl, gcsafe.}
  glCompressedTexImage3D*: proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}
  glCompressedTexImage2D*: proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}
  glCompressedTexImage1D*: proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}
  glCompressedTexSubImage3D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}
  glCompressedTexSubImage2D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}
  glCompressedTexSubImage1D*: proc (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}
  glGetCompressedTexImage*: proc (target: GLenum, level: GLint, img: pointer) {.cdecl, gcsafe.}
  glClientActiveTexture*: proc (texture: GLenum) {.cdecl, gcsafe.}
  glMultiTexCoord1d*: proc (target: GLenum, s: GLdouble) {.cdecl, gcsafe.}
  glMultiTexCoord1dv*: proc (target: GLenum, v: ptr GLdouble) {.cdecl, gcsafe.}
  glMultiTexCoord1f*: proc (target: GLenum, s: GLfloat) {.cdecl, gcsafe.}
  glMultiTexCoord1fv*: proc (target: GLenum, v: ptr GLfloat) {.cdecl, gcsafe.}
  glMultiTexCoord1i*: proc (target: GLenum, s: GLint) {.cdecl, gcsafe.}
  glMultiTexCoord1iv*: proc (target: GLenum, v: ptr GLint) {.cdecl, gcsafe.}
  glMultiTexCoord1s*: proc (target: GLenum, s: GLshort) {.cdecl, gcsafe.}
  glMultiTexCoord1sv*: proc (target: GLenum, v: ptr GLshort) {.cdecl, gcsafe.}
  glMultiTexCoord2d*: proc (target: GLenum, s: GLdouble, t: GLdouble) {.cdecl, gcsafe.}
  glMultiTexCoord2dv*: proc (target: GLenum, v: ptr GLdouble) {.cdecl, gcsafe.}
  glMultiTexCoord2f*: proc (target: GLenum, s: GLfloat, t: GLfloat) {.cdecl, gcsafe.}
  glMultiTexCoord2fv*: proc (target: GLenum, v: ptr GLfloat) {.cdecl, gcsafe.}
  glMultiTexCoord2i*: proc (target: GLenum, s: GLint, t: GLint) {.cdecl, gcsafe.}
  glMultiTexCoord2iv*: proc (target: GLenum, v: ptr GLint) {.cdecl, gcsafe.}
  glMultiTexCoord2s*: proc (target: GLenum, s: GLshort, t: GLshort) {.cdecl, gcsafe.}
  glMultiTexCoord2sv*: proc (target: GLenum, v: ptr GLshort) {.cdecl, gcsafe.}
  glMultiTexCoord3d*: proc (target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) {.cdecl, gcsafe.}
  glMultiTexCoord3dv*: proc (target: GLenum, v: ptr GLdouble) {.cdecl, gcsafe.}
  glMultiTexCoord3f*: proc (target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) {.cdecl, gcsafe.}
  glMultiTexCoord3fv*: proc (target: GLenum, v: ptr GLfloat) {.cdecl, gcsafe.}
  glMultiTexCoord3i*: proc (target: GLenum, s: GLint, t: GLint, r: GLint) {.cdecl, gcsafe.}
  glMultiTexCoord3iv*: proc (target: GLenum, v: ptr GLint) {.cdecl, gcsafe.}
  glMultiTexCoord3s*: proc (target: GLenum, s: GLshort, t: GLshort, r: GLshort) {.cdecl, gcsafe.}
  glMultiTexCoord3sv*: proc (target: GLenum, v: ptr GLshort) {.cdecl, gcsafe.}
  glMultiTexCoord4d*: proc (target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) {.cdecl, gcsafe.}
  glMultiTexCoord4dv*: proc (target: GLenum, v: ptr GLdouble) {.cdecl, gcsafe.}
  glMultiTexCoord4f*: proc (target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) {.cdecl, gcsafe.}
  glMultiTexCoord4fv*: proc (target: GLenum, v: ptr GLfloat) {.cdecl, gcsafe.}
  glMultiTexCoord4i*: proc (target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) {.cdecl, gcsafe.}
  glMultiTexCoord4iv*: proc (target: GLenum, v: ptr GLint) {.cdecl, gcsafe.}
  glMultiTexCoord4s*: proc (target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) {.cdecl, gcsafe.}
  glMultiTexCoord4sv*: proc (target: GLenum, v: ptr GLshort) {.cdecl, gcsafe.}
  glLoadTransposeMatrixf*: proc (m: ptr GLfloat) {.cdecl, gcsafe.}
  glLoadTransposeMatrixd*: proc (m: ptr GLdouble) {.cdecl, gcsafe.}
  glMultTransposeMatrixf*: proc (m: ptr GLfloat) {.cdecl, gcsafe.}
  glMultTransposeMatrixd*: proc (m: ptr GLdouble) {.cdecl, gcsafe.}
  glBlendFuncSeparate*: proc (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) {.cdecl, gcsafe.}
  glMultiDrawArrays*: proc (mode: GLenum, first: ptr GLint, count: ptr GLsizei, drawcount: GLsizei) {.cdecl, gcsafe.}
  glMultiDrawElements*: proc (mode: GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, drawcount: GLsizei) {.cdecl, gcsafe.}
  glPointParameterf*: proc (pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}
  glPointParameterfv*: proc (pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glPointParameteri*: proc (pname: GLenum, param: GLint) {.cdecl, gcsafe.}
  glPointParameteriv*: proc (pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glFogCoordf*: proc (coord: GLfloat) {.cdecl, gcsafe.}
  glFogCoordfv*: proc (coord: ptr GLfloat) {.cdecl, gcsafe.}
  glFogCoordd*: proc (coord: GLdouble) {.cdecl, gcsafe.}
  glFogCoorddv*: proc (coord: ptr GLdouble) {.cdecl, gcsafe.}
  glFogCoordPointer*: proc (`type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}
  glSecondaryColor3b*: proc (red: GLbyte, green: GLbyte, blue: GLbyte) {.cdecl, gcsafe.}
  glSecondaryColor3bv*: proc (v: ptr GLbyte) {.cdecl, gcsafe.}
  glSecondaryColor3d*: proc (red: GLdouble, green: GLdouble, blue: GLdouble) {.cdecl, gcsafe.}
  glSecondaryColor3dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glSecondaryColor3f*: proc (red: GLfloat, green: GLfloat, blue: GLfloat) {.cdecl, gcsafe.}
  glSecondaryColor3fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glSecondaryColor3i*: proc (red: GLint, green: GLint, blue: GLint) {.cdecl, gcsafe.}
  glSecondaryColor3iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glSecondaryColor3s*: proc (red: GLshort, green: GLshort, blue: GLshort) {.cdecl, gcsafe.}
  glSecondaryColor3sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glSecondaryColor3ub*: proc (red: GLubyte, green: GLubyte, blue: GLubyte) {.cdecl, gcsafe.}
  glSecondaryColor3ubv*: proc (v: ptr GLubyte) {.cdecl, gcsafe.}
  glSecondaryColor3ui*: proc (red: GLuint, green: GLuint, blue: GLuint) {.cdecl, gcsafe.}
  glSecondaryColor3uiv*: proc (v: ptr GLuint) {.cdecl, gcsafe.}
  glSecondaryColor3us*: proc (red: GLushort, green: GLushort, blue: GLushort) {.cdecl, gcsafe.}
  glSecondaryColor3usv*: proc (v: ptr GLushort) {.cdecl, gcsafe.}
  glSecondaryColorPointer*: proc (size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}
  glWindowPos2d*: proc (x: GLdouble, y: GLdouble) {.cdecl, gcsafe.}
  glWindowPos2dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glWindowPos2f*: proc (x: GLfloat, y: GLfloat) {.cdecl, gcsafe.}
  glWindowPos2fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glWindowPos2i*: proc (x: GLint, y: GLint) {.cdecl, gcsafe.}
  glWindowPos2iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glWindowPos2s*: proc (x: GLshort, y: GLshort) {.cdecl, gcsafe.}
  glWindowPos2sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glWindowPos3d*: proc (x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}
  glWindowPos3dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glWindowPos3f*: proc (x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}
  glWindowPos3fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glWindowPos3i*: proc (x: GLint, y: GLint, z: GLint) {.cdecl, gcsafe.}
  glWindowPos3iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glWindowPos3s*: proc (x: GLshort, y: GLshort, z: GLshort) {.cdecl, gcsafe.}
  glWindowPos3sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glBlendColor*: proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl, gcsafe.}
  glBlendEquation*: proc (mode: GLenum) {.cdecl, gcsafe.}
  glGenQueries*: proc (n: GLsizei, ids: ptr GLuint) {.cdecl, gcsafe.}
  glDeleteQueries*: proc (n: GLsizei, ids: ptr GLuint) {.cdecl, gcsafe.}
  glIsQuery*: proc (id: GLuint): GLboolean {.cdecl, gcsafe.}
  glBeginQuery*: proc (target: GLenum, id: GLuint) {.cdecl, gcsafe.}
  glEndQuery*: proc (target: GLenum) {.cdecl, gcsafe.}
  glGetQueryiv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetQueryObjectiv*: proc (id: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetQueryObjectuiv*: proc (id: GLuint, pname: GLenum, params: ptr GLuint) {.cdecl, gcsafe.}
  glBindBuffer*: proc (target: GLenum, buffer: GLuint) {.cdecl, gcsafe.}
  glDeleteBuffers*: proc (n: GLsizei, buffers: ptr GLuint) {.cdecl, gcsafe.}
  glGenBuffers*: proc (n: GLsizei, buffers: ptr GLuint) {.cdecl, gcsafe.}
  glIsBuffer*: proc (buffer: GLuint): GLboolean {.cdecl, gcsafe.}
  glBufferData*: proc (target: GLenum, size: GLsizeiptr, data: pointer, usage: GLenum) {.cdecl, gcsafe.}
  glBufferSubData*: proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer) {.cdecl, gcsafe.}
  glGetBufferSubData*: proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer) {.cdecl, gcsafe.}
  glMapBuffer*: proc (target: GLenum, access: GLenum): pointer {.cdecl, gcsafe.}
  glUnmapBuffer*: proc (target: GLenum): GLboolean {.cdecl, gcsafe.}
  glGetBufferParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetBufferPointerv*: proc (target: GLenum, pname: GLenum, params: ptr pointer) {.cdecl, gcsafe.}
  glBlendEquationSeparate*: proc (modeRGB: GLenum, modeAlpha: GLenum) {.cdecl, gcsafe.}
  glDrawBuffers*: proc (n: GLsizei, bufs: ptr GLenum) {.cdecl, gcsafe.}
  glStencilOpSeparate*: proc (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) {.cdecl, gcsafe.}
  glStencilFuncSeparate*: proc (face: GLenum, `func`: GLenum, `ref`: GLint, mask: GLuint) {.cdecl, gcsafe.}
  glStencilMaskSeparate*: proc (face: GLenum, mask: GLuint) {.cdecl, gcsafe.}
  glAttachShader*: proc (program: GLuint, shader: GLuint) {.cdecl, gcsafe.}
  glBindAttribLocation*: proc (program: GLuint, index: GLuint, name: cstring) {.cdecl, gcsafe.}
  glCompileShader*: proc (shader: GLuint) {.cdecl, gcsafe.}
  glCreateProgram*: proc (): GLuint {.cdecl, gcsafe.}
  glCreateShader*: proc (`type`: GLenum): GLuint {.cdecl, gcsafe.}
  glDeleteProgram*: proc (program: GLuint) {.cdecl, gcsafe.}
  glDeleteShader*: proc (shader: GLuint) {.cdecl, gcsafe.}
  glDetachShader*: proc (program: GLuint, shader: GLuint) {.cdecl, gcsafe.}
  glDisableVertexAttribArray*: proc (index: GLuint) {.cdecl, gcsafe.}
  glEnableVertexAttribArray*: proc (index: GLuint) {.cdecl, gcsafe.}
  glGetActiveAttrib*: proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.cdecl, gcsafe.}
  glGetActiveUniform*: proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.cdecl, gcsafe.}
  glGetAttachedShaders*: proc (program: GLuint, maxCount: GLsizei, count: ptr GLsizei, shaders: ptr GLuint) {.cdecl, gcsafe.}
  glGetAttribLocation*: proc (program: GLuint, name: cstring): GLint {.cdecl, gcsafe.}
  glGetProgramiv*: proc (program: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetProgramInfoLog*: proc (program: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.cdecl, gcsafe.}
  glGetShaderiv*: proc (shader: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetShaderInfoLog*: proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.cdecl, gcsafe.}
  glGetShaderSource*: proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, source: cstring) {.cdecl, gcsafe.}
  glGetUniformLocation*: proc (program: GLuint, name: cstring): GLint {.cdecl, gcsafe.}
  glGetUniformfv*: proc (program: GLuint, location: GLint, params: ptr GLfloat) {.cdecl, gcsafe.}
  glGetUniformiv*: proc (program: GLuint, location: GLint, params: ptr GLint) {.cdecl, gcsafe.}
  glGetVertexAttribdv*: proc (index: GLuint, pname: GLenum, params: ptr GLdouble) {.cdecl, gcsafe.}
  glGetVertexAttribfv*: proc (index: GLuint, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glGetVertexAttribiv*: proc (index: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetVertexAttribPointerv*: proc (index: GLuint, pname: GLenum, pointer: ptr pointer) {.cdecl, gcsafe.}
  glIsProgram*: proc (program: GLuint): GLboolean {.cdecl, gcsafe.}
  glIsShader*: proc (shader: GLuint): GLboolean {.cdecl, gcsafe.}
  glLinkProgram*: proc (program: GLuint) {.cdecl, gcsafe.}
  glShaderSource*: proc (shader: GLuint, count: GLsizei, string: cstringArray, length: ptr GLint) {.cdecl, gcsafe.}
  glUseProgram*: proc (program: GLuint) {.cdecl, gcsafe.}
  glUniform1f*: proc (location: GLint, v0: GLfloat) {.cdecl, gcsafe.}
  glUniform2f*: proc (location: GLint, v0: GLfloat, v1: GLfloat) {.cdecl, gcsafe.}
  glUniform3f*: proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) {.cdecl, gcsafe.}
  glUniform4f*: proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) {.cdecl, gcsafe.}
  glUniform1i*: proc (location: GLint, v0: GLint) {.cdecl, gcsafe.}
  glUniform2i*: proc (location: GLint, v0: GLint, v1: GLint) {.cdecl, gcsafe.}
  glUniform3i*: proc (location: GLint, v0: GLint, v1: GLint, v2: GLint) {.cdecl, gcsafe.}
  glUniform4i*: proc (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) {.cdecl, gcsafe.}
  glUniform1fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}
  glUniform2fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}
  glUniform3fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}
  glUniform4fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}
  glUniform1iv*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}
  glUniform2iv*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}
  glUniform3iv*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}
  glUniform4iv*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}
  glUniformMatrix2fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}
  glUniformMatrix3fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}
  glUniformMatrix4fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}
  glValidateProgram*: proc (program: GLuint) {.cdecl, gcsafe.}
  glVertexAttrib1d*: proc (index: GLuint, x: GLdouble) {.cdecl, gcsafe.}
  glVertexAttrib1dv*: proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}
  glVertexAttrib1f*: proc (index: GLuint, x: GLfloat) {.cdecl, gcsafe.}
  glVertexAttrib1fv*: proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}
  glVertexAttrib1s*: proc (index: GLuint, x: GLshort) {.cdecl, gcsafe.}
  glVertexAttrib1sv*: proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}
  glVertexAttrib2d*: proc (index: GLuint, x: GLdouble, y: GLdouble) {.cdecl, gcsafe.}
  glVertexAttrib2dv*: proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}
  glVertexAttrib2f*: proc (index: GLuint, x: GLfloat, y: GLfloat) {.cdecl, gcsafe.}
  glVertexAttrib2fv*: proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}
  glVertexAttrib2s*: proc (index: GLuint, x: GLshort, y: GLshort) {.cdecl, gcsafe.}
  glVertexAttrib2sv*: proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}
  glVertexAttrib3d*: proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}
  glVertexAttrib3dv*: proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}
  glVertexAttrib3f*: proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}
  glVertexAttrib3fv*: proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}
  glVertexAttrib3s*: proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort) {.cdecl, gcsafe.}
  glVertexAttrib3sv*: proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}
  glVertexAttrib4Nbv*: proc (index: GLuint, v: ptr GLbyte) {.cdecl, gcsafe.}
  glVertexAttrib4Niv*: proc (index: GLuint, v: ptr GLint) {.cdecl, gcsafe.}
  glVertexAttrib4Nsv*: proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}
  glVertexAttrib4Nub*: proc (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) {.cdecl, gcsafe.}
  glVertexAttrib4Nubv*: proc (index: GLuint, v: ptr GLubyte) {.cdecl, gcsafe.}
  glVertexAttrib4Nuiv*: proc (index: GLuint, v: ptr GLuint) {.cdecl, gcsafe.}
  glVertexAttrib4Nusv*: proc (index: GLuint, v: ptr GLushort) {.cdecl, gcsafe.}
  glVertexAttrib4bv*: proc (index: GLuint, v: ptr GLbyte) {.cdecl, gcsafe.}
  glVertexAttrib4d*: proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.cdecl, gcsafe.}
  glVertexAttrib4dv*: proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}
  glVertexAttrib4f*: proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.cdecl, gcsafe.}
  glVertexAttrib4fv*: proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}
  glVertexAttrib4iv*: proc (index: GLuint, v: ptr GLint) {.cdecl, gcsafe.}
  glVertexAttrib4s*: proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) {.cdecl, gcsafe.}
  glVertexAttrib4sv*: proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}
  glVertexAttrib4ubv*: proc (index: GLuint, v: ptr GLubyte) {.cdecl, gcsafe.}
  glVertexAttrib4uiv*: proc (index: GLuint, v: ptr GLuint) {.cdecl, gcsafe.}
  glVertexAttrib4usv*: proc (index: GLuint, v: ptr GLushort) {.cdecl, gcsafe.}
  glVertexAttribPointer*: proc (index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}
  glUniformMatrix2x3fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}
  glUniformMatrix3x2fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}
  glUniformMatrix2x4fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}
  glUniformMatrix4x2fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}
  glUniformMatrix3x4fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}
  glUniformMatrix4x3fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}


# Extensions
var
  GLAD_GL_ARB_cull_distance*: bool
  GL_MAX_CULL_DISTANCES*: GLenum = GLenum(0x82F9)
  GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES*: GLenum = GLenum(0x82FA)

  GLAD_GL_ARB_draw_buffers*: bool
  GL_MAX_DRAW_BUFFERS_ARB*: GLenum = GLenum(0x8824)
  GL_DRAW_BUFFER0_ARB*: GLenum = GLenum(0x8825)
  GL_DRAW_BUFFER1_ARB*: GLenum = GLenum(0x8826)
  GL_DRAW_BUFFER2_ARB*: GLenum = GLenum(0x8827)
  GL_DRAW_BUFFER3_ARB*: GLenum = GLenum(0x8828)
  GL_DRAW_BUFFER4_ARB*: GLenum = GLenum(0x8829)
  GL_DRAW_BUFFER5_ARB*: GLenum = GLenum(0x882A)
  GL_DRAW_BUFFER6_ARB*: GLenum = GLenum(0x882B)
  GL_DRAW_BUFFER7_ARB*: GLenum = GLenum(0x882C)
  GL_DRAW_BUFFER8_ARB*: GLenum = GLenum(0x882D)
  GL_DRAW_BUFFER9_ARB*: GLenum = GLenum(0x882E)
  GL_DRAW_BUFFER10_ARB*: GLenum = GLenum(0x882F)
  GL_DRAW_BUFFER11_ARB*: GLenum = GLenum(0x8830)
  GL_DRAW_BUFFER12_ARB*: GLenum = GLenum(0x8831)
  GL_DRAW_BUFFER13_ARB*: GLenum = GLenum(0x8832)
  GL_DRAW_BUFFER14_ARB*: GLenum = GLenum(0x8833)
  GL_DRAW_BUFFER15_ARB*: GLenum = GLenum(0x8834)

  GLAD_GL_ARB_draw_buffers_blend*: bool

  GLAD_GL_ARB_draw_elements_base_vertex*: bool

  GLAD_GL_ARB_fragment_program*: bool
  GL_FRAGMENT_PROGRAM_ARB*: GLenum = GLenum(0x8804)
  GL_PROGRAM_FORMAT_ASCII_ARB*: GLenum = GLenum(0x8875)
  GL_PROGRAM_LENGTH_ARB*: GLenum = GLenum(0x8627)
  GL_PROGRAM_FORMAT_ARB*: GLenum = GLenum(0x8876)
  GL_PROGRAM_BINDING_ARB*: GLenum = GLenum(0x8677)
  GL_PROGRAM_INSTRUCTIONS_ARB*: GLenum = GLenum(0x88A0)
  GL_MAX_PROGRAM_INSTRUCTIONS_ARB*: GLenum = GLenum(0x88A1)
  GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB*: GLenum = GLenum(0x88A2)
  GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB*: GLenum = GLenum(0x88A3)
  GL_PROGRAM_TEMPORARIES_ARB*: GLenum = GLenum(0x88A4)
  GL_MAX_PROGRAM_TEMPORARIES_ARB*: GLenum = GLenum(0x88A5)
  GL_PROGRAM_NATIVE_TEMPORARIES_ARB*: GLenum = GLenum(0x88A6)
  GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB*: GLenum = GLenum(0x88A7)
  GL_PROGRAM_PARAMETERS_ARB*: GLenum = GLenum(0x88A8)
  GL_MAX_PROGRAM_PARAMETERS_ARB*: GLenum = GLenum(0x88A9)
  GL_PROGRAM_NATIVE_PARAMETERS_ARB*: GLenum = GLenum(0x88AA)
  GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB*: GLenum = GLenum(0x88AB)
  GL_PROGRAM_ATTRIBS_ARB*: GLenum = GLenum(0x88AC)
  GL_MAX_PROGRAM_ATTRIBS_ARB*: GLenum = GLenum(0x88AD)
  GL_PROGRAM_NATIVE_ATTRIBS_ARB*: GLenum = GLenum(0x88AE)
  GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB*: GLenum = GLenum(0x88AF)
  GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB*: GLenum = GLenum(0x88B4)
  GL_MAX_PROGRAM_ENV_PARAMETERS_ARB*: GLenum = GLenum(0x88B5)
  GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB*: GLenum = GLenum(0x88B6)
  GL_PROGRAM_ALU_INSTRUCTIONS_ARB*: GLenum = GLenum(0x8805)
  GL_PROGRAM_TEX_INSTRUCTIONS_ARB*: GLenum = GLenum(0x8806)
  GL_PROGRAM_TEX_INDIRECTIONS_ARB*: GLenum = GLenum(0x8807)
  GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB*: GLenum = GLenum(0x8808)
  GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB*: GLenum = GLenum(0x8809)
  GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB*: GLenum = GLenum(0x880A)
  GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB*: GLenum = GLenum(0x880B)
  GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB*: GLenum = GLenum(0x880C)
  GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB*: GLenum = GLenum(0x880D)
  GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB*: GLenum = GLenum(0x880E)
  GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB*: GLenum = GLenum(0x880F)
  GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB*: GLenum = GLenum(0x8810)
  GL_PROGRAM_STRING_ARB*: GLenum = GLenum(0x8628)
  GL_PROGRAM_ERROR_POSITION_ARB*: GLenum = GLenum(0x864B)
  GL_CURRENT_MATRIX_ARB*: GLenum = GLenum(0x8641)
  GL_TRANSPOSE_CURRENT_MATRIX_ARB*: GLenum = GLenum(0x88B7)
  GL_CURRENT_MATRIX_STACK_DEPTH_ARB*: GLenum = GLenum(0x8640)
  GL_MAX_PROGRAM_MATRICES_ARB*: GLenum = GLenum(0x862F)
  GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB*: GLenum = GLenum(0x862E)
  GL_MAX_TEXTURE_COORDS_ARB*: GLenum = GLenum(0x8871)
  GL_MAX_TEXTURE_IMAGE_UNITS_ARB*: GLenum = GLenum(0x8872)
  GL_PROGRAM_ERROR_STRING_ARB*: GLenum = GLenum(0x8874)
  GL_MATRIX0_ARB*: GLenum = GLenum(0x88C0)
  GL_MATRIX1_ARB*: GLenum = GLenum(0x88C1)
  GL_MATRIX2_ARB*: GLenum = GLenum(0x88C2)
  GL_MATRIX3_ARB*: GLenum = GLenum(0x88C3)
  GL_MATRIX4_ARB*: GLenum = GLenum(0x88C4)
  GL_MATRIX5_ARB*: GLenum = GLenum(0x88C5)
  GL_MATRIX6_ARB*: GLenum = GLenum(0x88C6)
  GL_MATRIX7_ARB*: GLenum = GLenum(0x88C7)
  GL_MATRIX8_ARB*: GLenum = GLenum(0x88C8)
  GL_MATRIX9_ARB*: GLenum = GLenum(0x88C9)
  GL_MATRIX10_ARB*: GLenum = GLenum(0x88CA)
  GL_MATRIX11_ARB*: GLenum = GLenum(0x88CB)
  GL_MATRIX12_ARB*: GLenum = GLenum(0x88CC)
  GL_MATRIX13_ARB*: GLenum = GLenum(0x88CD)
  GL_MATRIX14_ARB*: GLenum = GLenum(0x88CE)
  GL_MATRIX15_ARB*: GLenum = GLenum(0x88CF)
  GL_MATRIX16_ARB*: GLenum = GLenum(0x88D0)
  GL_MATRIX17_ARB*: GLenum = GLenum(0x88D1)
  GL_MATRIX18_ARB*: GLenum = GLenum(0x88D2)
  GL_MATRIX19_ARB*: GLenum = GLenum(0x88D3)
  GL_MATRIX20_ARB*: GLenum = GLenum(0x88D4)
  GL_MATRIX21_ARB*: GLenum = GLenum(0x88D5)
  GL_MATRIX22_ARB*: GLenum = GLenum(0x88D6)
  GL_MATRIX23_ARB*: GLenum = GLenum(0x88D7)
  GL_MATRIX24_ARB*: GLenum = GLenum(0x88D8)
  GL_MATRIX25_ARB*: GLenum = GLenum(0x88D9)
  GL_MATRIX26_ARB*: GLenum = GLenum(0x88DA)
  GL_MATRIX27_ARB*: GLenum = GLenum(0x88DB)
  GL_MATRIX28_ARB*: GLenum = GLenum(0x88DC)
  GL_MATRIX29_ARB*: GLenum = GLenum(0x88DD)
  GL_MATRIX30_ARB*: GLenum = GLenum(0x88DE)
  GL_MATRIX31_ARB*: GLenum = GLenum(0x88DF)

  GLAD_GL_ARB_fragment_program_shadow*: bool

  GLAD_GL_ARB_fragment_shader*: bool
  GL_FRAGMENT_SHADER_ARB*: GLenum = GLenum(0x8B30)
  GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB*: GLenum = GLenum(0x8B49)
  GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB*: GLenum = GLenum(0x8B8B)

  GLAD_GL_ARB_multisample*: bool
  GL_MULTISAMPLE_ARB*: GLenum = GLenum(0x809D)
  GL_SAMPLE_ALPHA_TO_COVERAGE_ARB*: GLenum = GLenum(0x809E)
  GL_SAMPLE_ALPHA_TO_ONE_ARB*: GLenum = GLenum(0x809F)
  GL_SAMPLE_COVERAGE_ARB*: GLenum = GLenum(0x80A0)
  GL_SAMPLE_BUFFERS_ARB*: GLenum = GLenum(0x80A8)
  GL_SAMPLES_ARB*: GLenum = GLenum(0x80A9)
  GL_SAMPLE_COVERAGE_VALUE_ARB*: GLenum = GLenum(0x80AA)
  GL_SAMPLE_COVERAGE_INVERT_ARB*: GLenum = GLenum(0x80AB)
  GL_MULTISAMPLE_BIT_ARB*: GLenum = GLenum(0x20000000)

  GLAD_GL_ARB_multitexture*: bool
  GL_TEXTURE0_ARB*: GLenum = GLenum(0x84C0)
  GL_TEXTURE1_ARB*: GLenum = GLenum(0x84C1)
  GL_TEXTURE2_ARB*: GLenum = GLenum(0x84C2)
  GL_TEXTURE3_ARB*: GLenum = GLenum(0x84C3)
  GL_TEXTURE4_ARB*: GLenum = GLenum(0x84C4)
  GL_TEXTURE5_ARB*: GLenum = GLenum(0x84C5)
  GL_TEXTURE6_ARB*: GLenum = GLenum(0x84C6)
  GL_TEXTURE7_ARB*: GLenum = GLenum(0x84C7)
  GL_TEXTURE8_ARB*: GLenum = GLenum(0x84C8)
  GL_TEXTURE9_ARB*: GLenum = GLenum(0x84C9)
  GL_TEXTURE10_ARB*: GLenum = GLenum(0x84CA)
  GL_TEXTURE11_ARB*: GLenum = GLenum(0x84CB)
  GL_TEXTURE12_ARB*: GLenum = GLenum(0x84CC)
  GL_TEXTURE13_ARB*: GLenum = GLenum(0x84CD)
  GL_TEXTURE14_ARB*: GLenum = GLenum(0x84CE)
  GL_TEXTURE15_ARB*: GLenum = GLenum(0x84CF)
  GL_TEXTURE16_ARB*: GLenum = GLenum(0x84D0)
  GL_TEXTURE17_ARB*: GLenum = GLenum(0x84D1)
  GL_TEXTURE18_ARB*: GLenum = GLenum(0x84D2)
  GL_TEXTURE19_ARB*: GLenum = GLenum(0x84D3)
  GL_TEXTURE20_ARB*: GLenum = GLenum(0x84D4)
  GL_TEXTURE21_ARB*: GLenum = GLenum(0x84D5)
  GL_TEXTURE22_ARB*: GLenum = GLenum(0x84D6)
  GL_TEXTURE23_ARB*: GLenum = GLenum(0x84D7)
  GL_TEXTURE24_ARB*: GLenum = GLenum(0x84D8)
  GL_TEXTURE25_ARB*: GLenum = GLenum(0x84D9)
  GL_TEXTURE26_ARB*: GLenum = GLenum(0x84DA)
  GL_TEXTURE27_ARB*: GLenum = GLenum(0x84DB)
  GL_TEXTURE28_ARB*: GLenum = GLenum(0x84DC)
  GL_TEXTURE29_ARB*: GLenum = GLenum(0x84DD)
  GL_TEXTURE30_ARB*: GLenum = GLenum(0x84DE)
  GL_TEXTURE31_ARB*: GLenum = GLenum(0x84DF)
  GL_ACTIVE_TEXTURE_ARB*: GLenum = GLenum(0x84E0)
  GL_CLIENT_ACTIVE_TEXTURE_ARB*: GLenum = GLenum(0x84E1)
  GL_MAX_TEXTURE_UNITS_ARB*: GLenum = GLenum(0x84E2)

  GLAD_GL_ARB_shader_texture_lod*: bool

  GLAD_GL_ARB_shadow*: bool
  GL_TEXTURE_COMPARE_MODE_ARB*: GLenum = GLenum(0x884C)
  GL_TEXTURE_COMPARE_FUNC_ARB*: GLenum = GLenum(0x884D)
  GL_COMPARE_R_TO_TEXTURE_ARB*: GLenum = GLenum(0x884E)

  GLAD_GL_ARB_texture_swizzle*: bool
  GL_TEXTURE_SWIZZLE_R*: GLenum = GLenum(0x8E42)
  GL_TEXTURE_SWIZZLE_G*: GLenum = GLenum(0x8E43)
  GL_TEXTURE_SWIZZLE_B*: GLenum = GLenum(0x8E44)
  GL_TEXTURE_SWIZZLE_A*: GLenum = GLenum(0x8E45)
  GL_TEXTURE_SWIZZLE_RGBA*: GLenum = GLenum(0x8E46)

  GLAD_GL_ARB_uniform_buffer_object*: bool
  GL_UNIFORM_BUFFER*: GLenum = GLenum(0x8A11)
  GL_UNIFORM_BUFFER_BINDING*: GLenum = GLenum(0x8A28)
  GL_UNIFORM_BUFFER_START*: GLenum = GLenum(0x8A29)
  GL_UNIFORM_BUFFER_SIZE*: GLenum = GLenum(0x8A2A)
  GL_MAX_VERTEX_UNIFORM_BLOCKS*: GLenum = GLenum(0x8A2B)
  GL_MAX_GEOMETRY_UNIFORM_BLOCKS*: GLenum = GLenum(0x8A2C)
  GL_MAX_FRAGMENT_UNIFORM_BLOCKS*: GLenum = GLenum(0x8A2D)
  GL_MAX_COMBINED_UNIFORM_BLOCKS*: GLenum = GLenum(0x8A2E)
  GL_MAX_UNIFORM_BUFFER_BINDINGS*: GLenum = GLenum(0x8A2F)
  GL_MAX_UNIFORM_BLOCK_SIZE*: GLenum = GLenum(0x8A30)
  GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS*: GLenum = GLenum(0x8A31)
  GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS*: GLenum = GLenum(0x8A32)
  GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS*: GLenum = GLenum(0x8A33)
  GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT*: GLenum = GLenum(0x8A34)
  GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH*: GLenum = GLenum(0x8A35)
  GL_ACTIVE_UNIFORM_BLOCKS*: GLenum = GLenum(0x8A36)
  GL_UNIFORM_TYPE*: GLenum = GLenum(0x8A37)
  GL_UNIFORM_SIZE*: GLenum = GLenum(0x8A38)
  GL_UNIFORM_NAME_LENGTH*: GLenum = GLenum(0x8A39)
  GL_UNIFORM_BLOCK_INDEX*: GLenum = GLenum(0x8A3A)
  GL_UNIFORM_OFFSET*: GLenum = GLenum(0x8A3B)
  GL_UNIFORM_ARRAY_STRIDE*: GLenum = GLenum(0x8A3C)
  GL_UNIFORM_MATRIX_STRIDE*: GLenum = GLenum(0x8A3D)
  GL_UNIFORM_IS_ROW_MAJOR*: GLenum = GLenum(0x8A3E)
  GL_UNIFORM_BLOCK_BINDING*: GLenum = GLenum(0x8A3F)
  GL_UNIFORM_BLOCK_DATA_SIZE*: GLenum = GLenum(0x8A40)
  GL_UNIFORM_BLOCK_NAME_LENGTH*: GLenum = GLenum(0x8A41)
  GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS*: GLenum = GLenum(0x8A42)
  GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES*: GLenum = GLenum(0x8A43)
  GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER*: GLenum = GLenum(0x8A44)
  GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER*: GLenum = GLenum(0x8A45)
  GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER*: GLenum = GLenum(0x8A46)

  GLAD_GL_ARB_vertex_attrib_binding*: bool
  GL_VERTEX_ATTRIB_BINDING*: GLenum = GLenum(0x82D4)
  GL_VERTEX_ATTRIB_RELATIVE_OFFSET*: GLenum = GLenum(0x82D5)
  GL_VERTEX_BINDING_DIVISOR*: GLenum = GLenum(0x82D6)
  GL_VERTEX_BINDING_OFFSET*: GLenum = GLenum(0x82D7)
  GL_VERTEX_BINDING_STRIDE*: GLenum = GLenum(0x82D8)
  GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET*: GLenum = GLenum(0x82D9)
  GL_MAX_VERTEX_ATTRIB_BINDINGS*: GLenum = GLenum(0x82DA)

  GLAD_GL_ARB_vertex_blend*: bool
  GL_MAX_VERTEX_UNITS_ARB*: GLenum = GLenum(0x86A4)
  GL_ACTIVE_VERTEX_UNITS_ARB*: GLenum = GLenum(0x86A5)
  GL_WEIGHT_SUM_UNITY_ARB*: GLenum = GLenum(0x86A6)
  GL_VERTEX_BLEND_ARB*: GLenum = GLenum(0x86A7)
  GL_CURRENT_WEIGHT_ARB*: GLenum = GLenum(0x86A8)
  GL_WEIGHT_ARRAY_TYPE_ARB*: GLenum = GLenum(0x86A9)
  GL_WEIGHT_ARRAY_STRIDE_ARB*: GLenum = GLenum(0x86AA)
  GL_WEIGHT_ARRAY_SIZE_ARB*: GLenum = GLenum(0x86AB)
  GL_WEIGHT_ARRAY_POINTER_ARB*: GLenum = GLenum(0x86AC)
  GL_WEIGHT_ARRAY_ARB*: GLenum = GLenum(0x86AD)
  GL_MODELVIEW0_ARB*: GLenum = GLenum(0x1700)
  GL_MODELVIEW1_ARB*: GLenum = GLenum(0x850A)
  GL_MODELVIEW2_ARB*: GLenum = GLenum(0x8722)
  GL_MODELVIEW3_ARB*: GLenum = GLenum(0x8723)
  GL_MODELVIEW4_ARB*: GLenum = GLenum(0x8724)
  GL_MODELVIEW5_ARB*: GLenum = GLenum(0x8725)
  GL_MODELVIEW6_ARB*: GLenum = GLenum(0x8726)
  GL_MODELVIEW7_ARB*: GLenum = GLenum(0x8727)
  GL_MODELVIEW8_ARB*: GLenum = GLenum(0x8728)
  GL_MODELVIEW9_ARB*: GLenum = GLenum(0x8729)
  GL_MODELVIEW10_ARB*: GLenum = GLenum(0x872A)
  GL_MODELVIEW11_ARB*: GLenum = GLenum(0x872B)
  GL_MODELVIEW12_ARB*: GLenum = GLenum(0x872C)
  GL_MODELVIEW13_ARB*: GLenum = GLenum(0x872D)
  GL_MODELVIEW14_ARB*: GLenum = GLenum(0x872E)
  GL_MODELVIEW15_ARB*: GLenum = GLenum(0x872F)
  GL_MODELVIEW16_ARB*: GLenum = GLenum(0x8730)
  GL_MODELVIEW17_ARB*: GLenum = GLenum(0x8731)
  GL_MODELVIEW18_ARB*: GLenum = GLenum(0x8732)
  GL_MODELVIEW19_ARB*: GLenum = GLenum(0x8733)
  GL_MODELVIEW20_ARB*: GLenum = GLenum(0x8734)
  GL_MODELVIEW21_ARB*: GLenum = GLenum(0x8735)
  GL_MODELVIEW22_ARB*: GLenum = GLenum(0x8736)
  GL_MODELVIEW23_ARB*: GLenum = GLenum(0x8737)
  GL_MODELVIEW24_ARB*: GLenum = GLenum(0x8738)
  GL_MODELVIEW25_ARB*: GLenum = GLenum(0x8739)
  GL_MODELVIEW26_ARB*: GLenum = GLenum(0x873A)
  GL_MODELVIEW27_ARB*: GLenum = GLenum(0x873B)
  GL_MODELVIEW28_ARB*: GLenum = GLenum(0x873C)
  GL_MODELVIEW29_ARB*: GLenum = GLenum(0x873D)
  GL_MODELVIEW30_ARB*: GLenum = GLenum(0x873E)
  GL_MODELVIEW31_ARB*: GLenum = GLenum(0x873F)

  GLAD_GL_ARB_vertex_program*: bool
  GL_COLOR_SUM_ARB*: GLenum = GLenum(0x8458)
  GL_VERTEX_PROGRAM_ARB*: GLenum = GLenum(0x8620)
  GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB*: GLenum = GLenum(0x8622)
  GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB*: GLenum = GLenum(0x8623)
  GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB*: GLenum = GLenum(0x8624)
  GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB*: GLenum = GLenum(0x8625)
  GL_CURRENT_VERTEX_ATTRIB_ARB*: GLenum = GLenum(0x8626)
  GL_VERTEX_PROGRAM_POINT_SIZE_ARB*: GLenum = GLenum(0x8642)
  GL_VERTEX_PROGRAM_TWO_SIDE_ARB*: GLenum = GLenum(0x8643)
  GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB*: GLenum = GLenum(0x8645)
  GL_MAX_VERTEX_ATTRIBS_ARB*: GLenum = GLenum(0x8869)
  GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB*: GLenum = GLenum(0x886A)
  GL_PROGRAM_ADDRESS_REGISTERS_ARB*: GLenum = GLenum(0x88B0)
  GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB*: GLenum = GLenum(0x88B1)
  GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB*: GLenum = GLenum(0x88B2)
  GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB*: GLenum = GLenum(0x88B3)

  GLAD_GL_ARB_vertex_shader*: bool
  GL_VERTEX_SHADER_ARB*: GLenum = GLenum(0x8B31)
  GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB*: GLenum = GLenum(0x8B4A)
  GL_MAX_VARYING_FLOATS_ARB*: GLenum = GLenum(0x8B4B)
  GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB*: GLenum = GLenum(0x8B4C)
  GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB*: GLenum = GLenum(0x8B4D)
  GL_OBJECT_ACTIVE_ATTRIBUTES_ARB*: GLenum = GLenum(0x8B89)
  GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB*: GLenum = GLenum(0x8B8A)
  GL_FLOAT_VEC2_ARB*: GLenum = GLenum(0x8B50)
  GL_FLOAT_VEC3_ARB*: GLenum = GLenum(0x8B51)
  GL_FLOAT_VEC4_ARB*: GLenum = GLenum(0x8B52)
  GL_FLOAT_MAT2_ARB*: GLenum = GLenum(0x8B5A)
  GL_FLOAT_MAT3_ARB*: GLenum = GLenum(0x8B5B)
  GL_FLOAT_MAT4_ARB*: GLenum = GLenum(0x8B5C)

  GLAD_GL_EXT_shadow_funcs*: bool

  glDrawBuffersARB*: proc (n: GLsizei, bufs: ptr GLenum) {.cdecl, gcsafe.}
  glBlendEquationiARB*: proc (buf: GLuint, mode: GLenum) {.cdecl, gcsafe.}
  glBlendEquationSeparateiARB*: proc (buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) {.cdecl, gcsafe.}
  glBlendFunciARB*: proc (buf: GLuint, src: GLenum, dst: GLenum) {.cdecl, gcsafe.}
  glBlendFuncSeparateiARB*: proc (buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) {.cdecl, gcsafe.}
  glDrawElementsBaseVertex*: proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint) {.cdecl, gcsafe.}
  glDrawRangeElementsBaseVertex*: proc (mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint) {.cdecl, gcsafe.}
  glDrawElementsInstancedBaseVertex*: proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, basevertex: GLint) {.cdecl, gcsafe.}
  glMultiDrawElementsBaseVertex*: proc (mode: GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, drawcount: GLsizei, basevertex: ptr GLint) {.cdecl, gcsafe.}
  glProgramStringARB*: proc (target: GLenum, format: GLenum, len: GLsizei, string: pointer) {.cdecl, gcsafe.}
  glBindProgramARB*: proc (target: GLenum, program: GLuint) {.cdecl, gcsafe.}
  glDeleteProgramsARB*: proc (n: GLsizei, programs: ptr GLuint) {.cdecl, gcsafe.}
  glGenProgramsARB*: proc (n: GLsizei, programs: ptr GLuint) {.cdecl, gcsafe.}
  glProgramEnvParameter4dARB*: proc (target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.cdecl, gcsafe.}
  glProgramEnvParameter4dvARB*: proc (target: GLenum, index: GLuint, params: ptr GLdouble) {.cdecl, gcsafe.}
  glProgramEnvParameter4fARB*: proc (target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.cdecl, gcsafe.}
  glProgramEnvParameter4fvARB*: proc (target: GLenum, index: GLuint, params: ptr GLfloat) {.cdecl, gcsafe.}
  glProgramLocalParameter4dARB*: proc (target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.cdecl, gcsafe.}
  glProgramLocalParameter4dvARB*: proc (target: GLenum, index: GLuint, params: ptr GLdouble) {.cdecl, gcsafe.}
  glProgramLocalParameter4fARB*: proc (target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.cdecl, gcsafe.}
  glProgramLocalParameter4fvARB*: proc (target: GLenum, index: GLuint, params: ptr GLfloat) {.cdecl, gcsafe.}
  glGetProgramEnvParameterdvARB*: proc (target: GLenum, index: GLuint, params: ptr GLdouble) {.cdecl, gcsafe.}
  glGetProgramEnvParameterfvARB*: proc (target: GLenum, index: GLuint, params: ptr GLfloat) {.cdecl, gcsafe.}
  glGetProgramLocalParameterdvARB*: proc (target: GLenum, index: GLuint, params: ptr GLdouble) {.cdecl, gcsafe.}
  glGetProgramLocalParameterfvARB*: proc (target: GLenum, index: GLuint, params: ptr GLfloat) {.cdecl, gcsafe.}
  glGetProgramivARB*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetProgramStringARB*: proc (target: GLenum, pname: GLenum, string: pointer) {.cdecl, gcsafe.}
  glIsProgramARB*: proc (program: GLuint): GLboolean {.cdecl, gcsafe.}
  glSampleCoverageARB*: proc (value: GLfloat, invert: GLboolean) {.cdecl, gcsafe.}
  glActiveTextureARB*: proc (texture: GLenum) {.cdecl, gcsafe.}
  glClientActiveTextureARB*: proc (texture: GLenum) {.cdecl, gcsafe.}
  glMultiTexCoord1dARB*: proc (target: GLenum, s: GLdouble) {.cdecl, gcsafe.}
  glMultiTexCoord1dvARB*: proc (target: GLenum, v: ptr GLdouble) {.cdecl, gcsafe.}
  glMultiTexCoord1fARB*: proc (target: GLenum, s: GLfloat) {.cdecl, gcsafe.}
  glMultiTexCoord1fvARB*: proc (target: GLenum, v: ptr GLfloat) {.cdecl, gcsafe.}
  glMultiTexCoord1iARB*: proc (target: GLenum, s: GLint) {.cdecl, gcsafe.}
  glMultiTexCoord1ivARB*: proc (target: GLenum, v: ptr GLint) {.cdecl, gcsafe.}
  glMultiTexCoord1sARB*: proc (target: GLenum, s: GLshort) {.cdecl, gcsafe.}
  glMultiTexCoord1svARB*: proc (target: GLenum, v: ptr GLshort) {.cdecl, gcsafe.}
  glMultiTexCoord2dARB*: proc (target: GLenum, s: GLdouble, t: GLdouble) {.cdecl, gcsafe.}
  glMultiTexCoord2dvARB*: proc (target: GLenum, v: ptr GLdouble) {.cdecl, gcsafe.}
  glMultiTexCoord2fARB*: proc (target: GLenum, s: GLfloat, t: GLfloat) {.cdecl, gcsafe.}
  glMultiTexCoord2fvARB*: proc (target: GLenum, v: ptr GLfloat) {.cdecl, gcsafe.}
  glMultiTexCoord2iARB*: proc (target: GLenum, s: GLint, t: GLint) {.cdecl, gcsafe.}
  glMultiTexCoord2ivARB*: proc (target: GLenum, v: ptr GLint) {.cdecl, gcsafe.}
  glMultiTexCoord2sARB*: proc (target: GLenum, s: GLshort, t: GLshort) {.cdecl, gcsafe.}
  glMultiTexCoord2svARB*: proc (target: GLenum, v: ptr GLshort) {.cdecl, gcsafe.}
  glMultiTexCoord3dARB*: proc (target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) {.cdecl, gcsafe.}
  glMultiTexCoord3dvARB*: proc (target: GLenum, v: ptr GLdouble) {.cdecl, gcsafe.}
  glMultiTexCoord3fARB*: proc (target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) {.cdecl, gcsafe.}
  glMultiTexCoord3fvARB*: proc (target: GLenum, v: ptr GLfloat) {.cdecl, gcsafe.}
  glMultiTexCoord3iARB*: proc (target: GLenum, s: GLint, t: GLint, r: GLint) {.cdecl, gcsafe.}
  glMultiTexCoord3ivARB*: proc (target: GLenum, v: ptr GLint) {.cdecl, gcsafe.}
  glMultiTexCoord3sARB*: proc (target: GLenum, s: GLshort, t: GLshort, r: GLshort) {.cdecl, gcsafe.}
  glMultiTexCoord3svARB*: proc (target: GLenum, v: ptr GLshort) {.cdecl, gcsafe.}
  glMultiTexCoord4dARB*: proc (target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) {.cdecl, gcsafe.}
  glMultiTexCoord4dvARB*: proc (target: GLenum, v: ptr GLdouble) {.cdecl, gcsafe.}
  glMultiTexCoord4fARB*: proc (target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) {.cdecl, gcsafe.}
  glMultiTexCoord4fvARB*: proc (target: GLenum, v: ptr GLfloat) {.cdecl, gcsafe.}
  glMultiTexCoord4iARB*: proc (target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) {.cdecl, gcsafe.}
  glMultiTexCoord4ivARB*: proc (target: GLenum, v: ptr GLint) {.cdecl, gcsafe.}
  glMultiTexCoord4sARB*: proc (target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) {.cdecl, gcsafe.}
  glMultiTexCoord4svARB*: proc (target: GLenum, v: ptr GLshort) {.cdecl, gcsafe.}
  glGetUniformIndices*: proc (program: GLuint, uniformCount: GLsizei, uniformNames: cstringArray, uniformIndices: ptr GLuint) {.cdecl, gcsafe.}
  glGetActiveUniformsiv*: proc (program: GLuint, uniformCount: GLsizei, uniformIndices: ptr GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetActiveUniformName*: proc (program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: ptr GLsizei, uniformName: cstring) {.cdecl, gcsafe.}
  glGetUniformBlockIndex*: proc (program: GLuint, uniformBlockName: cstring): GLuint {.cdecl, gcsafe.}
  glGetActiveUniformBlockiv*: proc (program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetActiveUniformBlockName*: proc (program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: ptr GLsizei, uniformBlockName: cstring) {.cdecl, gcsafe.}
  glUniformBlockBinding*: proc (program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) {.cdecl, gcsafe.}
  glBindBufferRange*: proc (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.cdecl, gcsafe.}
  glBindBufferBase*: proc (target: GLenum, index: GLuint, buffer: GLuint) {.cdecl, gcsafe.}
  glGetIntegeri_v*: proc (target: GLenum, index: GLuint, data: ptr GLint) {.cdecl, gcsafe.}
  glBindVertexBuffer*: proc (bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) {.cdecl, gcsafe.}
  glVertexAttribFormat*: proc (attribindex: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, relativeoffset: GLuint) {.cdecl, gcsafe.}
  glVertexAttribIFormat*: proc (attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint) {.cdecl, gcsafe.}
  glVertexAttribLFormat*: proc (attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint) {.cdecl, gcsafe.}
  glVertexAttribBinding*: proc (attribindex: GLuint, bindingindex: GLuint) {.cdecl, gcsafe.}
  glVertexBindingDivisor*: proc (bindingindex: GLuint, divisor: GLuint) {.cdecl, gcsafe.}
  glWeightbvARB*: proc (size: GLint, weights: ptr GLbyte) {.cdecl, gcsafe.}
  glWeightsvARB*: proc (size: GLint, weights: ptr GLshort) {.cdecl, gcsafe.}
  glWeightivARB*: proc (size: GLint, weights: ptr GLint) {.cdecl, gcsafe.}
  glWeightfvARB*: proc (size: GLint, weights: ptr GLfloat) {.cdecl, gcsafe.}
  glWeightdvARB*: proc (size: GLint, weights: ptr GLdouble) {.cdecl, gcsafe.}
  glWeightubvARB*: proc (size: GLint, weights: ptr GLubyte) {.cdecl, gcsafe.}
  glWeightusvARB*: proc (size: GLint, weights: ptr GLushort) {.cdecl, gcsafe.}
  glWeightuivARB*: proc (size: GLint, weights: ptr GLuint) {.cdecl, gcsafe.}
  glWeightPointerARB*: proc (size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}
  glVertexBlendARB*: proc (count: GLint) {.cdecl, gcsafe.}
  glVertexAttrib1dARB*: proc (index: GLuint, x: GLdouble) {.cdecl, gcsafe.}
  glVertexAttrib1dvARB*: proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}
  glVertexAttrib1fARB*: proc (index: GLuint, x: GLfloat) {.cdecl, gcsafe.}
  glVertexAttrib1fvARB*: proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}
  glVertexAttrib1sARB*: proc (index: GLuint, x: GLshort) {.cdecl, gcsafe.}
  glVertexAttrib1svARB*: proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}
  glVertexAttrib2dARB*: proc (index: GLuint, x: GLdouble, y: GLdouble) {.cdecl, gcsafe.}
  glVertexAttrib2dvARB*: proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}
  glVertexAttrib2fARB*: proc (index: GLuint, x: GLfloat, y: GLfloat) {.cdecl, gcsafe.}
  glVertexAttrib2fvARB*: proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}
  glVertexAttrib2sARB*: proc (index: GLuint, x: GLshort, y: GLshort) {.cdecl, gcsafe.}
  glVertexAttrib2svARB*: proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}
  glVertexAttrib3dARB*: proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}
  glVertexAttrib3dvARB*: proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}
  glVertexAttrib3fARB*: proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}
  glVertexAttrib3fvARB*: proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}
  glVertexAttrib3sARB*: proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort) {.cdecl, gcsafe.}
  glVertexAttrib3svARB*: proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}
  glVertexAttrib4NbvARB*: proc (index: GLuint, v: ptr GLbyte) {.cdecl, gcsafe.}
  glVertexAttrib4NivARB*: proc (index: GLuint, v: ptr GLint) {.cdecl, gcsafe.}
  glVertexAttrib4NsvARB*: proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}
  glVertexAttrib4NubARB*: proc (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) {.cdecl, gcsafe.}
  glVertexAttrib4NubvARB*: proc (index: GLuint, v: ptr GLubyte) {.cdecl, gcsafe.}
  glVertexAttrib4NuivARB*: proc (index: GLuint, v: ptr GLuint) {.cdecl, gcsafe.}
  glVertexAttrib4NusvARB*: proc (index: GLuint, v: ptr GLushort) {.cdecl, gcsafe.}
  glVertexAttrib4bvARB*: proc (index: GLuint, v: ptr GLbyte) {.cdecl, gcsafe.}
  glVertexAttrib4dARB*: proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.cdecl, gcsafe.}
  glVertexAttrib4dvARB*: proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}
  glVertexAttrib4fARB*: proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.cdecl, gcsafe.}
  glVertexAttrib4fvARB*: proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}
  glVertexAttrib4ivARB*: proc (index: GLuint, v: ptr GLint) {.cdecl, gcsafe.}
  glVertexAttrib4sARB*: proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) {.cdecl, gcsafe.}
  glVertexAttrib4svARB*: proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}
  glVertexAttrib4ubvARB*: proc (index: GLuint, v: ptr GLubyte) {.cdecl, gcsafe.}
  glVertexAttrib4uivARB*: proc (index: GLuint, v: ptr GLuint) {.cdecl, gcsafe.}
  glVertexAttrib4usvARB*: proc (index: GLuint, v: ptr GLushort) {.cdecl, gcsafe.}
  glVertexAttribPointerARB*: proc (index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}
  glEnableVertexAttribArrayARB*: proc (index: GLuint) {.cdecl, gcsafe.}
  glDisableVertexAttribArrayARB*: proc (index: GLuint) {.cdecl, gcsafe.}
  glGetVertexAttribdvARB*: proc (index: GLuint, pname: GLenum, params: ptr GLdouble) {.cdecl, gcsafe.}
  glGetVertexAttribfvARB*: proc (index: GLuint, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glGetVertexAttribivARB*: proc (index: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetVertexAttribPointervARB*: proc (index: GLuint, pname: GLenum, pointer: ptr pointer) {.cdecl, gcsafe.}
  glBindAttribLocationARB*: proc (programObj: GLhandleARB, index: GLuint, name: ptr GLcharARB) {.cdecl, gcsafe.}
  glGetActiveAttribARB*: proc (programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: ptr GLcharARB) {.cdecl, gcsafe.}
  glGetAttribLocationARB*: proc (programObj: GLhandleARB, name: ptr GLcharARB): GLint {.cdecl, gcsafe.}


proc hasExt(extname: string): bool =
  if extname.len == 0:
    return false

  var extensions = $cast[cstring](glGetString(GL_EXTENSIONS))
  if extensions.len == 0:
    return false

  var
    loc, terminatorLoc: int
    terminator: char

  while true:
    loc = extensions.find(extname)
    if loc < 0:
      return false

    terminatorLoc = loc + extname.len
    terminator = extensions[terminatorLoc]

    if (loc == 0 or extensions[loc - 1] == ' ') and
       (terminator == ' ' or terminator == '\0'):
      return true

    extensions = extensions[terminatorLoc..^1]


proc load_GL_VERSION_1_0(load: proc) =
  if not GLAD_GL_VERSION_1_0: return

  glCullFace = cast[proc (mode: GLenum) {.cdecl, gcsafe.}](load("glCullFace"))
  glFrontFace = cast[proc (mode: GLenum) {.cdecl, gcsafe.}](load("glFrontFace"))
  glHint = cast[proc (target: GLenum, mode: GLenum) {.cdecl, gcsafe.}](load("glHint"))
  glLineWidth = cast[proc (width: GLfloat) {.cdecl, gcsafe.}](load("glLineWidth"))
  glPointSize = cast[proc (size: GLfloat) {.cdecl, gcsafe.}](load("glPointSize"))
  glPolygonMode = cast[proc (face: GLenum, mode: GLenum) {.cdecl, gcsafe.}](load("glPolygonMode"))
  glScissor = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}](load("glScissor"))
  glTexParameterf = cast[proc (target: GLenum, pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}](load("glTexParameterf"))
  glTexParameterfv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glTexParameterfv"))
  glTexParameteri = cast[proc (target: GLenum, pname: GLenum, param: GLint) {.cdecl, gcsafe.}](load("glTexParameteri"))
  glTexParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glTexParameteriv"))
  glTexImage1D = cast[proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}](load("glTexImage1D"))
  glTexImage2D = cast[proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}](load("glTexImage2D"))
  glDrawBuffer = cast[proc (buf: GLenum) {.cdecl, gcsafe.}](load("glDrawBuffer"))
  glClear = cast[proc (mask: GLbitfield) {.cdecl, gcsafe.}](load("glClear"))
  glClearColor = cast[proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl, gcsafe.}](load("glClearColor"))
  glClearStencil = cast[proc (s: GLint) {.cdecl, gcsafe.}](load("glClearStencil"))
  glClearDepth = cast[proc (depth: GLdouble) {.cdecl, gcsafe.}](load("glClearDepth"))
  glStencilMask = cast[proc (mask: GLuint) {.cdecl, gcsafe.}](load("glStencilMask"))
  glColorMask = cast[proc (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) {.cdecl, gcsafe.}](load("glColorMask"))
  glDepthMask = cast[proc (flag: GLboolean) {.cdecl, gcsafe.}](load("glDepthMask"))
  glDisable = cast[proc (cap: GLenum) {.cdecl, gcsafe.}](load("glDisable"))
  glEnable = cast[proc (cap: GLenum) {.cdecl, gcsafe.}](load("glEnable"))
  glFinish = cast[proc () {.cdecl, gcsafe.}](load("glFinish"))
  glFlush = cast[proc () {.cdecl, gcsafe.}](load("glFlush"))
  glBlendFunc = cast[proc (sfactor: GLenum, dfactor: GLenum) {.cdecl, gcsafe.}](load("glBlendFunc"))
  glLogicOp = cast[proc (opcode: GLenum) {.cdecl, gcsafe.}](load("glLogicOp"))
  glStencilFunc = cast[proc (`func`: GLenum, `ref`: GLint, mask: GLuint) {.cdecl, gcsafe.}](load("glStencilFunc"))
  glStencilOp = cast[proc (fail: GLenum, zfail: GLenum, zpass: GLenum) {.cdecl, gcsafe.}](load("glStencilOp"))
  glDepthFunc = cast[proc (`func`: GLenum) {.cdecl, gcsafe.}](load("glDepthFunc"))
  glPixelStoref = cast[proc (pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}](load("glPixelStoref"))
  glPixelStorei = cast[proc (pname: GLenum, param: GLint) {.cdecl, gcsafe.}](load("glPixelStorei"))
  glReadBuffer = cast[proc (src: GLenum) {.cdecl, gcsafe.}](load("glReadBuffer"))
  glReadPixels = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}](load("glReadPixels"))
  glGetBooleanv = cast[proc (pname: GLenum, data: ptr GLboolean) {.cdecl, gcsafe.}](load("glGetBooleanv"))
  glGetDoublev = cast[proc (pname: GLenum, data: ptr GLdouble) {.cdecl, gcsafe.}](load("glGetDoublev"))
  glGetError = cast[proc (): GLenum {.cdecl, gcsafe.}](load("glGetError"))
  glGetFloatv = cast[proc (pname: GLenum, data: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetFloatv"))
  glGetIntegerv = cast[proc (pname: GLenum, data: ptr GLint) {.cdecl, gcsafe.}](load("glGetIntegerv"))
  glGetString = cast[proc (name: GLenum): ptr GLubyte {.cdecl, gcsafe.}](load("glGetString"))
  glGetTexImage = cast[proc (target: GLenum, level: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}](load("glGetTexImage"))
  glGetTexParameterfv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetTexParameterfv"))
  glGetTexParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetTexParameteriv"))
  glGetTexLevelParameterfv = cast[proc (target: GLenum, level: GLint, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetTexLevelParameterfv"))
  glGetTexLevelParameteriv = cast[proc (target: GLenum, level: GLint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetTexLevelParameteriv"))
  glIsEnabled = cast[proc (cap: GLenum): GLboolean {.cdecl, gcsafe.}](load("glIsEnabled"))
  glDepthRange = cast[proc (n: GLdouble, f: GLdouble) {.cdecl, gcsafe.}](load("glDepthRange"))
  glViewport = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}](load("glViewport"))
  glNewList = cast[proc (list: GLuint, mode: GLenum) {.cdecl, gcsafe.}](load("glNewList"))
  glEndList = cast[proc () {.cdecl, gcsafe.}](load("glEndList"))
  glCallList = cast[proc (list: GLuint) {.cdecl, gcsafe.}](load("glCallList"))
  glCallLists = cast[proc (n: GLsizei, `type`: GLenum, lists: pointer) {.cdecl, gcsafe.}](load("glCallLists"))
  glDeleteLists = cast[proc (list: GLuint, range: GLsizei) {.cdecl, gcsafe.}](load("glDeleteLists"))
  glGenLists = cast[proc (range: GLsizei): GLuint {.cdecl, gcsafe.}](load("glGenLists"))
  glListBase = cast[proc (base: GLuint) {.cdecl, gcsafe.}](load("glListBase"))
  glBegin = cast[proc (mode: GLenum) {.cdecl, gcsafe.}](load("glBegin"))
  glBitmap = cast[proc (width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: ptr GLubyte) {.cdecl, gcsafe.}](load("glBitmap"))
  glColor3b = cast[proc (red: GLbyte, green: GLbyte, blue: GLbyte) {.cdecl, gcsafe.}](load("glColor3b"))
  glColor3bv = cast[proc (v: ptr GLbyte) {.cdecl, gcsafe.}](load("glColor3bv"))
  glColor3d = cast[proc (red: GLdouble, green: GLdouble, blue: GLdouble) {.cdecl, gcsafe.}](load("glColor3d"))
  glColor3dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glColor3dv"))
  glColor3f = cast[proc (red: GLfloat, green: GLfloat, blue: GLfloat) {.cdecl, gcsafe.}](load("glColor3f"))
  glColor3fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glColor3fv"))
  glColor3i = cast[proc (red: GLint, green: GLint, blue: GLint) {.cdecl, gcsafe.}](load("glColor3i"))
  glColor3iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glColor3iv"))
  glColor3s = cast[proc (red: GLshort, green: GLshort, blue: GLshort) {.cdecl, gcsafe.}](load("glColor3s"))
  glColor3sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glColor3sv"))
  glColor3ub = cast[proc (red: GLubyte, green: GLubyte, blue: GLubyte) {.cdecl, gcsafe.}](load("glColor3ub"))
  glColor3ubv = cast[proc (v: ptr GLubyte) {.cdecl, gcsafe.}](load("glColor3ubv"))
  glColor3ui = cast[proc (red: GLuint, green: GLuint, blue: GLuint) {.cdecl, gcsafe.}](load("glColor3ui"))
  glColor3uiv = cast[proc (v: ptr GLuint) {.cdecl, gcsafe.}](load("glColor3uiv"))
  glColor3us = cast[proc (red: GLushort, green: GLushort, blue: GLushort) {.cdecl, gcsafe.}](load("glColor3us"))
  glColor3usv = cast[proc (v: ptr GLushort) {.cdecl, gcsafe.}](load("glColor3usv"))
  glColor4b = cast[proc (red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte) {.cdecl, gcsafe.}](load("glColor4b"))
  glColor4bv = cast[proc (v: ptr GLbyte) {.cdecl, gcsafe.}](load("glColor4bv"))
  glColor4d = cast[proc (red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble) {.cdecl, gcsafe.}](load("glColor4d"))
  glColor4dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glColor4dv"))
  glColor4f = cast[proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl, gcsafe.}](load("glColor4f"))
  glColor4fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glColor4fv"))
  glColor4i = cast[proc (red: GLint, green: GLint, blue: GLint, alpha: GLint) {.cdecl, gcsafe.}](load("glColor4i"))
  glColor4iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glColor4iv"))
  glColor4s = cast[proc (red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort) {.cdecl, gcsafe.}](load("glColor4s"))
  glColor4sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glColor4sv"))
  glColor4ub = cast[proc (red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte) {.cdecl, gcsafe.}](load("glColor4ub"))
  glColor4ubv = cast[proc (v: ptr GLubyte) {.cdecl, gcsafe.}](load("glColor4ubv"))
  glColor4ui = cast[proc (red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) {.cdecl, gcsafe.}](load("glColor4ui"))
  glColor4uiv = cast[proc (v: ptr GLuint) {.cdecl, gcsafe.}](load("glColor4uiv"))
  glColor4us = cast[proc (red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort) {.cdecl, gcsafe.}](load("glColor4us"))
  glColor4usv = cast[proc (v: ptr GLushort) {.cdecl, gcsafe.}](load("glColor4usv"))
  glEdgeFlag = cast[proc (flag: GLboolean) {.cdecl, gcsafe.}](load("glEdgeFlag"))
  glEdgeFlagv = cast[proc (flag: ptr GLboolean) {.cdecl, gcsafe.}](load("glEdgeFlagv"))
  glEnd = cast[proc () {.cdecl, gcsafe.}](load("glEnd"))
  glIndexd = cast[proc (c: GLdouble) {.cdecl, gcsafe.}](load("glIndexd"))
  glIndexdv = cast[proc (c: ptr GLdouble) {.cdecl, gcsafe.}](load("glIndexdv"))
  glIndexf = cast[proc (c: GLfloat) {.cdecl, gcsafe.}](load("glIndexf"))
  glIndexfv = cast[proc (c: ptr GLfloat) {.cdecl, gcsafe.}](load("glIndexfv"))
  glIndexi = cast[proc (c: GLint) {.cdecl, gcsafe.}](load("glIndexi"))
  glIndexiv = cast[proc (c: ptr GLint) {.cdecl, gcsafe.}](load("glIndexiv"))
  glIndexs = cast[proc (c: GLshort) {.cdecl, gcsafe.}](load("glIndexs"))
  glIndexsv = cast[proc (c: ptr GLshort) {.cdecl, gcsafe.}](load("glIndexsv"))
  glNormal3b = cast[proc (nx: GLbyte, ny: GLbyte, nz: GLbyte) {.cdecl, gcsafe.}](load("glNormal3b"))
  glNormal3bv = cast[proc (v: ptr GLbyte) {.cdecl, gcsafe.}](load("glNormal3bv"))
  glNormal3d = cast[proc (nx: GLdouble, ny: GLdouble, nz: GLdouble) {.cdecl, gcsafe.}](load("glNormal3d"))
  glNormal3dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glNormal3dv"))
  glNormal3f = cast[proc (nx: GLfloat, ny: GLfloat, nz: GLfloat) {.cdecl, gcsafe.}](load("glNormal3f"))
  glNormal3fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glNormal3fv"))
  glNormal3i = cast[proc (nx: GLint, ny: GLint, nz: GLint) {.cdecl, gcsafe.}](load("glNormal3i"))
  glNormal3iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glNormal3iv"))
  glNormal3s = cast[proc (nx: GLshort, ny: GLshort, nz: GLshort) {.cdecl, gcsafe.}](load("glNormal3s"))
  glNormal3sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glNormal3sv"))
  glRasterPos2d = cast[proc (x: GLdouble, y: GLdouble) {.cdecl, gcsafe.}](load("glRasterPos2d"))
  glRasterPos2dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glRasterPos2dv"))
  glRasterPos2f = cast[proc (x: GLfloat, y: GLfloat) {.cdecl, gcsafe.}](load("glRasterPos2f"))
  glRasterPos2fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glRasterPos2fv"))
  glRasterPos2i = cast[proc (x: GLint, y: GLint) {.cdecl, gcsafe.}](load("glRasterPos2i"))
  glRasterPos2iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glRasterPos2iv"))
  glRasterPos2s = cast[proc (x: GLshort, y: GLshort) {.cdecl, gcsafe.}](load("glRasterPos2s"))
  glRasterPos2sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glRasterPos2sv"))
  glRasterPos3d = cast[proc (x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}](load("glRasterPos3d"))
  glRasterPos3dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glRasterPos3dv"))
  glRasterPos3f = cast[proc (x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}](load("glRasterPos3f"))
  glRasterPos3fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glRasterPos3fv"))
  glRasterPos3i = cast[proc (x: GLint, y: GLint, z: GLint) {.cdecl, gcsafe.}](load("glRasterPos3i"))
  glRasterPos3iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glRasterPos3iv"))
  glRasterPos3s = cast[proc (x: GLshort, y: GLshort, z: GLshort) {.cdecl, gcsafe.}](load("glRasterPos3s"))
  glRasterPos3sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glRasterPos3sv"))
  glRasterPos4d = cast[proc (x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.cdecl, gcsafe.}](load("glRasterPos4d"))
  glRasterPos4dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glRasterPos4dv"))
  glRasterPos4f = cast[proc (x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.cdecl, gcsafe.}](load("glRasterPos4f"))
  glRasterPos4fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glRasterPos4fv"))
  glRasterPos4i = cast[proc (x: GLint, y: GLint, z: GLint, w: GLint) {.cdecl, gcsafe.}](load("glRasterPos4i"))
  glRasterPos4iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glRasterPos4iv"))
  glRasterPos4s = cast[proc (x: GLshort, y: GLshort, z: GLshort, w: GLshort) {.cdecl, gcsafe.}](load("glRasterPos4s"))
  glRasterPos4sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glRasterPos4sv"))
  glRectd = cast[proc (x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble) {.cdecl, gcsafe.}](load("glRectd"))
  glRectdv = cast[proc (v1: ptr GLdouble, v2: ptr GLdouble) {.cdecl, gcsafe.}](load("glRectdv"))
  glRectf = cast[proc (x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat) {.cdecl, gcsafe.}](load("glRectf"))
  glRectfv = cast[proc (v1: ptr GLfloat, v2: ptr GLfloat) {.cdecl, gcsafe.}](load("glRectfv"))
  glRecti = cast[proc (x1: GLint, y1: GLint, x2: GLint, y2: GLint) {.cdecl, gcsafe.}](load("glRecti"))
  glRectiv = cast[proc (v1: ptr GLint, v2: ptr GLint) {.cdecl, gcsafe.}](load("glRectiv"))
  glRects = cast[proc (x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort) {.cdecl, gcsafe.}](load("glRects"))
  glRectsv = cast[proc (v1: ptr GLshort, v2: ptr GLshort) {.cdecl, gcsafe.}](load("glRectsv"))
  glTexCoord1d = cast[proc (s: GLdouble) {.cdecl, gcsafe.}](load("glTexCoord1d"))
  glTexCoord1dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glTexCoord1dv"))
  glTexCoord1f = cast[proc (s: GLfloat) {.cdecl, gcsafe.}](load("glTexCoord1f"))
  glTexCoord1fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glTexCoord1fv"))
  glTexCoord1i = cast[proc (s: GLint) {.cdecl, gcsafe.}](load("glTexCoord1i"))
  glTexCoord1iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glTexCoord1iv"))
  glTexCoord1s = cast[proc (s: GLshort) {.cdecl, gcsafe.}](load("glTexCoord1s"))
  glTexCoord1sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glTexCoord1sv"))
  glTexCoord2d = cast[proc (s: GLdouble, t: GLdouble) {.cdecl, gcsafe.}](load("glTexCoord2d"))
  glTexCoord2dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glTexCoord2dv"))
  glTexCoord2f = cast[proc (s: GLfloat, t: GLfloat) {.cdecl, gcsafe.}](load("glTexCoord2f"))
  glTexCoord2fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glTexCoord2fv"))
  glTexCoord2i = cast[proc (s: GLint, t: GLint) {.cdecl, gcsafe.}](load("glTexCoord2i"))
  glTexCoord2iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glTexCoord2iv"))
  glTexCoord2s = cast[proc (s: GLshort, t: GLshort) {.cdecl, gcsafe.}](load("glTexCoord2s"))
  glTexCoord2sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glTexCoord2sv"))
  glTexCoord3d = cast[proc (s: GLdouble, t: GLdouble, r: GLdouble) {.cdecl, gcsafe.}](load("glTexCoord3d"))
  glTexCoord3dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glTexCoord3dv"))
  glTexCoord3f = cast[proc (s: GLfloat, t: GLfloat, r: GLfloat) {.cdecl, gcsafe.}](load("glTexCoord3f"))
  glTexCoord3fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glTexCoord3fv"))
  glTexCoord3i = cast[proc (s: GLint, t: GLint, r: GLint) {.cdecl, gcsafe.}](load("glTexCoord3i"))
  glTexCoord3iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glTexCoord3iv"))
  glTexCoord3s = cast[proc (s: GLshort, t: GLshort, r: GLshort) {.cdecl, gcsafe.}](load("glTexCoord3s"))
  glTexCoord3sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glTexCoord3sv"))
  glTexCoord4d = cast[proc (s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) {.cdecl, gcsafe.}](load("glTexCoord4d"))
  glTexCoord4dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glTexCoord4dv"))
  glTexCoord4f = cast[proc (s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) {.cdecl, gcsafe.}](load("glTexCoord4f"))
  glTexCoord4fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glTexCoord4fv"))
  glTexCoord4i = cast[proc (s: GLint, t: GLint, r: GLint, q: GLint) {.cdecl, gcsafe.}](load("glTexCoord4i"))
  glTexCoord4iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glTexCoord4iv"))
  glTexCoord4s = cast[proc (s: GLshort, t: GLshort, r: GLshort, q: GLshort) {.cdecl, gcsafe.}](load("glTexCoord4s"))
  glTexCoord4sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glTexCoord4sv"))
  glVertex2d = cast[proc (x: GLdouble, y: GLdouble) {.cdecl, gcsafe.}](load("glVertex2d"))
  glVertex2dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glVertex2dv"))
  glVertex2f = cast[proc (x: GLfloat, y: GLfloat) {.cdecl, gcsafe.}](load("glVertex2f"))
  glVertex2fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glVertex2fv"))
  glVertex2i = cast[proc (x: GLint, y: GLint) {.cdecl, gcsafe.}](load("glVertex2i"))
  glVertex2iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glVertex2iv"))
  glVertex2s = cast[proc (x: GLshort, y: GLshort) {.cdecl, gcsafe.}](load("glVertex2s"))
  glVertex2sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glVertex2sv"))
  glVertex3d = cast[proc (x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}](load("glVertex3d"))
  glVertex3dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glVertex3dv"))
  glVertex3f = cast[proc (x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}](load("glVertex3f"))
  glVertex3fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glVertex3fv"))
  glVertex3i = cast[proc (x: GLint, y: GLint, z: GLint) {.cdecl, gcsafe.}](load("glVertex3i"))
  glVertex3iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glVertex3iv"))
  glVertex3s = cast[proc (x: GLshort, y: GLshort, z: GLshort) {.cdecl, gcsafe.}](load("glVertex3s"))
  glVertex3sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glVertex3sv"))
  glVertex4d = cast[proc (x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.cdecl, gcsafe.}](load("glVertex4d"))
  glVertex4dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glVertex4dv"))
  glVertex4f = cast[proc (x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.cdecl, gcsafe.}](load("glVertex4f"))
  glVertex4fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glVertex4fv"))
  glVertex4i = cast[proc (x: GLint, y: GLint, z: GLint, w: GLint) {.cdecl, gcsafe.}](load("glVertex4i"))
  glVertex4iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glVertex4iv"))
  glVertex4s = cast[proc (x: GLshort, y: GLshort, z: GLshort, w: GLshort) {.cdecl, gcsafe.}](load("glVertex4s"))
  glVertex4sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glVertex4sv"))
  glClipPlane = cast[proc (plane: GLenum, equation: ptr GLdouble) {.cdecl, gcsafe.}](load("glClipPlane"))
  glColorMaterial = cast[proc (face: GLenum, mode: GLenum) {.cdecl, gcsafe.}](load("glColorMaterial"))
  glFogf = cast[proc (pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}](load("glFogf"))
  glFogfv = cast[proc (pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glFogfv"))
  glFogi = cast[proc (pname: GLenum, param: GLint) {.cdecl, gcsafe.}](load("glFogi"))
  glFogiv = cast[proc (pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glFogiv"))
  glLightf = cast[proc (light: GLenum, pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}](load("glLightf"))
  glLightfv = cast[proc (light: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glLightfv"))
  glLighti = cast[proc (light: GLenum, pname: GLenum, param: GLint) {.cdecl, gcsafe.}](load("glLighti"))
  glLightiv = cast[proc (light: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glLightiv"))
  glLightModelf = cast[proc (pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}](load("glLightModelf"))
  glLightModelfv = cast[proc (pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glLightModelfv"))
  glLightModeli = cast[proc (pname: GLenum, param: GLint) {.cdecl, gcsafe.}](load("glLightModeli"))
  glLightModeliv = cast[proc (pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glLightModeliv"))
  glLineStipple = cast[proc (factor: GLint, pattern: GLushort) {.cdecl, gcsafe.}](load("glLineStipple"))
  glMaterialf = cast[proc (face: GLenum, pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}](load("glMaterialf"))
  glMaterialfv = cast[proc (face: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glMaterialfv"))
  glMateriali = cast[proc (face: GLenum, pname: GLenum, param: GLint) {.cdecl, gcsafe.}](load("glMateriali"))
  glMaterialiv = cast[proc (face: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glMaterialiv"))
  glPolygonStipple = cast[proc (mask: ptr GLubyte) {.cdecl, gcsafe.}](load("glPolygonStipple"))
  glShadeModel = cast[proc (mode: GLenum) {.cdecl, gcsafe.}](load("glShadeModel"))
  glTexEnvf = cast[proc (target: GLenum, pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}](load("glTexEnvf"))
  glTexEnvfv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glTexEnvfv"))
  glTexEnvi = cast[proc (target: GLenum, pname: GLenum, param: GLint) {.cdecl, gcsafe.}](load("glTexEnvi"))
  glTexEnviv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glTexEnviv"))
  glTexGend = cast[proc (coord: GLenum, pname: GLenum, param: GLdouble) {.cdecl, gcsafe.}](load("glTexGend"))
  glTexGendv = cast[proc (coord: GLenum, pname: GLenum, params: ptr GLdouble) {.cdecl, gcsafe.}](load("glTexGendv"))
  glTexGenf = cast[proc (coord: GLenum, pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}](load("glTexGenf"))
  glTexGenfv = cast[proc (coord: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glTexGenfv"))
  glTexGeni = cast[proc (coord: GLenum, pname: GLenum, param: GLint) {.cdecl, gcsafe.}](load("glTexGeni"))
  glTexGeniv = cast[proc (coord: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glTexGeniv"))
  glFeedbackBuffer = cast[proc (size: GLsizei, `type`: GLenum, buffer: ptr GLfloat) {.cdecl, gcsafe.}](load("glFeedbackBuffer"))
  glSelectBuffer = cast[proc (size: GLsizei, buffer: ptr GLuint) {.cdecl, gcsafe.}](load("glSelectBuffer"))
  glRenderMode = cast[proc (mode: GLenum): GLint {.cdecl, gcsafe.}](load("glRenderMode"))
  glInitNames = cast[proc () {.cdecl, gcsafe.}](load("glInitNames"))
  glLoadName = cast[proc (name: GLuint) {.cdecl, gcsafe.}](load("glLoadName"))
  glPassThrough = cast[proc (token: GLfloat) {.cdecl, gcsafe.}](load("glPassThrough"))
  glPopName = cast[proc () {.cdecl, gcsafe.}](load("glPopName"))
  glPushName = cast[proc (name: GLuint) {.cdecl, gcsafe.}](load("glPushName"))
  glClearAccum = cast[proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl, gcsafe.}](load("glClearAccum"))
  glClearIndex = cast[proc (c: GLfloat) {.cdecl, gcsafe.}](load("glClearIndex"))
  glIndexMask = cast[proc (mask: GLuint) {.cdecl, gcsafe.}](load("glIndexMask"))
  glAccum = cast[proc (op: GLenum, value: GLfloat) {.cdecl, gcsafe.}](load("glAccum"))
  glPopAttrib = cast[proc () {.cdecl, gcsafe.}](load("glPopAttrib"))
  glPushAttrib = cast[proc (mask: GLbitfield) {.cdecl, gcsafe.}](load("glPushAttrib"))
  glMap1d = cast[proc (target: GLenum, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: ptr GLdouble) {.cdecl, gcsafe.}](load("glMap1d"))
  glMap1f = cast[proc (target: GLenum, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: ptr GLfloat) {.cdecl, gcsafe.}](load("glMap1f"))
  glMap2d = cast[proc (target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: ptr GLdouble) {.cdecl, gcsafe.}](load("glMap2d"))
  glMap2f = cast[proc (target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: ptr GLfloat) {.cdecl, gcsafe.}](load("glMap2f"))
  glMapGrid1d = cast[proc (un: GLint, u1: GLdouble, u2: GLdouble) {.cdecl, gcsafe.}](load("glMapGrid1d"))
  glMapGrid1f = cast[proc (un: GLint, u1: GLfloat, u2: GLfloat) {.cdecl, gcsafe.}](load("glMapGrid1f"))
  glMapGrid2d = cast[proc (un: GLint, u1: GLdouble, u2: GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble) {.cdecl, gcsafe.}](load("glMapGrid2d"))
  glMapGrid2f = cast[proc (un: GLint, u1: GLfloat, u2: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat) {.cdecl, gcsafe.}](load("glMapGrid2f"))
  glEvalCoord1d = cast[proc (u: GLdouble) {.cdecl, gcsafe.}](load("glEvalCoord1d"))
  glEvalCoord1dv = cast[proc (u: ptr GLdouble) {.cdecl, gcsafe.}](load("glEvalCoord1dv"))
  glEvalCoord1f = cast[proc (u: GLfloat) {.cdecl, gcsafe.}](load("glEvalCoord1f"))
  glEvalCoord1fv = cast[proc (u: ptr GLfloat) {.cdecl, gcsafe.}](load("glEvalCoord1fv"))
  glEvalCoord2d = cast[proc (u: GLdouble, v: GLdouble) {.cdecl, gcsafe.}](load("glEvalCoord2d"))
  glEvalCoord2dv = cast[proc (u: ptr GLdouble) {.cdecl, gcsafe.}](load("glEvalCoord2dv"))
  glEvalCoord2f = cast[proc (u: GLfloat, v: GLfloat) {.cdecl, gcsafe.}](load("glEvalCoord2f"))
  glEvalCoord2fv = cast[proc (u: ptr GLfloat) {.cdecl, gcsafe.}](load("glEvalCoord2fv"))
  glEvalMesh1 = cast[proc (mode: GLenum, i1: GLint, i2: GLint) {.cdecl, gcsafe.}](load("glEvalMesh1"))
  glEvalPoint1 = cast[proc (i: GLint) {.cdecl, gcsafe.}](load("glEvalPoint1"))
  glEvalMesh2 = cast[proc (mode: GLenum, i1: GLint, i2: GLint, j1: GLint, j2: GLint) {.cdecl, gcsafe.}](load("glEvalMesh2"))
  glEvalPoint2 = cast[proc (i: GLint, j: GLint) {.cdecl, gcsafe.}](load("glEvalPoint2"))
  glAlphaFunc = cast[proc (`func`: GLenum, `ref`: GLfloat) {.cdecl, gcsafe.}](load("glAlphaFunc"))
  glPixelZoom = cast[proc (xfactor: GLfloat, yfactor: GLfloat) {.cdecl, gcsafe.}](load("glPixelZoom"))
  glPixelTransferf = cast[proc (pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}](load("glPixelTransferf"))
  glPixelTransferi = cast[proc (pname: GLenum, param: GLint) {.cdecl, gcsafe.}](load("glPixelTransferi"))
  glPixelMapfv = cast[proc (map: GLenum, mapsize: GLsizei, values: ptr GLfloat) {.cdecl, gcsafe.}](load("glPixelMapfv"))
  glPixelMapuiv = cast[proc (map: GLenum, mapsize: GLsizei, values: ptr GLuint) {.cdecl, gcsafe.}](load("glPixelMapuiv"))
  glPixelMapusv = cast[proc (map: GLenum, mapsize: GLsizei, values: ptr GLushort) {.cdecl, gcsafe.}](load("glPixelMapusv"))
  glCopyPixels = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei, `type`: GLenum) {.cdecl, gcsafe.}](load("glCopyPixels"))
  glDrawPixels = cast[proc (width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}](load("glDrawPixels"))
  glGetClipPlane = cast[proc (plane: GLenum, equation: ptr GLdouble) {.cdecl, gcsafe.}](load("glGetClipPlane"))
  glGetLightfv = cast[proc (light: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetLightfv"))
  glGetLightiv = cast[proc (light: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetLightiv"))
  glGetMapdv = cast[proc (target: GLenum, query: GLenum, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glGetMapdv"))
  glGetMapfv = cast[proc (target: GLenum, query: GLenum, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetMapfv"))
  glGetMapiv = cast[proc (target: GLenum, query: GLenum, v: ptr GLint) {.cdecl, gcsafe.}](load("glGetMapiv"))
  glGetMaterialfv = cast[proc (face: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetMaterialfv"))
  glGetMaterialiv = cast[proc (face: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetMaterialiv"))
  glGetPixelMapfv = cast[proc (map: GLenum, values: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetPixelMapfv"))
  glGetPixelMapuiv = cast[proc (map: GLenum, values: ptr GLuint) {.cdecl, gcsafe.}](load("glGetPixelMapuiv"))
  glGetPixelMapusv = cast[proc (map: GLenum, values: ptr GLushort) {.cdecl, gcsafe.}](load("glGetPixelMapusv"))
  glGetPolygonStipple = cast[proc (mask: ptr GLubyte) {.cdecl, gcsafe.}](load("glGetPolygonStipple"))
  glGetTexEnvfv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetTexEnvfv"))
  glGetTexEnviv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetTexEnviv"))
  glGetTexGendv = cast[proc (coord: GLenum, pname: GLenum, params: ptr GLdouble) {.cdecl, gcsafe.}](load("glGetTexGendv"))
  glGetTexGenfv = cast[proc (coord: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetTexGenfv"))
  glGetTexGeniv = cast[proc (coord: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetTexGeniv"))
  glIsList = cast[proc (list: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsList"))
  glFrustum = cast[proc (left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) {.cdecl, gcsafe.}](load("glFrustum"))
  glLoadIdentity = cast[proc () {.cdecl, gcsafe.}](load("glLoadIdentity"))
  glLoadMatrixf = cast[proc (m: ptr GLfloat) {.cdecl, gcsafe.}](load("glLoadMatrixf"))
  glLoadMatrixd = cast[proc (m: ptr GLdouble) {.cdecl, gcsafe.}](load("glLoadMatrixd"))
  glMatrixMode = cast[proc (mode: GLenum) {.cdecl, gcsafe.}](load("glMatrixMode"))
  glMultMatrixf = cast[proc (m: ptr GLfloat) {.cdecl, gcsafe.}](load("glMultMatrixf"))
  glMultMatrixd = cast[proc (m: ptr GLdouble) {.cdecl, gcsafe.}](load("glMultMatrixd"))
  glOrtho = cast[proc (left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) {.cdecl, gcsafe.}](load("glOrtho"))
  glPopMatrix = cast[proc () {.cdecl, gcsafe.}](load("glPopMatrix"))
  glPushMatrix = cast[proc () {.cdecl, gcsafe.}](load("glPushMatrix"))
  glRotated = cast[proc (angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}](load("glRotated"))
  glRotatef = cast[proc (angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}](load("glRotatef"))
  glScaled = cast[proc (x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}](load("glScaled"))
  glScalef = cast[proc (x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}](load("glScalef"))
  glTranslated = cast[proc (x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}](load("glTranslated"))
  glTranslatef = cast[proc (x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}](load("glTranslatef"))


proc load_GL_VERSION_1_1(load: proc) =
  if not GLAD_GL_VERSION_1_1: return

  glDrawArrays = cast[proc (mode: GLenum, first: GLint, count: GLsizei) {.cdecl, gcsafe.}](load("glDrawArrays"))
  glDrawElements = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer) {.cdecl, gcsafe.}](load("glDrawElements"))
  glGetPointerv = cast[proc (pname: GLenum, params: ptr pointer) {.cdecl, gcsafe.}](load("glGetPointerv"))
  glPolygonOffset = cast[proc (factor: GLfloat, units: GLfloat) {.cdecl, gcsafe.}](load("glPolygonOffset"))
  glCopyTexImage1D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) {.cdecl, gcsafe.}](load("glCopyTexImage1D"))
  glCopyTexImage2D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) {.cdecl, gcsafe.}](load("glCopyTexImage2D"))
  glCopyTexSubImage1D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) {.cdecl, gcsafe.}](load("glCopyTexSubImage1D"))
  glCopyTexSubImage2D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}](load("glCopyTexSubImage2D"))
  glTexSubImage1D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}](load("glTexSubImage1D"))
  glTexSubImage2D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}](load("glTexSubImage2D"))
  glBindTexture = cast[proc (target: GLenum, texture: GLuint) {.cdecl, gcsafe.}](load("glBindTexture"))
  glDeleteTextures = cast[proc (n: GLsizei, textures: ptr GLuint) {.cdecl, gcsafe.}](load("glDeleteTextures"))
  glGenTextures = cast[proc (n: GLsizei, textures: ptr GLuint) {.cdecl, gcsafe.}](load("glGenTextures"))
  glIsTexture = cast[proc (texture: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsTexture"))
  glArrayElement = cast[proc (i: GLint) {.cdecl, gcsafe.}](load("glArrayElement"))
  glColorPointer = cast[proc (size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}](load("glColorPointer"))
  glDisableClientState = cast[proc (array: GLenum) {.cdecl, gcsafe.}](load("glDisableClientState"))
  glEdgeFlagPointer = cast[proc (stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}](load("glEdgeFlagPointer"))
  glEnableClientState = cast[proc (array: GLenum) {.cdecl, gcsafe.}](load("glEnableClientState"))
  glIndexPointer = cast[proc (`type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}](load("glIndexPointer"))
  glInterleavedArrays = cast[proc (format: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}](load("glInterleavedArrays"))
  glNormalPointer = cast[proc (`type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}](load("glNormalPointer"))
  glTexCoordPointer = cast[proc (size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}](load("glTexCoordPointer"))
  glVertexPointer = cast[proc (size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}](load("glVertexPointer"))
  glAreTexturesResident = cast[proc (n: GLsizei, textures: ptr GLuint, residences: ptr GLboolean): GLboolean {.cdecl, gcsafe.}](load("glAreTexturesResident"))
  glPrioritizeTextures = cast[proc (n: GLsizei, textures: ptr GLuint, priorities: ptr GLfloat) {.cdecl, gcsafe.}](load("glPrioritizeTextures"))
  glIndexub = cast[proc (c: GLubyte) {.cdecl, gcsafe.}](load("glIndexub"))
  glIndexubv = cast[proc (c: ptr GLubyte) {.cdecl, gcsafe.}](load("glIndexubv"))
  glPopClientAttrib = cast[proc () {.cdecl, gcsafe.}](load("glPopClientAttrib"))
  glPushClientAttrib = cast[proc (mask: GLbitfield) {.cdecl, gcsafe.}](load("glPushClientAttrib"))


proc load_GL_VERSION_1_2(load: proc) =
  if not GLAD_GL_VERSION_1_2: return

  glDrawRangeElements = cast[proc (mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer) {.cdecl, gcsafe.}](load("glDrawRangeElements"))
  glTexImage3D = cast[proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}](load("glTexImage3D"))
  glTexSubImage3D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}](load("glTexSubImage3D"))
  glCopyTexSubImage3D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}](load("glCopyTexSubImage3D"))


proc load_GL_VERSION_1_3(load: proc) =
  if not GLAD_GL_VERSION_1_3: return

  glActiveTexture = cast[proc (texture: GLenum) {.cdecl, gcsafe.}](load("glActiveTexture"))
  glSampleCoverage = cast[proc (value: GLfloat, invert: GLboolean) {.cdecl, gcsafe.}](load("glSampleCoverage"))
  glCompressedTexImage3D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}](load("glCompressedTexImage3D"))
  glCompressedTexImage2D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}](load("glCompressedTexImage2D"))
  glCompressedTexImage1D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}](load("glCompressedTexImage1D"))
  glCompressedTexSubImage3D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}](load("glCompressedTexSubImage3D"))
  glCompressedTexSubImage2D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}](load("glCompressedTexSubImage2D"))
  glCompressedTexSubImage1D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}](load("glCompressedTexSubImage1D"))
  glGetCompressedTexImage = cast[proc (target: GLenum, level: GLint, img: pointer) {.cdecl, gcsafe.}](load("glGetCompressedTexImage"))
  glClientActiveTexture = cast[proc (texture: GLenum) {.cdecl, gcsafe.}](load("glClientActiveTexture"))
  glMultiTexCoord1d = cast[proc (target: GLenum, s: GLdouble) {.cdecl, gcsafe.}](load("glMultiTexCoord1d"))
  glMultiTexCoord1dv = cast[proc (target: GLenum, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glMultiTexCoord1dv"))
  glMultiTexCoord1f = cast[proc (target: GLenum, s: GLfloat) {.cdecl, gcsafe.}](load("glMultiTexCoord1f"))
  glMultiTexCoord1fv = cast[proc (target: GLenum, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glMultiTexCoord1fv"))
  glMultiTexCoord1i = cast[proc (target: GLenum, s: GLint) {.cdecl, gcsafe.}](load("glMultiTexCoord1i"))
  glMultiTexCoord1iv = cast[proc (target: GLenum, v: ptr GLint) {.cdecl, gcsafe.}](load("glMultiTexCoord1iv"))
  glMultiTexCoord1s = cast[proc (target: GLenum, s: GLshort) {.cdecl, gcsafe.}](load("glMultiTexCoord1s"))
  glMultiTexCoord1sv = cast[proc (target: GLenum, v: ptr GLshort) {.cdecl, gcsafe.}](load("glMultiTexCoord1sv"))
  glMultiTexCoord2d = cast[proc (target: GLenum, s: GLdouble, t: GLdouble) {.cdecl, gcsafe.}](load("glMultiTexCoord2d"))
  glMultiTexCoord2dv = cast[proc (target: GLenum, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glMultiTexCoord2dv"))
  glMultiTexCoord2f = cast[proc (target: GLenum, s: GLfloat, t: GLfloat) {.cdecl, gcsafe.}](load("glMultiTexCoord2f"))
  glMultiTexCoord2fv = cast[proc (target: GLenum, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glMultiTexCoord2fv"))
  glMultiTexCoord2i = cast[proc (target: GLenum, s: GLint, t: GLint) {.cdecl, gcsafe.}](load("glMultiTexCoord2i"))
  glMultiTexCoord2iv = cast[proc (target: GLenum, v: ptr GLint) {.cdecl, gcsafe.}](load("glMultiTexCoord2iv"))
  glMultiTexCoord2s = cast[proc (target: GLenum, s: GLshort, t: GLshort) {.cdecl, gcsafe.}](load("glMultiTexCoord2s"))
  glMultiTexCoord2sv = cast[proc (target: GLenum, v: ptr GLshort) {.cdecl, gcsafe.}](load("glMultiTexCoord2sv"))
  glMultiTexCoord3d = cast[proc (target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) {.cdecl, gcsafe.}](load("glMultiTexCoord3d"))
  glMultiTexCoord3dv = cast[proc (target: GLenum, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glMultiTexCoord3dv"))
  glMultiTexCoord3f = cast[proc (target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) {.cdecl, gcsafe.}](load("glMultiTexCoord3f"))
  glMultiTexCoord3fv = cast[proc (target: GLenum, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glMultiTexCoord3fv"))
  glMultiTexCoord3i = cast[proc (target: GLenum, s: GLint, t: GLint, r: GLint) {.cdecl, gcsafe.}](load("glMultiTexCoord3i"))
  glMultiTexCoord3iv = cast[proc (target: GLenum, v: ptr GLint) {.cdecl, gcsafe.}](load("glMultiTexCoord3iv"))
  glMultiTexCoord3s = cast[proc (target: GLenum, s: GLshort, t: GLshort, r: GLshort) {.cdecl, gcsafe.}](load("glMultiTexCoord3s"))
  glMultiTexCoord3sv = cast[proc (target: GLenum, v: ptr GLshort) {.cdecl, gcsafe.}](load("glMultiTexCoord3sv"))
  glMultiTexCoord4d = cast[proc (target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) {.cdecl, gcsafe.}](load("glMultiTexCoord4d"))
  glMultiTexCoord4dv = cast[proc (target: GLenum, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glMultiTexCoord4dv"))
  glMultiTexCoord4f = cast[proc (target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) {.cdecl, gcsafe.}](load("glMultiTexCoord4f"))
  glMultiTexCoord4fv = cast[proc (target: GLenum, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glMultiTexCoord4fv"))
  glMultiTexCoord4i = cast[proc (target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) {.cdecl, gcsafe.}](load("glMultiTexCoord4i"))
  glMultiTexCoord4iv = cast[proc (target: GLenum, v: ptr GLint) {.cdecl, gcsafe.}](load("glMultiTexCoord4iv"))
  glMultiTexCoord4s = cast[proc (target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) {.cdecl, gcsafe.}](load("glMultiTexCoord4s"))
  glMultiTexCoord4sv = cast[proc (target: GLenum, v: ptr GLshort) {.cdecl, gcsafe.}](load("glMultiTexCoord4sv"))
  glLoadTransposeMatrixf = cast[proc (m: ptr GLfloat) {.cdecl, gcsafe.}](load("glLoadTransposeMatrixf"))
  glLoadTransposeMatrixd = cast[proc (m: ptr GLdouble) {.cdecl, gcsafe.}](load("glLoadTransposeMatrixd"))
  glMultTransposeMatrixf = cast[proc (m: ptr GLfloat) {.cdecl, gcsafe.}](load("glMultTransposeMatrixf"))
  glMultTransposeMatrixd = cast[proc (m: ptr GLdouble) {.cdecl, gcsafe.}](load("glMultTransposeMatrixd"))


proc load_GL_VERSION_1_4(load: proc) =
  if not GLAD_GL_VERSION_1_4: return

  glBlendFuncSeparate = cast[proc (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) {.cdecl, gcsafe.}](load("glBlendFuncSeparate"))
  glMultiDrawArrays = cast[proc (mode: GLenum, first: ptr GLint, count: ptr GLsizei, drawcount: GLsizei) {.cdecl, gcsafe.}](load("glMultiDrawArrays"))
  glMultiDrawElements = cast[proc (mode: GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, drawcount: GLsizei) {.cdecl, gcsafe.}](load("glMultiDrawElements"))
  glPointParameterf = cast[proc (pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}](load("glPointParameterf"))
  glPointParameterfv = cast[proc (pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glPointParameterfv"))
  glPointParameteri = cast[proc (pname: GLenum, param: GLint) {.cdecl, gcsafe.}](load("glPointParameteri"))
  glPointParameteriv = cast[proc (pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glPointParameteriv"))
  glFogCoordf = cast[proc (coord: GLfloat) {.cdecl, gcsafe.}](load("glFogCoordf"))
  glFogCoordfv = cast[proc (coord: ptr GLfloat) {.cdecl, gcsafe.}](load("glFogCoordfv"))
  glFogCoordd = cast[proc (coord: GLdouble) {.cdecl, gcsafe.}](load("glFogCoordd"))
  glFogCoorddv = cast[proc (coord: ptr GLdouble) {.cdecl, gcsafe.}](load("glFogCoorddv"))
  glFogCoordPointer = cast[proc (`type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}](load("glFogCoordPointer"))
  glSecondaryColor3b = cast[proc (red: GLbyte, green: GLbyte, blue: GLbyte) {.cdecl, gcsafe.}](load("glSecondaryColor3b"))
  glSecondaryColor3bv = cast[proc (v: ptr GLbyte) {.cdecl, gcsafe.}](load("glSecondaryColor3bv"))
  glSecondaryColor3d = cast[proc (red: GLdouble, green: GLdouble, blue: GLdouble) {.cdecl, gcsafe.}](load("glSecondaryColor3d"))
  glSecondaryColor3dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glSecondaryColor3dv"))
  glSecondaryColor3f = cast[proc (red: GLfloat, green: GLfloat, blue: GLfloat) {.cdecl, gcsafe.}](load("glSecondaryColor3f"))
  glSecondaryColor3fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glSecondaryColor3fv"))
  glSecondaryColor3i = cast[proc (red: GLint, green: GLint, blue: GLint) {.cdecl, gcsafe.}](load("glSecondaryColor3i"))
  glSecondaryColor3iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glSecondaryColor3iv"))
  glSecondaryColor3s = cast[proc (red: GLshort, green: GLshort, blue: GLshort) {.cdecl, gcsafe.}](load("glSecondaryColor3s"))
  glSecondaryColor3sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glSecondaryColor3sv"))
  glSecondaryColor3ub = cast[proc (red: GLubyte, green: GLubyte, blue: GLubyte) {.cdecl, gcsafe.}](load("glSecondaryColor3ub"))
  glSecondaryColor3ubv = cast[proc (v: ptr GLubyte) {.cdecl, gcsafe.}](load("glSecondaryColor3ubv"))
  glSecondaryColor3ui = cast[proc (red: GLuint, green: GLuint, blue: GLuint) {.cdecl, gcsafe.}](load("glSecondaryColor3ui"))
  glSecondaryColor3uiv = cast[proc (v: ptr GLuint) {.cdecl, gcsafe.}](load("glSecondaryColor3uiv"))
  glSecondaryColor3us = cast[proc (red: GLushort, green: GLushort, blue: GLushort) {.cdecl, gcsafe.}](load("glSecondaryColor3us"))
  glSecondaryColor3usv = cast[proc (v: ptr GLushort) {.cdecl, gcsafe.}](load("glSecondaryColor3usv"))
  glSecondaryColorPointer = cast[proc (size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}](load("glSecondaryColorPointer"))
  glWindowPos2d = cast[proc (x: GLdouble, y: GLdouble) {.cdecl, gcsafe.}](load("glWindowPos2d"))
  glWindowPos2dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glWindowPos2dv"))
  glWindowPos2f = cast[proc (x: GLfloat, y: GLfloat) {.cdecl, gcsafe.}](load("glWindowPos2f"))
  glWindowPos2fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glWindowPos2fv"))
  glWindowPos2i = cast[proc (x: GLint, y: GLint) {.cdecl, gcsafe.}](load("glWindowPos2i"))
  glWindowPos2iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glWindowPos2iv"))
  glWindowPos2s = cast[proc (x: GLshort, y: GLshort) {.cdecl, gcsafe.}](load("glWindowPos2s"))
  glWindowPos2sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glWindowPos2sv"))
  glWindowPos3d = cast[proc (x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}](load("glWindowPos3d"))
  glWindowPos3dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glWindowPos3dv"))
  glWindowPos3f = cast[proc (x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}](load("glWindowPos3f"))
  glWindowPos3fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glWindowPos3fv"))
  glWindowPos3i = cast[proc (x: GLint, y: GLint, z: GLint) {.cdecl, gcsafe.}](load("glWindowPos3i"))
  glWindowPos3iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glWindowPos3iv"))
  glWindowPos3s = cast[proc (x: GLshort, y: GLshort, z: GLshort) {.cdecl, gcsafe.}](load("glWindowPos3s"))
  glWindowPos3sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glWindowPos3sv"))
  glBlendColor = cast[proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl, gcsafe.}](load("glBlendColor"))
  glBlendEquation = cast[proc (mode: GLenum) {.cdecl, gcsafe.}](load("glBlendEquation"))


proc load_GL_VERSION_1_5(load: proc) =
  if not GLAD_GL_VERSION_1_5: return

  glGenQueries = cast[proc (n: GLsizei, ids: ptr GLuint) {.cdecl, gcsafe.}](load("glGenQueries"))
  glDeleteQueries = cast[proc (n: GLsizei, ids: ptr GLuint) {.cdecl, gcsafe.}](load("glDeleteQueries"))
  glIsQuery = cast[proc (id: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsQuery"))
  glBeginQuery = cast[proc (target: GLenum, id: GLuint) {.cdecl, gcsafe.}](load("glBeginQuery"))
  glEndQuery = cast[proc (target: GLenum) {.cdecl, gcsafe.}](load("glEndQuery"))
  glGetQueryiv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetQueryiv"))
  glGetQueryObjectiv = cast[proc (id: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetQueryObjectiv"))
  glGetQueryObjectuiv = cast[proc (id: GLuint, pname: GLenum, params: ptr GLuint) {.cdecl, gcsafe.}](load("glGetQueryObjectuiv"))
  glBindBuffer = cast[proc (target: GLenum, buffer: GLuint) {.cdecl, gcsafe.}](load("glBindBuffer"))
  glDeleteBuffers = cast[proc (n: GLsizei, buffers: ptr GLuint) {.cdecl, gcsafe.}](load("glDeleteBuffers"))
  glGenBuffers = cast[proc (n: GLsizei, buffers: ptr GLuint) {.cdecl, gcsafe.}](load("glGenBuffers"))
  glIsBuffer = cast[proc (buffer: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsBuffer"))
  glBufferData = cast[proc (target: GLenum, size: GLsizeiptr, data: pointer, usage: GLenum) {.cdecl, gcsafe.}](load("glBufferData"))
  glBufferSubData = cast[proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer) {.cdecl, gcsafe.}](load("glBufferSubData"))
  glGetBufferSubData = cast[proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer) {.cdecl, gcsafe.}](load("glGetBufferSubData"))
  glMapBuffer = cast[proc (target: GLenum, access: GLenum): pointer {.cdecl, gcsafe.}](load("glMapBuffer"))
  glUnmapBuffer = cast[proc (target: GLenum): GLboolean {.cdecl, gcsafe.}](load("glUnmapBuffer"))
  glGetBufferParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetBufferParameteriv"))
  glGetBufferPointerv = cast[proc (target: GLenum, pname: GLenum, params: ptr pointer) {.cdecl, gcsafe.}](load("glGetBufferPointerv"))


proc load_GL_VERSION_2_0(load: proc) =
  if not GLAD_GL_VERSION_2_0: return

  glBlendEquationSeparate = cast[proc (modeRGB: GLenum, modeAlpha: GLenum) {.cdecl, gcsafe.}](load("glBlendEquationSeparate"))
  glDrawBuffers = cast[proc (n: GLsizei, bufs: ptr GLenum) {.cdecl, gcsafe.}](load("glDrawBuffers"))
  glStencilOpSeparate = cast[proc (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) {.cdecl, gcsafe.}](load("glStencilOpSeparate"))
  glStencilFuncSeparate = cast[proc (face: GLenum, `func`: GLenum, `ref`: GLint, mask: GLuint) {.cdecl, gcsafe.}](load("glStencilFuncSeparate"))
  glStencilMaskSeparate = cast[proc (face: GLenum, mask: GLuint) {.cdecl, gcsafe.}](load("glStencilMaskSeparate"))
  glAttachShader = cast[proc (program: GLuint, shader: GLuint) {.cdecl, gcsafe.}](load("glAttachShader"))
  glBindAttribLocation = cast[proc (program: GLuint, index: GLuint, name: cstring) {.cdecl, gcsafe.}](load("glBindAttribLocation"))
  glCompileShader = cast[proc (shader: GLuint) {.cdecl, gcsafe.}](load("glCompileShader"))
  glCreateProgram = cast[proc (): GLuint {.cdecl, gcsafe.}](load("glCreateProgram"))
  glCreateShader = cast[proc (`type`: GLenum): GLuint {.cdecl, gcsafe.}](load("glCreateShader"))
  glDeleteProgram = cast[proc (program: GLuint) {.cdecl, gcsafe.}](load("glDeleteProgram"))
  glDeleteShader = cast[proc (shader: GLuint) {.cdecl, gcsafe.}](load("glDeleteShader"))
  glDetachShader = cast[proc (program: GLuint, shader: GLuint) {.cdecl, gcsafe.}](load("glDetachShader"))
  glDisableVertexAttribArray = cast[proc (index: GLuint) {.cdecl, gcsafe.}](load("glDisableVertexAttribArray"))
  glEnableVertexAttribArray = cast[proc (index: GLuint) {.cdecl, gcsafe.}](load("glEnableVertexAttribArray"))
  glGetActiveAttrib = cast[proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.cdecl, gcsafe.}](load("glGetActiveAttrib"))
  glGetActiveUniform = cast[proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.cdecl, gcsafe.}](load("glGetActiveUniform"))
  glGetAttachedShaders = cast[proc (program: GLuint, maxCount: GLsizei, count: ptr GLsizei, shaders: ptr GLuint) {.cdecl, gcsafe.}](load("glGetAttachedShaders"))
  glGetAttribLocation = cast[proc (program: GLuint, name: cstring): GLint {.cdecl, gcsafe.}](load("glGetAttribLocation"))
  glGetProgramiv = cast[proc (program: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetProgramiv"))
  glGetProgramInfoLog = cast[proc (program: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.cdecl, gcsafe.}](load("glGetProgramInfoLog"))
  glGetShaderiv = cast[proc (shader: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetShaderiv"))
  glGetShaderInfoLog = cast[proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.cdecl, gcsafe.}](load("glGetShaderInfoLog"))
  glGetShaderSource = cast[proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, source: cstring) {.cdecl, gcsafe.}](load("glGetShaderSource"))
  glGetUniformLocation = cast[proc (program: GLuint, name: cstring): GLint {.cdecl, gcsafe.}](load("glGetUniformLocation"))
  glGetUniformfv = cast[proc (program: GLuint, location: GLint, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetUniformfv"))
  glGetUniformiv = cast[proc (program: GLuint, location: GLint, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetUniformiv"))
  glGetVertexAttribdv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLdouble) {.cdecl, gcsafe.}](load("glGetVertexAttribdv"))
  glGetVertexAttribfv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetVertexAttribfv"))
  glGetVertexAttribiv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetVertexAttribiv"))
  glGetVertexAttribPointerv = cast[proc (index: GLuint, pname: GLenum, pointer: ptr pointer) {.cdecl, gcsafe.}](load("glGetVertexAttribPointerv"))
  glIsProgram = cast[proc (program: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsProgram"))
  glIsShader = cast[proc (shader: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsShader"))
  glLinkProgram = cast[proc (program: GLuint) {.cdecl, gcsafe.}](load("glLinkProgram"))
  glShaderSource = cast[proc (shader: GLuint, count: GLsizei, string: cstringArray, length: ptr GLint) {.cdecl, gcsafe.}](load("glShaderSource"))
  glUseProgram = cast[proc (program: GLuint) {.cdecl, gcsafe.}](load("glUseProgram"))
  glUniform1f = cast[proc (location: GLint, v0: GLfloat) {.cdecl, gcsafe.}](load("glUniform1f"))
  glUniform2f = cast[proc (location: GLint, v0: GLfloat, v1: GLfloat) {.cdecl, gcsafe.}](load("glUniform2f"))
  glUniform3f = cast[proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) {.cdecl, gcsafe.}](load("glUniform3f"))
  glUniform4f = cast[proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) {.cdecl, gcsafe.}](load("glUniform4f"))
  glUniform1i = cast[proc (location: GLint, v0: GLint) {.cdecl, gcsafe.}](load("glUniform1i"))
  glUniform2i = cast[proc (location: GLint, v0: GLint, v1: GLint) {.cdecl, gcsafe.}](load("glUniform2i"))
  glUniform3i = cast[proc (location: GLint, v0: GLint, v1: GLint, v2: GLint) {.cdecl, gcsafe.}](load("glUniform3i"))
  glUniform4i = cast[proc (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) {.cdecl, gcsafe.}](load("glUniform4i"))
  glUniform1fv = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniform1fv"))
  glUniform2fv = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniform2fv"))
  glUniform3fv = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniform3fv"))
  glUniform4fv = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniform4fv"))
  glUniform1iv = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}](load("glUniform1iv"))
  glUniform2iv = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}](load("glUniform2iv"))
  glUniform3iv = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}](load("glUniform3iv"))
  glUniform4iv = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}](load("glUniform4iv"))
  glUniformMatrix2fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniformMatrix2fv"))
  glUniformMatrix3fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniformMatrix3fv"))
  glUniformMatrix4fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniformMatrix4fv"))
  glValidateProgram = cast[proc (program: GLuint) {.cdecl, gcsafe.}](load("glValidateProgram"))
  glVertexAttrib1d = cast[proc (index: GLuint, x: GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib1d"))
  glVertexAttrib1dv = cast[proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib1dv"))
  glVertexAttrib1f = cast[proc (index: GLuint, x: GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib1f"))
  glVertexAttrib1fv = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib1fv"))
  glVertexAttrib1s = cast[proc (index: GLuint, x: GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib1s"))
  glVertexAttrib1sv = cast[proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib1sv"))
  glVertexAttrib2d = cast[proc (index: GLuint, x: GLdouble, y: GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib2d"))
  glVertexAttrib2dv = cast[proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib2dv"))
  glVertexAttrib2f = cast[proc (index: GLuint, x: GLfloat, y: GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib2f"))
  glVertexAttrib2fv = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib2fv"))
  glVertexAttrib2s = cast[proc (index: GLuint, x: GLshort, y: GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib2s"))
  glVertexAttrib2sv = cast[proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib2sv"))
  glVertexAttrib3d = cast[proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib3d"))
  glVertexAttrib3dv = cast[proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib3dv"))
  glVertexAttrib3f = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib3f"))
  glVertexAttrib3fv = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib3fv"))
  glVertexAttrib3s = cast[proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib3s"))
  glVertexAttrib3sv = cast[proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib3sv"))
  glVertexAttrib4Nbv = cast[proc (index: GLuint, v: ptr GLbyte) {.cdecl, gcsafe.}](load("glVertexAttrib4Nbv"))
  glVertexAttrib4Niv = cast[proc (index: GLuint, v: ptr GLint) {.cdecl, gcsafe.}](load("glVertexAttrib4Niv"))
  glVertexAttrib4Nsv = cast[proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib4Nsv"))
  glVertexAttrib4Nub = cast[proc (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) {.cdecl, gcsafe.}](load("glVertexAttrib4Nub"))
  glVertexAttrib4Nubv = cast[proc (index: GLuint, v: ptr GLubyte) {.cdecl, gcsafe.}](load("glVertexAttrib4Nubv"))
  glVertexAttrib4Nuiv = cast[proc (index: GLuint, v: ptr GLuint) {.cdecl, gcsafe.}](load("glVertexAttrib4Nuiv"))
  glVertexAttrib4Nusv = cast[proc (index: GLuint, v: ptr GLushort) {.cdecl, gcsafe.}](load("glVertexAttrib4Nusv"))
  glVertexAttrib4bv = cast[proc (index: GLuint, v: ptr GLbyte) {.cdecl, gcsafe.}](load("glVertexAttrib4bv"))
  glVertexAttrib4d = cast[proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib4d"))
  glVertexAttrib4dv = cast[proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib4dv"))
  glVertexAttrib4f = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib4f"))
  glVertexAttrib4fv = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib4fv"))
  glVertexAttrib4iv = cast[proc (index: GLuint, v: ptr GLint) {.cdecl, gcsafe.}](load("glVertexAttrib4iv"))
  glVertexAttrib4s = cast[proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib4s"))
  glVertexAttrib4sv = cast[proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib4sv"))
  glVertexAttrib4ubv = cast[proc (index: GLuint, v: ptr GLubyte) {.cdecl, gcsafe.}](load("glVertexAttrib4ubv"))
  glVertexAttrib4uiv = cast[proc (index: GLuint, v: ptr GLuint) {.cdecl, gcsafe.}](load("glVertexAttrib4uiv"))
  glVertexAttrib4usv = cast[proc (index: GLuint, v: ptr GLushort) {.cdecl, gcsafe.}](load("glVertexAttrib4usv"))
  glVertexAttribPointer = cast[proc (index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}](load("glVertexAttribPointer"))


proc load_GL_VERSION_2_1(load: proc) =
  if not GLAD_GL_VERSION_2_1: return

  glUniformMatrix2x3fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniformMatrix2x3fv"))
  glUniformMatrix3x2fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniformMatrix3x2fv"))
  glUniformMatrix2x4fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniformMatrix2x4fv"))
  glUniformMatrix4x2fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniformMatrix4x2fv"))
  glUniformMatrix3x4fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniformMatrix3x4fv"))
  glUniformMatrix4x3fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniformMatrix4x3fv"))


proc load_GL_ARB_draw_buffers(load: proc) =
  if not GLAD_GL_ARB_draw_buffers: return
  glDrawBuffersARB = cast[proc (n: GLsizei, bufs: ptr GLenum) {.cdecl, gcsafe.}](load("glDrawBuffersARB"))


proc load_GL_ARB_draw_buffers_blend(load: proc) =
  if not GLAD_GL_ARB_draw_buffers_blend: return
  glBlendEquationiARB = cast[proc (buf: GLuint, mode: GLenum) {.cdecl, gcsafe.}](load("glBlendEquationiARB"))
  glBlendEquationSeparateiARB = cast[proc (buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) {.cdecl, gcsafe.}](load("glBlendEquationSeparateiARB"))
  glBlendFunciARB = cast[proc (buf: GLuint, src: GLenum, dst: GLenum) {.cdecl, gcsafe.}](load("glBlendFunciARB"))
  glBlendFuncSeparateiARB = cast[proc (buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) {.cdecl, gcsafe.}](load("glBlendFuncSeparateiARB"))


proc load_GL_ARB_draw_elements_base_vertex(load: proc) =
  if not GLAD_GL_ARB_draw_elements_base_vertex: return
  glDrawElementsBaseVertex = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint) {.cdecl, gcsafe.}](load("glDrawElementsBaseVertex"))
  glDrawRangeElementsBaseVertex = cast[proc (mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint) {.cdecl, gcsafe.}](load("glDrawRangeElementsBaseVertex"))
  glDrawElementsInstancedBaseVertex = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, basevertex: GLint) {.cdecl, gcsafe.}](load("glDrawElementsInstancedBaseVertex"))
  glMultiDrawElementsBaseVertex = cast[proc (mode: GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, drawcount: GLsizei, basevertex: ptr GLint) {.cdecl, gcsafe.}](load("glMultiDrawElementsBaseVertex"))


proc load_GL_ARB_fragment_program(load: proc) =
  if not GLAD_GL_ARB_fragment_program: return
  glProgramStringARB = cast[proc (target: GLenum, format: GLenum, len: GLsizei, string: pointer) {.cdecl, gcsafe.}](load("glProgramStringARB"))
  glBindProgramARB = cast[proc (target: GLenum, program: GLuint) {.cdecl, gcsafe.}](load("glBindProgramARB"))
  glDeleteProgramsARB = cast[proc (n: GLsizei, programs: ptr GLuint) {.cdecl, gcsafe.}](load("glDeleteProgramsARB"))
  glGenProgramsARB = cast[proc (n: GLsizei, programs: ptr GLuint) {.cdecl, gcsafe.}](load("glGenProgramsARB"))
  glProgramEnvParameter4dARB = cast[proc (target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.cdecl, gcsafe.}](load("glProgramEnvParameter4dARB"))
  glProgramEnvParameter4dvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLdouble) {.cdecl, gcsafe.}](load("glProgramEnvParameter4dvARB"))
  glProgramEnvParameter4fARB = cast[proc (target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.cdecl, gcsafe.}](load("glProgramEnvParameter4fARB"))
  glProgramEnvParameter4fvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glProgramEnvParameter4fvARB"))
  glProgramLocalParameter4dARB = cast[proc (target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.cdecl, gcsafe.}](load("glProgramLocalParameter4dARB"))
  glProgramLocalParameter4dvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLdouble) {.cdecl, gcsafe.}](load("glProgramLocalParameter4dvARB"))
  glProgramLocalParameter4fARB = cast[proc (target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.cdecl, gcsafe.}](load("glProgramLocalParameter4fARB"))
  glProgramLocalParameter4fvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glProgramLocalParameter4fvARB"))
  glGetProgramEnvParameterdvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLdouble) {.cdecl, gcsafe.}](load("glGetProgramEnvParameterdvARB"))
  glGetProgramEnvParameterfvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetProgramEnvParameterfvARB"))
  glGetProgramLocalParameterdvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLdouble) {.cdecl, gcsafe.}](load("glGetProgramLocalParameterdvARB"))
  glGetProgramLocalParameterfvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetProgramLocalParameterfvARB"))
  glGetProgramivARB = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetProgramivARB"))
  glGetProgramStringARB = cast[proc (target: GLenum, pname: GLenum, string: pointer) {.cdecl, gcsafe.}](load("glGetProgramStringARB"))
  glIsProgramARB = cast[proc (program: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsProgramARB"))


proc load_GL_ARB_multisample(load: proc) =
  if not GLAD_GL_ARB_multisample: return
  glSampleCoverageARB = cast[proc (value: GLfloat, invert: GLboolean) {.cdecl, gcsafe.}](load("glSampleCoverageARB"))


proc load_GL_ARB_multitexture(load: proc) =
  if not GLAD_GL_ARB_multitexture: return
  glActiveTextureARB = cast[proc (texture: GLenum) {.cdecl, gcsafe.}](load("glActiveTextureARB"))
  glClientActiveTextureARB = cast[proc (texture: GLenum) {.cdecl, gcsafe.}](load("glClientActiveTextureARB"))
  glMultiTexCoord1dARB = cast[proc (target: GLenum, s: GLdouble) {.cdecl, gcsafe.}](load("glMultiTexCoord1dARB"))
  glMultiTexCoord1dvARB = cast[proc (target: GLenum, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glMultiTexCoord1dvARB"))
  glMultiTexCoord1fARB = cast[proc (target: GLenum, s: GLfloat) {.cdecl, gcsafe.}](load("glMultiTexCoord1fARB"))
  glMultiTexCoord1fvARB = cast[proc (target: GLenum, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glMultiTexCoord1fvARB"))
  glMultiTexCoord1iARB = cast[proc (target: GLenum, s: GLint) {.cdecl, gcsafe.}](load("glMultiTexCoord1iARB"))
  glMultiTexCoord1ivARB = cast[proc (target: GLenum, v: ptr GLint) {.cdecl, gcsafe.}](load("glMultiTexCoord1ivARB"))
  glMultiTexCoord1sARB = cast[proc (target: GLenum, s: GLshort) {.cdecl, gcsafe.}](load("glMultiTexCoord1sARB"))
  glMultiTexCoord1svARB = cast[proc (target: GLenum, v: ptr GLshort) {.cdecl, gcsafe.}](load("glMultiTexCoord1svARB"))
  glMultiTexCoord2dARB = cast[proc (target: GLenum, s: GLdouble, t: GLdouble) {.cdecl, gcsafe.}](load("glMultiTexCoord2dARB"))
  glMultiTexCoord2dvARB = cast[proc (target: GLenum, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glMultiTexCoord2dvARB"))
  glMultiTexCoord2fARB = cast[proc (target: GLenum, s: GLfloat, t: GLfloat) {.cdecl, gcsafe.}](load("glMultiTexCoord2fARB"))
  glMultiTexCoord2fvARB = cast[proc (target: GLenum, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glMultiTexCoord2fvARB"))
  glMultiTexCoord2iARB = cast[proc (target: GLenum, s: GLint, t: GLint) {.cdecl, gcsafe.}](load("glMultiTexCoord2iARB"))
  glMultiTexCoord2ivARB = cast[proc (target: GLenum, v: ptr GLint) {.cdecl, gcsafe.}](load("glMultiTexCoord2ivARB"))
  glMultiTexCoord2sARB = cast[proc (target: GLenum, s: GLshort, t: GLshort) {.cdecl, gcsafe.}](load("glMultiTexCoord2sARB"))
  glMultiTexCoord2svARB = cast[proc (target: GLenum, v: ptr GLshort) {.cdecl, gcsafe.}](load("glMultiTexCoord2svARB"))
  glMultiTexCoord3dARB = cast[proc (target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) {.cdecl, gcsafe.}](load("glMultiTexCoord3dARB"))
  glMultiTexCoord3dvARB = cast[proc (target: GLenum, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glMultiTexCoord3dvARB"))
  glMultiTexCoord3fARB = cast[proc (target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) {.cdecl, gcsafe.}](load("glMultiTexCoord3fARB"))
  glMultiTexCoord3fvARB = cast[proc (target: GLenum, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glMultiTexCoord3fvARB"))
  glMultiTexCoord3iARB = cast[proc (target: GLenum, s: GLint, t: GLint, r: GLint) {.cdecl, gcsafe.}](load("glMultiTexCoord3iARB"))
  glMultiTexCoord3ivARB = cast[proc (target: GLenum, v: ptr GLint) {.cdecl, gcsafe.}](load("glMultiTexCoord3ivARB"))
  glMultiTexCoord3sARB = cast[proc (target: GLenum, s: GLshort, t: GLshort, r: GLshort) {.cdecl, gcsafe.}](load("glMultiTexCoord3sARB"))
  glMultiTexCoord3svARB = cast[proc (target: GLenum, v: ptr GLshort) {.cdecl, gcsafe.}](load("glMultiTexCoord3svARB"))
  glMultiTexCoord4dARB = cast[proc (target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) {.cdecl, gcsafe.}](load("glMultiTexCoord4dARB"))
  glMultiTexCoord4dvARB = cast[proc (target: GLenum, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glMultiTexCoord4dvARB"))
  glMultiTexCoord4fARB = cast[proc (target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) {.cdecl, gcsafe.}](load("glMultiTexCoord4fARB"))
  glMultiTexCoord4fvARB = cast[proc (target: GLenum, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glMultiTexCoord4fvARB"))
  glMultiTexCoord4iARB = cast[proc (target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) {.cdecl, gcsafe.}](load("glMultiTexCoord4iARB"))
  glMultiTexCoord4ivARB = cast[proc (target: GLenum, v: ptr GLint) {.cdecl, gcsafe.}](load("glMultiTexCoord4ivARB"))
  glMultiTexCoord4sARB = cast[proc (target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) {.cdecl, gcsafe.}](load("glMultiTexCoord4sARB"))
  glMultiTexCoord4svARB = cast[proc (target: GLenum, v: ptr GLshort) {.cdecl, gcsafe.}](load("glMultiTexCoord4svARB"))


proc load_GL_ARB_uniform_buffer_object(load: proc) =
  if not GLAD_GL_ARB_uniform_buffer_object: return
  glGetUniformIndices = cast[proc (program: GLuint, uniformCount: GLsizei, uniformNames: cstringArray, uniformIndices: ptr GLuint) {.cdecl, gcsafe.}](load("glGetUniformIndices"))
  glGetActiveUniformsiv = cast[proc (program: GLuint, uniformCount: GLsizei, uniformIndices: ptr GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetActiveUniformsiv"))
  glGetActiveUniformName = cast[proc (program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: ptr GLsizei, uniformName: cstring) {.cdecl, gcsafe.}](load("glGetActiveUniformName"))
  glGetUniformBlockIndex = cast[proc (program: GLuint, uniformBlockName: cstring): GLuint {.cdecl, gcsafe.}](load("glGetUniformBlockIndex"))
  glGetActiveUniformBlockiv = cast[proc (program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetActiveUniformBlockiv"))
  glGetActiveUniformBlockName = cast[proc (program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: ptr GLsizei, uniformBlockName: cstring) {.cdecl, gcsafe.}](load("glGetActiveUniformBlockName"))
  glUniformBlockBinding = cast[proc (program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) {.cdecl, gcsafe.}](load("glUniformBlockBinding"))
  glBindBufferRange = cast[proc (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.cdecl, gcsafe.}](load("glBindBufferRange"))
  glBindBufferBase = cast[proc (target: GLenum, index: GLuint, buffer: GLuint) {.cdecl, gcsafe.}](load("glBindBufferBase"))
  glGetIntegeri_v = cast[proc (target: GLenum, index: GLuint, data: ptr GLint) {.cdecl, gcsafe.}](load("glGetIntegeri_v"))


proc load_GL_ARB_vertex_attrib_binding(load: proc) =
  if not GLAD_GL_ARB_vertex_attrib_binding: return
  glBindVertexBuffer = cast[proc (bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) {.cdecl, gcsafe.}](load("glBindVertexBuffer"))
  glVertexAttribFormat = cast[proc (attribindex: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, relativeoffset: GLuint) {.cdecl, gcsafe.}](load("glVertexAttribFormat"))
  glVertexAttribIFormat = cast[proc (attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint) {.cdecl, gcsafe.}](load("glVertexAttribIFormat"))
  glVertexAttribLFormat = cast[proc (attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint) {.cdecl, gcsafe.}](load("glVertexAttribLFormat"))
  glVertexAttribBinding = cast[proc (attribindex: GLuint, bindingindex: GLuint) {.cdecl, gcsafe.}](load("glVertexAttribBinding"))
  glVertexBindingDivisor = cast[proc (bindingindex: GLuint, divisor: GLuint) {.cdecl, gcsafe.}](load("glVertexBindingDivisor"))


proc load_GL_ARB_vertex_blend(load: proc) =
  if not GLAD_GL_ARB_vertex_blend: return
  glWeightbvARB = cast[proc (size: GLint, weights: ptr GLbyte) {.cdecl, gcsafe.}](load("glWeightbvARB"))
  glWeightsvARB = cast[proc (size: GLint, weights: ptr GLshort) {.cdecl, gcsafe.}](load("glWeightsvARB"))
  glWeightivARB = cast[proc (size: GLint, weights: ptr GLint) {.cdecl, gcsafe.}](load("glWeightivARB"))
  glWeightfvARB = cast[proc (size: GLint, weights: ptr GLfloat) {.cdecl, gcsafe.}](load("glWeightfvARB"))
  glWeightdvARB = cast[proc (size: GLint, weights: ptr GLdouble) {.cdecl, gcsafe.}](load("glWeightdvARB"))
  glWeightubvARB = cast[proc (size: GLint, weights: ptr GLubyte) {.cdecl, gcsafe.}](load("glWeightubvARB"))
  glWeightusvARB = cast[proc (size: GLint, weights: ptr GLushort) {.cdecl, gcsafe.}](load("glWeightusvARB"))
  glWeightuivARB = cast[proc (size: GLint, weights: ptr GLuint) {.cdecl, gcsafe.}](load("glWeightuivARB"))
  glWeightPointerARB = cast[proc (size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}](load("glWeightPointerARB"))
  glVertexBlendARB = cast[proc (count: GLint) {.cdecl, gcsafe.}](load("glVertexBlendARB"))


proc load_GL_ARB_vertex_program(load: proc) =
  if not GLAD_GL_ARB_vertex_program: return
  glVertexAttrib1dARB = cast[proc (index: GLuint, x: GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib1dARB"))
  glVertexAttrib1dvARB = cast[proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib1dvARB"))
  glVertexAttrib1fARB = cast[proc (index: GLuint, x: GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib1fARB"))
  glVertexAttrib1fvARB = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib1fvARB"))
  glVertexAttrib1sARB = cast[proc (index: GLuint, x: GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib1sARB"))
  glVertexAttrib1svARB = cast[proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib1svARB"))
  glVertexAttrib2dARB = cast[proc (index: GLuint, x: GLdouble, y: GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib2dARB"))
  glVertexAttrib2dvARB = cast[proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib2dvARB"))
  glVertexAttrib2fARB = cast[proc (index: GLuint, x: GLfloat, y: GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib2fARB"))
  glVertexAttrib2fvARB = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib2fvARB"))
  glVertexAttrib2sARB = cast[proc (index: GLuint, x: GLshort, y: GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib2sARB"))
  glVertexAttrib2svARB = cast[proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib2svARB"))
  glVertexAttrib3dARB = cast[proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib3dARB"))
  glVertexAttrib3dvARB = cast[proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib3dvARB"))
  glVertexAttrib3fARB = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib3fARB"))
  glVertexAttrib3fvARB = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib3fvARB"))
  glVertexAttrib3sARB = cast[proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib3sARB"))
  glVertexAttrib3svARB = cast[proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib3svARB"))
  glVertexAttrib4NbvARB = cast[proc (index: GLuint, v: ptr GLbyte) {.cdecl, gcsafe.}](load("glVertexAttrib4NbvARB"))
  glVertexAttrib4NivARB = cast[proc (index: GLuint, v: ptr GLint) {.cdecl, gcsafe.}](load("glVertexAttrib4NivARB"))
  glVertexAttrib4NsvARB = cast[proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib4NsvARB"))
  glVertexAttrib4NubARB = cast[proc (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) {.cdecl, gcsafe.}](load("glVertexAttrib4NubARB"))
  glVertexAttrib4NubvARB = cast[proc (index: GLuint, v: ptr GLubyte) {.cdecl, gcsafe.}](load("glVertexAttrib4NubvARB"))
  glVertexAttrib4NuivARB = cast[proc (index: GLuint, v: ptr GLuint) {.cdecl, gcsafe.}](load("glVertexAttrib4NuivARB"))
  glVertexAttrib4NusvARB = cast[proc (index: GLuint, v: ptr GLushort) {.cdecl, gcsafe.}](load("glVertexAttrib4NusvARB"))
  glVertexAttrib4bvARB = cast[proc (index: GLuint, v: ptr GLbyte) {.cdecl, gcsafe.}](load("glVertexAttrib4bvARB"))
  glVertexAttrib4dARB = cast[proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib4dARB"))
  glVertexAttrib4dvARB = cast[proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib4dvARB"))
  glVertexAttrib4fARB = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib4fARB"))
  glVertexAttrib4fvARB = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib4fvARB"))
  glVertexAttrib4ivARB = cast[proc (index: GLuint, v: ptr GLint) {.cdecl, gcsafe.}](load("glVertexAttrib4ivARB"))
  glVertexAttrib4sARB = cast[proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib4sARB"))
  glVertexAttrib4svARB = cast[proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib4svARB"))
  glVertexAttrib4ubvARB = cast[proc (index: GLuint, v: ptr GLubyte) {.cdecl, gcsafe.}](load("glVertexAttrib4ubvARB"))
  glVertexAttrib4uivARB = cast[proc (index: GLuint, v: ptr GLuint) {.cdecl, gcsafe.}](load("glVertexAttrib4uivARB"))
  glVertexAttrib4usvARB = cast[proc (index: GLuint, v: ptr GLushort) {.cdecl, gcsafe.}](load("glVertexAttrib4usvARB"))
  glVertexAttribPointerARB = cast[proc (index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}](load("glVertexAttribPointerARB"))
  glEnableVertexAttribArrayARB = cast[proc (index: GLuint) {.cdecl, gcsafe.}](load("glEnableVertexAttribArrayARB"))
  glDisableVertexAttribArrayARB = cast[proc (index: GLuint) {.cdecl, gcsafe.}](load("glDisableVertexAttribArrayARB"))
  glProgramStringARB = cast[proc (target: GLenum, format: GLenum, len: GLsizei, string: pointer) {.cdecl, gcsafe.}](load("glProgramStringARB"))
  glBindProgramARB = cast[proc (target: GLenum, program: GLuint) {.cdecl, gcsafe.}](load("glBindProgramARB"))
  glDeleteProgramsARB = cast[proc (n: GLsizei, programs: ptr GLuint) {.cdecl, gcsafe.}](load("glDeleteProgramsARB"))
  glGenProgramsARB = cast[proc (n: GLsizei, programs: ptr GLuint) {.cdecl, gcsafe.}](load("glGenProgramsARB"))
  glProgramEnvParameter4dARB = cast[proc (target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.cdecl, gcsafe.}](load("glProgramEnvParameter4dARB"))
  glProgramEnvParameter4dvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLdouble) {.cdecl, gcsafe.}](load("glProgramEnvParameter4dvARB"))
  glProgramEnvParameter4fARB = cast[proc (target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.cdecl, gcsafe.}](load("glProgramEnvParameter4fARB"))
  glProgramEnvParameter4fvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glProgramEnvParameter4fvARB"))
  glProgramLocalParameter4dARB = cast[proc (target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.cdecl, gcsafe.}](load("glProgramLocalParameter4dARB"))
  glProgramLocalParameter4dvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLdouble) {.cdecl, gcsafe.}](load("glProgramLocalParameter4dvARB"))
  glProgramLocalParameter4fARB = cast[proc (target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.cdecl, gcsafe.}](load("glProgramLocalParameter4fARB"))
  glProgramLocalParameter4fvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glProgramLocalParameter4fvARB"))
  glGetProgramEnvParameterdvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLdouble) {.cdecl, gcsafe.}](load("glGetProgramEnvParameterdvARB"))
  glGetProgramEnvParameterfvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetProgramEnvParameterfvARB"))
  glGetProgramLocalParameterdvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLdouble) {.cdecl, gcsafe.}](load("glGetProgramLocalParameterdvARB"))
  glGetProgramLocalParameterfvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetProgramLocalParameterfvARB"))
  glGetProgramivARB = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetProgramivARB"))
  glGetProgramStringARB = cast[proc (target: GLenum, pname: GLenum, string: pointer) {.cdecl, gcsafe.}](load("glGetProgramStringARB"))
  glGetVertexAttribdvARB = cast[proc (index: GLuint, pname: GLenum, params: ptr GLdouble) {.cdecl, gcsafe.}](load("glGetVertexAttribdvARB"))
  glGetVertexAttribfvARB = cast[proc (index: GLuint, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetVertexAttribfvARB"))
  glGetVertexAttribivARB = cast[proc (index: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetVertexAttribivARB"))
  glGetVertexAttribPointervARB = cast[proc (index: GLuint, pname: GLenum, pointer: ptr pointer) {.cdecl, gcsafe.}](load("glGetVertexAttribPointervARB"))
  glIsProgramARB = cast[proc (program: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsProgramARB"))


proc load_GL_ARB_vertex_shader(load: proc) =
  if not GLAD_GL_ARB_vertex_shader: return
  glVertexAttrib1fARB = cast[proc (index: GLuint, x: GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib1fARB"))
  glVertexAttrib1sARB = cast[proc (index: GLuint, x: GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib1sARB"))
  glVertexAttrib1dARB = cast[proc (index: GLuint, x: GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib1dARB"))
  glVertexAttrib2fARB = cast[proc (index: GLuint, x: GLfloat, y: GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib2fARB"))
  glVertexAttrib2sARB = cast[proc (index: GLuint, x: GLshort, y: GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib2sARB"))
  glVertexAttrib2dARB = cast[proc (index: GLuint, x: GLdouble, y: GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib2dARB"))
  glVertexAttrib3fARB = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib3fARB"))
  glVertexAttrib3sARB = cast[proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib3sARB"))
  glVertexAttrib3dARB = cast[proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib3dARB"))
  glVertexAttrib4fARB = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib4fARB"))
  glVertexAttrib4sARB = cast[proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib4sARB"))
  glVertexAttrib4dARB = cast[proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib4dARB"))
  glVertexAttrib4NubARB = cast[proc (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) {.cdecl, gcsafe.}](load("glVertexAttrib4NubARB"))
  glVertexAttrib1fvARB = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib1fvARB"))
  glVertexAttrib1svARB = cast[proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib1svARB"))
  glVertexAttrib1dvARB = cast[proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib1dvARB"))
  glVertexAttrib2fvARB = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib2fvARB"))
  glVertexAttrib2svARB = cast[proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib2svARB"))
  glVertexAttrib2dvARB = cast[proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib2dvARB"))
  glVertexAttrib3fvARB = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib3fvARB"))
  glVertexAttrib3svARB = cast[proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib3svARB"))
  glVertexAttrib3dvARB = cast[proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib3dvARB"))
  glVertexAttrib4fvARB = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib4fvARB"))
  glVertexAttrib4svARB = cast[proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib4svARB"))
  glVertexAttrib4dvARB = cast[proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib4dvARB"))
  glVertexAttrib4ivARB = cast[proc (index: GLuint, v: ptr GLint) {.cdecl, gcsafe.}](load("glVertexAttrib4ivARB"))
  glVertexAttrib4bvARB = cast[proc (index: GLuint, v: ptr GLbyte) {.cdecl, gcsafe.}](load("glVertexAttrib4bvARB"))
  glVertexAttrib4ubvARB = cast[proc (index: GLuint, v: ptr GLubyte) {.cdecl, gcsafe.}](load("glVertexAttrib4ubvARB"))
  glVertexAttrib4usvARB = cast[proc (index: GLuint, v: ptr GLushort) {.cdecl, gcsafe.}](load("glVertexAttrib4usvARB"))
  glVertexAttrib4uivARB = cast[proc (index: GLuint, v: ptr GLuint) {.cdecl, gcsafe.}](load("glVertexAttrib4uivARB"))
  glVertexAttrib4NbvARB = cast[proc (index: GLuint, v: ptr GLbyte) {.cdecl, gcsafe.}](load("glVertexAttrib4NbvARB"))
  glVertexAttrib4NsvARB = cast[proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib4NsvARB"))
  glVertexAttrib4NivARB = cast[proc (index: GLuint, v: ptr GLint) {.cdecl, gcsafe.}](load("glVertexAttrib4NivARB"))
  glVertexAttrib4NubvARB = cast[proc (index: GLuint, v: ptr GLubyte) {.cdecl, gcsafe.}](load("glVertexAttrib4NubvARB"))
  glVertexAttrib4NusvARB = cast[proc (index: GLuint, v: ptr GLushort) {.cdecl, gcsafe.}](load("glVertexAttrib4NusvARB"))
  glVertexAttrib4NuivARB = cast[proc (index: GLuint, v: ptr GLuint) {.cdecl, gcsafe.}](load("glVertexAttrib4NuivARB"))
  glVertexAttribPointerARB = cast[proc (index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}](load("glVertexAttribPointerARB"))
  glEnableVertexAttribArrayARB = cast[proc (index: GLuint) {.cdecl, gcsafe.}](load("glEnableVertexAttribArrayARB"))
  glDisableVertexAttribArrayARB = cast[proc (index: GLuint) {.cdecl, gcsafe.}](load("glDisableVertexAttribArrayARB"))
  glBindAttribLocationARB = cast[proc (programObj: GLhandleARB, index: GLuint, name: ptr GLcharARB) {.cdecl, gcsafe.}](load("glBindAttribLocationARB"))
  glGetActiveAttribARB = cast[proc (programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: ptr GLcharARB) {.cdecl, gcsafe.}](load("glGetActiveAttribARB"))
  glGetAttribLocationARB = cast[proc (programObj: GLhandleARB, name: ptr GLcharARB): GLint {.cdecl, gcsafe.}](load("glGetAttribLocationARB"))
  glGetVertexAttribdvARB = cast[proc (index: GLuint, pname: GLenum, params: ptr GLdouble) {.cdecl, gcsafe.}](load("glGetVertexAttribdvARB"))
  glGetVertexAttribfvARB = cast[proc (index: GLuint, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetVertexAttribfvARB"))
  glGetVertexAttribivARB = cast[proc (index: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetVertexAttribivARB"))
  glGetVertexAttribPointervARB = cast[proc (index: GLuint, pname: GLenum, pointer: ptr pointer) {.cdecl, gcsafe.}](load("glGetVertexAttribPointervARB"))


proc findExtensionsGL() =
  GLAD_GL_ARB_cull_distance = hasExt("GL_ARB_cull_distance")
  GLAD_GL_ARB_draw_buffers = hasExt("GL_ARB_draw_buffers")
  GLAD_GL_ARB_draw_buffers_blend = hasExt("GL_ARB_draw_buffers_blend")
  GLAD_GL_ARB_draw_elements_base_vertex = hasExt("GL_ARB_draw_elements_base_vertex")
  GLAD_GL_ARB_fragment_program = hasExt("GL_ARB_fragment_program")
  GLAD_GL_ARB_fragment_program_shadow = hasExt("GL_ARB_fragment_program_shadow")
  GLAD_GL_ARB_fragment_shader = hasExt("GL_ARB_fragment_shader")
  GLAD_GL_ARB_multisample = hasExt("GL_ARB_multisample")
  GLAD_GL_ARB_multitexture = hasExt("GL_ARB_multitexture")
  GLAD_GL_ARB_shader_texture_lod = hasExt("GL_ARB_shader_texture_lod")
  GLAD_GL_ARB_shadow = hasExt("GL_ARB_shadow")
  GLAD_GL_ARB_texture_swizzle = hasExt("GL_ARB_texture_swizzle")
  GLAD_GL_ARB_uniform_buffer_object = hasExt("GL_ARB_uniform_buffer_object")
  GLAD_GL_ARB_vertex_attrib_binding = hasExt("GL_ARB_vertex_attrib_binding")
  GLAD_GL_ARB_vertex_blend = hasExt("GL_ARB_vertex_blend")
  GLAD_GL_ARB_vertex_program = hasExt("GL_ARB_vertex_program")
  GLAD_GL_ARB_vertex_shader = hasExt("GL_ARB_vertex_shader")
  GLAD_GL_EXT_shadow_funcs = hasExt("GL_EXT_shadow_funcs")
  discard


proc findCoreGL(glVersion: string) =
  # Thank you @elmindreda
  # https://github.com/elmindreda/greg/blob/master/templates/greg.c.in#L176
  # https://github.com/glfw/glfw/blob/master/src/context.c#L36
  var prefixes = ["OpenGL ES-CM ", "OpenGL ES-CL ", "OpenGL ES "]

  var version = glVersion
  for p in prefixes:
    if version.startsWith(p):
      version = version.replace(p)
      break

  var major = ord(glVersion[0]) - ord('0')
  var minor = ord(glVersion[2]) - ord('0')

  glVersionMajor = major
  glVersionMinor = minor

  GLAD_GL_VERSION_1_0 = (major == 1 and minor >= 0) or major > 1
  GLAD_GL_VERSION_1_1 = (major == 1 and minor >= 1) or major > 1
  GLAD_GL_VERSION_1_2 = (major == 1 and minor >= 2) or major > 1
  GLAD_GL_VERSION_1_3 = (major == 1 and minor >= 3) or major > 1
  GLAD_GL_VERSION_1_4 = (major == 1 and minor >= 4) or major > 1
  GLAD_GL_VERSION_1_5 = (major == 1 and minor >= 5) or major > 1
  GLAD_GL_VERSION_2_0 = (major == 2 and minor >= 0) or major > 2
  GLAD_GL_VERSION_2_1 = (major == 2 and minor >= 1) or major > 2


proc gladLoadGL*(load: proc): bool =
  glGetString = cast[proc (name: GLenum): ptr GLubyte {.cdecl, gcsafe.}](load("glGetString"))
  if glGetString == nil: return false

  var glVersion = cast[cstring](glGetString(GL_VERSION))
  if glVersion == nil: return false

  findCoreGL($glVersion)

  load_GL_VERSION_1_0(load)
  load_GL_VERSION_1_1(load)
  load_GL_VERSION_1_2(load)
  load_GL_VERSION_1_3(load)
  load_GL_VERSION_1_4(load)
  load_GL_VERSION_1_5(load)
  load_GL_VERSION_2_0(load)
  load_GL_VERSION_2_1(load)

  findExtensionsGL()

  load_GL_ARB_draw_buffers(load);
  load_GL_ARB_draw_buffers_blend(load);
  load_GL_ARB_draw_elements_base_vertex(load);
  load_GL_ARB_fragment_program(load);
  load_GL_ARB_multisample(load);
  load_GL_ARB_multitexture(load);
  load_GL_ARB_uniform_buffer_object(load);
  load_GL_ARB_vertex_attrib_binding(load);
  load_GL_ARB_vertex_blend(load);
  load_GL_ARB_vertex_program(load);
  load_GL_ARB_vertex_shader(load);

  return glVersionMajor != 0 or glVersionMinor != 0

